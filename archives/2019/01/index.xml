<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019/01 on ぺーぺーSEのテックブログ</title>
    <link>https://blog.pepese.com/archives/2019/01/</link>
    <description>Recent content in 2019/01 on ぺーぺーSEのテックブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language><atom:link href="https://blog.pepese.com/archives/2019/01/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetesのアーキテクチャ整理</title>
      <link>https://blog.pepese.com/entry/k8s-architecture/</link>
      <pubDate>Tue, 15 Jan 2019 16:09:06 +0900</pubDate>
      
      <guid>https://blog.pepese.com/entry/k8s-architecture/</guid>
      <description>Kubernetes （ k8s ）のアーキテクチャについて整理する。
 サーバ構成 コンポーネント  公式
サーバ構成 k8s ではホストマシン（物理サーバ、もしくは仮想マシン、インスタンス）の種別として Control Plane と Worker Nodes がある。
それぞれで実行されるコンポーネントは以下の通り。各コンポーネントはそれぞれ各サーバ上で独立したプロセスとして常駐する。
 Control Plane ： 管理サーバ。クライアントツール（ kubectl ）から Control Plane を経由して Worker Nodes をコントロールする。  kube-apiserver etcd kube-scheduler kube-controller-manager cloud-controller-manager   Worker Nodes ： Control Plane から管理されるワーカーサーバ。複数台で構成されるクラスタ構成をとり、コンテナがマウントされる。  kubelet kube-proxy kube-dns ・CoreDNS    その他コンポーネント・クライアントツール  その他のコンポーネント  hyperkube  k8s 関連のバイナリを1つにまとめたall-in-oneバイナリ   cAdvisor  各 Node 上にあるコンテナのCPU、メモリ、ファイル、ネットワーク使用量といった、リソースの使用量と性能の指標を監視・収集するエージェント     クライアントツール  kubectl  k8s クラスタを管理するコマンド   kubeadm  物理もしくは仮想サーバに対して Kubernetes 環境を構築するツール   kubefed  Federation を管理するコマンド Federationは複数のリージョンやクラウドに配置されているKubernetesのクラスタを一括で管理できるようにする機能   Minikube  1 台のローカル端末で シングル Node の Kubernetes Cluster をお試しできるツール   Dashboard  k8s クラスタの可視化を行う Web ベースのツール      コンポーネント ここでは先ほど紹介した Control Plane/Worker Nodes に配備されている主要コンポーネントについて記載する。</description>
    </item>
    
    <item>
      <title>GolangでgRPC</title>
      <link>https://blog.pepese.com/draft/golang%E3%81%A7grpc/</link>
      <pubDate>Thu, 03 Jan 2019 18:23:48 +0900</pubDate>
      
      <guid>https://blog.pepese.com/draft/golang%E3%81%A7grpc/</guid>
      <description>gRPC は、RPC (Remote Procedure Call) を実現するためにGoogleが開発したプロトコルの1つ。 Protocol Buffers を使ってデータをシリアライズ（異なるプログラミング言語間で XML や JSON といったデータフォーマットを介することなる透過的にデータをやり取り）し、HTTP/2 ベース高速な通信を実現できる。 プログラミング言語に依存しない IDL（インターフェース定義言語）を使ってあらかじめAPI仕様を .proto ファイルとして定義し、そこからサーバー側＆クライアント側に必要なソースコードのひな形を生成。
 環境設定 gRPC その他 Tips  環境設定 ここでは 公式 とは異なる方法で設定して軽く動確する。（基本は公式参照）
$ go get -u google.golang.org/grpc $ brew install protobuf # protoc コマンドが入る（ここが公式とは異なる） $ protoc --version # 必ずバージョンを確認する libprotoc 3.14.0 $ go get -u github.com/golang/protobuf/protoc-gen-go # go に対応するコードを出力するためのプラグイン git clone -b v1.34.0 https://github.com/grpc/grpc-go でサンプル取得できる。
以下 2 つのターミナルで動かしてみる。
ターミナル１：サーバサイド
$ cd grpc-go/examples/helloworld $ go run greeter_server/main.</description>
    </item>
    
    <item>
      <title>Go入門</title>
      <link>https://blog.pepese.com/entry/golang-basics/</link>
      <pubDate>Thu, 03 Jan 2019 18:23:48 +0900</pubDate>
      
      <guid>https://blog.pepese.com/entry/golang-basics/</guid>
      <description>&lt;p&gt;golang の基本的なところをまとめる。&lt;br&gt;
さらっとまとめるつもりがどえらい量になったので注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;環境構築&lt;/li&gt;
&lt;li&gt;基本文法&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
