<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ぺーぺーSEのテックブログ</title>
  
  <subtitle>備忘録用メモサイト</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pepese.github.io/"/>
  <updated>2019-02-10T07:50:56.702Z</updated>
  <id>https://pepese.github.io/</id>
  
  <author>
    <name>ぺーぺーSE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golangのソート</title>
    <link href="https://pepese.github.io/blog/golang-sort/"/>
    <id>https://pepese.github.io/blog/golang-sort/</id>
    <published>2019-02-10T07:48:34.000Z</published>
    <updated>2019-02-10T07:50:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>Golang におけるソートについてまとめる。</p><ul><li>sort パッケージ</li><li>sort パッケージで独自のソートを作ってみる</li><li>スクラッチでソートしてみる</li></ul><a id="more"></a><h1 id="sort-パッケージ">sort パッケージ</h1><p>sort パッケージでは、以下の <code>Interface</code> に合わせた実装をしておけば、独自の type でも <code>sort.Sort(data Interface)</code> でソートしてくれる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">Len() <span class="keyword">int</span> <span class="comment">// 要素数</span></span><br><span class="line">Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span> <span class="comment">// i 番目の要素が j 番目の要素より小さくなる条件</span></span><br><span class="line">Swap(i, j <span class="keyword">int</span>) <span class="comment">// i 番目の要素と j 番目の要素を入れ替えるロジック</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>とはいえ面倒なので、<code>IntSlice</code> （ <code>[]int</code> ）、<code>Float64Slice</code> （ <code>[]float64</code> ）、<code>StringSlice</code> （ <code>[]string</code> ）は用意されており、キャストして使用できる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line">sort.Sort(sort.IntSlice(a))</span><br></pre></td></tr></table></figure><p>キャストしたら、メンバに <code>Sort()</code> メソッドも実装されている。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line">sort.IntSlice(a).Sort()</span><br></pre></td></tr></table></figure><p>もしくはキャストしなくとも、<code>Ints([]int)</code> 、 <code>Float64s([]float64)</code> 、 <code>Strings([]string)</code> が用意されている。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line">sort.Ints(a)</span><br></pre></td></tr></table></figure><h2 id="slice">Slice</h2><p><code>Interface</code> の実装が面倒なら <code>less</code> だけ実装すればよい関数もある。</p><ul><li>func Slice(slice interface{}, less func(i, j int) bool)</li><li>func SliceStable(slice interface{}, less func(i, j int) bool)</li></ul><p><code>slice</code> はソート対象。 また、 <code>SliceStable</code> は <a href="https://ja.wikipedia.org/wiki/%E5%AE%89%E5%AE%9A%E3%82%BD%E3%83%BC%E3%83%88" target="_blank" rel="noopener">安定ソート</a> 。</p><h1 id="sort-パッケージで独自のソートを作ってみる">sort パッケージで独自のソートを作ってみる</h1><h2 id="interface-の実装">Interface の実装</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> users []user</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u users)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u users)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> u[i].age &lt; u[j].age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u users)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">u[i], u[j] = u[j], u[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []user&#123;</span><br><span class="line">user&#123;name: <span class="string">"A"</span>, age: <span class="number">2</span>&#125;,</span><br><span class="line">user&#123;name: <span class="string">"B"</span>, age: <span class="number">1</span>&#125;,</span><br><span class="line">user&#123;name: <span class="string">"C"</span>, age: <span class="number">4</span>&#125;,</span><br><span class="line">user&#123;name: <span class="string">"D"</span>, age: <span class="number">3</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">us := users(list)</span><br><span class="line">sort.Sort(us)</span><br><span class="line">fmt.Println(us)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sliceの利用">Sliceの利用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []user&#123;</span><br><span class="line">user&#123;name: <span class="string">"A"</span>, age: <span class="number">2</span>&#125;,</span><br><span class="line">user&#123;name: <span class="string">"B"</span>, age: <span class="number">1</span>&#125;,</span><br><span class="line">user&#123;name: <span class="string">"C"</span>, age: <span class="number">4</span>&#125;,</span><br><span class="line">user&#123;name: <span class="string">"D"</span>, age: <span class="number">3</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">sort.Slice(list, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> list[i].age &lt; list[j].age</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="スクラッチでソートしてみる">スクラッチでソートしてみる</h1><p>sort パッケージ使わずに。</p><h2 id="バブルソート">バブルソート</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sort</span><span class="params">(list []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">eNum := <span class="built_in">len</span>(list)</span><br><span class="line"><span class="keyword">for</span> i := eNum; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; i<span class="number">-1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> list[j] &gt; list[j+<span class="number">1</span>] &#123;</span><br><span class="line">list[j], list[j+<span class="number">1</span>] = list[j+<span class="number">1</span>], list[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>&#125;</span><br><span class="line">sort(list)</span><br><span class="line">fmt.Println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暇になったら他にも作ろうかなー。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Golang におけるソートについてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sort パッケージ&lt;/li&gt;
&lt;li&gt;sort パッケージで独自のソートを作ってみる&lt;/li&gt;
&lt;li&gt;スクラッチでソートしてみる&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://pepese.github.io/tags/golang/"/>
    
      <category term="go" scheme="https://pepese.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Golangのファイル入出力</title>
    <link href="https://pepese.github.io/blog/golang-file-io/"/>
    <id>https://pepese.github.io/blog/golang-file-io/</id>
    <published>2019-02-08T12:26:46.000Z</published>
    <updated>2019-02-09T23:28:21.898Z</updated>
    
    <content type="html"><![CDATA[<p>golang のファイル入出力についてまとめる。</p><ul><li>os パッケージ</li><li>io/ioutil パッケージ</li><li>bufio パッケージ</li></ul><a id="more"></a><h1 id="os-パッケージ">os パッケージ</h1><p>読み込みの例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// `in.txt` には「hoge」とある</span></span><br><span class="line">file, _ := os.Open(<span class="string">`in.txt`</span>) <span class="comment">// *File, error</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()           <span class="comment">// お約束の Close</span></span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">3</span>) <span class="comment">// 1 回の File.Read で読み込むバッファサイズ</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, _ := file.Read(buf)    <span class="comment">// int, error</span></span><br><span class="line">fmt.Print(<span class="string">"n="</span>, n, <span class="string">" : "</span>) <span class="comment">// 実際に読み込んだバイト数</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果</span></span><br><span class="line"><span class="comment">// n=3 : hog</span></span><br><span class="line"><span class="comment">// n=1 : e</span></span><br><span class="line"><span class="comment">// n=0 :</span></span><br></pre></td></tr></table></figure><p><code>os.File</code> のメソッドには以下のようなものがある。</p><ul><li>func (f *File) Read(b []byte) (n int, err error)</li><li>func (f *File) ReadAt(b []byte, off int64) (n int, err error)<ul><li>ファイルの途中（ <code>off</code> byte ）から読み込み開始</li></ul></li><li>func (f *File) Write(b []byte) (n int, err error)</li><li>func (f *File) WriteAt(b []byte, off int64) (n int, err error)<ul><li>ファイルの途中（ <code>off</code> byte ）から書き込み開始</li></ul></li><li>func (f *File) WriteString(s string) (n int, err error)</li><li>func (f *File) Seek(offset int64, whence int) (ret int64, err error)</li><li>func (f *File) Close() error</li></ul><p>上記のメソッドは <code>io</code> パッケージに <code>Reader</code> <code>Writer</code> <code>Closer</code> のようなインターフェースとして定義されている。<br>書き込みはもう想像つくと思うから省略。<br><code>os.Create()</code> というメソッドがあるということだけ買いておこう。</p><blockquote><p>ちなみに標準入力の <code>os.Stdin</code> は <code>*io.File</code> 型であり、 <code>io.Reader</code> インターフェースを満たしている。</p></blockquote><h1 id="ioioutil-パッケージ">io/ioutil パッケージ</h1><p>その名の通り、 io 系のユーティル機能を提供する。<br><code>Close</code> しなくてよかったりして楽。<br>以下のようなメソッドがある。</p><ul><li>func ReadAll(r io.Reader) ([]byte, error)<ul><li><code>io.Reader</code> から全部読む</li></ul></li><li>func ReadFile(filename string) ([]byte, error)<ul><li>ファイルから全部読む</li></ul></li><li>func WriteFile(filename string, data []byte, perm os.FileMode) error<ul><li>ファイルへ全部書く</li></ul></li></ul><h1 id="bufio-パッケージ">bufio パッケージ</h1><p><code>ioutil</code> はちと大胆なので、通常は行単位の読み書きやバッファリング機能をもつ <code>bufio</code> パッケージを使用する。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1234[改行]5678[改行]90</span></span><br><span class="line">f, _ := os.Open(<span class="string">`ins.txt`</span>) <span class="comment">// *File, error</span></span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">sc := bufio.NewScanner(f)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; sc.Scan(); i++ &#123; <span class="comment">// Scan() は次の読み込み位置へ移動して bool （次読める、読めない）を返す</span></span><br><span class="line">line := sc.Text() <span class="comment">// 1 行を string で取得</span></span><br><span class="line">fmt.Printf(<span class="string">"%d行目: %s\n"</span>, i, line)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bufio.Scanner</code> は内部に <code>MaxScanTokenSize</code> という定数を持っており、 <strong>64 KB を超える行を読み込めない</strong> ので注意が必要。<br>他には以下のメソッドがある。</p><ul><li>func (s *Scanner) Bytes() []byte<ul><li>1 行を <code>[]byte</code> で取得</li></ul></li><li>func (s *Scanner) Buffer(buf []byte, max int)<ul><li>1 行の読み込み上限サイズ（ <code>MaxScanTokenSize</code> ）を変更できる</li></ul></li><li>func (s *Scanner) Split(split SplitFunc)<ul><li>デフォルトでは行単位の読み込み単位を変更できる</li><li>行単位（ <code>bufio.ScanLines</code> : デフォルト）単語単位（ <code>bufio.ScanWords</code> ）、バイト単位（ <code>bufio.ScanBytes</code> ）、文字（ <code>rune</code> ）単位（ <code>bufio.ScanRunes</code> ）</li><li>また、 <code>func(data []byte, atEOF bool) (advance int, token []byte, err error)</code> を満たす関数であれば独自カスタマイズも可能</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang のファイル入出力についてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;os パッケージ&lt;/li&gt;
&lt;li&gt;io/ioutil パッケージ&lt;/li&gt;
&lt;li&gt;bufio パッケージ&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://pepese.github.io/tags/golang/"/>
    
      <category term="go" scheme="https://pepese.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Golangの変数・型・定数・リテラル</title>
    <link href="https://pepese.github.io/blog/golang-var-type-const-literal/"/>
    <id>https://pepese.github.io/blog/golang-var-type-const-literal/</id>
    <published>2019-02-08T10:33:01.000Z</published>
    <updated>2019-02-08T10:58:39.137Z</updated>
    
    <content type="html"><![CDATA[<p>golang の変数・型・定数・リテラルについてまとめる。</p><ul><li>変数</li><li>型</li><li>定数</li><li>リテラル</li><li>その他 Tips</li></ul><a id="more"></a><h1 id="変数">変数</h1><p>変数は <code>var 変数名 型</code> で定義する。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>右辺で型が推測できる場合は <code>変数名 := 値</code> で変数定義と初期化ができる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num := <span class="number">10</span></span><br></pre></td></tr></table></figure><p>右辺の型の予測は <strong>リテラル</strong> も参考のこと。</p><h1 id="型">型</h1><ul><li>論理値型（ <code>bool</code> ）</li><li>数値型（ <code>int</code> <code>int8</code> <code>int16</code> <code>int32</code> <code>int64</code> <code>byte</code> <code>uint</code> <code>uint8</code> <code>uint16</code> <code>uint32</code> <code>uint64</code> ）<ul><li><code>int</code> はアーキテクチャにより異なり、32 ビットもしくは 64 ビットとなる<ul><li>32 ビットの場合の値域は「-1&lt;&lt;31 〜 1&lt;&lt;31 - 1（-2147483648 to 2147483647）」</li></ul></li><li><code>bype</code> は <code>uint8</code> の別名</li><li><code>rune</code> は <code>int32</code> の別名</li></ul></li><li>文字列型（ <code>string</code> ）<ul><li><code>[]byte</code> のように振る舞うが <strong>値は不変</strong></li></ul></li><li>配列型（ <code>[サイズ]型</code> ）</li><li>スライス型（ <code>[]型</code> ）</li><li>構造体型（ <code>struct{}</code> ）</li><li>ポインタ型（ <code>*型</code> ）</li><li>関数型（ <code>func(引数) 返り値型</code> ）</li><li>インタフェース型（ <code>interface{}</code> ）</li><li>マップ型（ <code>map[型]型</code> ）</li><li>チャネル型（ <code>chan 型</code> <code>&lt;-chan 型</code> <code>chan&lt;- 型</code> ）</li></ul><h1 id="定数">定数</h1><p><code>定数名 = 値</code> （ <code>:=</code> ではない）で定義でき、値を変更することはできない。</p><h1 id="リテラル">リテラル</h1><p><strong>リテラル</strong> とは、プログラムのソースコードにおいて使用される、 <strong>数値や文字列を直接に記述した定数</strong> のこと。<br>golang には以下のリテラルがある。</p><ul><li>整数リテラル<ul><li>10 進数、 8 進数、 16 進数の整数リテラルがあり、 8 進数は頭に <code>0</code> を、 16 進数は頭に <code>0x</code> <code>0X</code> をつける</li></ul></li><li>浮動小数点リテラル<ul><li>浮動小数点定数を表す小数表現で、整数部・小数点（ <code>.</code> ）・小数部・指数部（ <code>e+</code> <code>E+</code>）がある<ul><li>100 は <code>1e2</code> <code>1.e2</code> <code>1e+2</code> <code>1E2</code> 、 0.01 は <code>1e-2</code> <code>1.e-2</code> <code>1E-2</code> などと表現できる</li></ul></li></ul></li><li>虚数リテラル<ul><li>複素数定数の虚数部分の小数表現</li><li>小数整数と小文字 <code>i</code> で構成される</li></ul></li><li>ルーンリテラル<ul><li>Unicodeコードポイントに一致する整数値（ <code>int32</code> ）</li><li>シングルクォート（ <code>'</code> ）でくくって表現する</li><li>バックスラッシュを使用したマルチ文字シーケンスの各書式でエンコード（ <code>\'</code> ）することで、シングルクォート文字自体のUnicode値も表せる</li></ul></li><li>文字列リテラル<ul><li>未加工文字列リテラル（ raw 文字列リテラル）はバッククォート、解釈有文字列リテラル（ interpreted 文字列リテラル）はダブルクォートで囲む</li></ul></li></ul><h2 id="ルーンリテラル">ルーンリテラル</h2><p>ちょっとややこしいかもしれないので補足。<br>例えば 、リテラル <code>'a'</code> は文字 <code>a</code> 、Unicode 「 U+0061 」（ <code>'\u0061'</code> ） 、値 <code>0x61</code> を表す 1 バイトの値。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">rune</span></span><br><span class="line">a = <span class="string">'a'</span></span><br><span class="line">fmt.Println(a) <span class="comment">// 97</span></span><br><span class="line">a = <span class="number">0x61</span></span><br><span class="line">fmt.Println(a) <span class="comment">// 97</span></span><br><span class="line">a = <span class="string">'\u0061'</span></span><br><span class="line">fmt.Println(a) <span class="comment">// 97</span></span><br><span class="line">a = <span class="number">97</span></span><br><span class="line">fmt.Println(a)        <span class="comment">// 97</span></span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, a) <span class="comment">// 97</span></span><br><span class="line">fmt.Printf(<span class="string">"%c\n"</span>, a) <span class="comment">// a</span></span><br><span class="line">fmt.Printf(<span class="string">"%U\n"</span>, a) <span class="comment">// U+0061</span></span><br></pre></td></tr></table></figure><h2 id="文字列リテラル">文字列リテラル</h2><p>ちょっとややこしいかもしれないので補足。<br><strong>未加工文字列リテラル</strong> はクオート内を全く解釈することがなく、そのまま出力する。<br>一方、 <strong>解釈有文字列リテラル</strong> はダブルクオート内の <strong>バックスラッシュによるエスケープを解釈</strong> する。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line">a = <span class="string">`\n`</span></span><br><span class="line">fmt.Println(a) <span class="comment">// \n</span></span><br><span class="line">a = <span class="string">"\n"</span></span><br><span class="line">fmt.Println(a) <span class="comment">// 改行</span></span><br><span class="line">a = <span class="string">"\u0061"</span></span><br><span class="line">fmt.Println(a) <span class="comment">// a</span></span><br></pre></td></tr></table></figure><h1 id="その他tips">その他Tips</h1><h2 id="byte-と-rune">byte と rune</h2><p><code>byte</code> はあくまで 1 byte を意味し、 <code>rune</code> は <strong>1 文字</strong> を意味する。<br>1 文字は数 byte で表されることもあるため、 <code>rune</code> が存在する。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"あいうえお"</span></span><br><span class="line">buf := []<span class="keyword">byte</span>(<span class="string">"あいうえお"</span>)</span><br><span class="line">runes := []<span class="keyword">rune</span>(<span class="string">"あいうえお"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(str)           <span class="comment">// あいうえお</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(buf))   <span class="comment">// あいうえお</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(runes)) <span class="comment">// あいうえお</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">    b := str[i]    <span class="comment">// byte 単位で取得される</span></span><br><span class="line">    fmt.Println(b) <span class="comment">// 227, 129, 130, 227, 129, 132, 227, 129, 134, 227, 129, 136, 227, 129, 138</span></span><br><span class="line">    <span class="comment">// 「あ」は 3 byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> str &#123; <span class="comment">// 1 文字（ rune ）単位で取得される</span></span><br><span class="line">    fmt.Println(r) <span class="comment">// 12354, 12356, 12358, 12360, 12362</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang の変数・型・定数・リテラルについてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;変数&lt;/li&gt;
&lt;li&gt;型&lt;/li&gt;
&lt;li&gt;定数&lt;/li&gt;
&lt;li&gt;リテラル&lt;/li&gt;
&lt;li&gt;その他 Tips&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://pepese.github.io/tags/golang/"/>
    
      <category term="go" scheme="https://pepese.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Golang入門</title>
    <link href="https://pepese.github.io/blog/golang-basics/"/>
    <id>https://pepese.github.io/blog/golang-basics/</id>
    <published>2019-01-03T01:54:59.000Z</published>
    <updated>2019-02-05T00:12:18.732Z</updated>
    
    <content type="html"><![CDATA[<p>golang の基本的なところをまとめる。<br>さらっとまとめるつもりがどえらい量になったので注意。</p><ul><li>環境構築</li><li>基本文法</li></ul><a id="more"></a><h1 id="環境構築">環境構築</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install go</span><br></pre></td></tr></table></figure><h2 id="環境変数の設定">環境変数の設定</h2><p>https://golang.org/doc/install/source#environment</p><ul><li><code>GOROOT</code><ul><li>go のバイナリのホームまでのパス</li><li><code>go env GOROOT</code></li></ul></li><li><code>GOPATH</code><ul><li><code>go env GOPATH</code></li><li>go のパスであってプロジェクトのパスでないことに注意</li><li>プロジェクトのパスは <code>$GOPATH/src/github.com/&lt;Githubアカウント名&gt;/&lt;プロジェクト名&gt;</code></li></ul></li><li><code>GOOS</code><ul><li>コンパイルして作成するバイナリの対象 OS を指定する</li></ul></li><li><code>GOARCH</code><ul><li>コンパイルして作成するバイナリの対象 CPU を指定する</li></ul></li></ul><p><code>.bash_profile</code> に以下を追記。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=`go env GOROOT`</span><br><span class="line">export GOPATH=`go env GOPATH`</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h2 id="依存関係管理ツール-dep">依存関係管理ツール dep</h2><p>ライブラリの依存解決ツールはいくつかあるが、オフィシャル化に近そうなので <code>dep</code> を使用する。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install dep</span><br><span class="line">$ dep <span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="ディレクトリ構造">ディレクトリ構造</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">├─bin/</span><br><span class="line">├─pkg/</span><br><span class="line">│  └─darwin_amd64/</span><br><span class="line">│    ├─github.com/</span><br><span class="line">│    │  └─GitHubアカウント名</span><br><span class="line">│    │    ├─`*.a`ファイル[^1]</span><br><span class="line">│    │    └─GitHubレポジトリ名/`*.a`ファイル[^2]</span><br><span class="line">│    └─pkg.in/</span><br><span class="line">│      ├─パッケージ名/</span><br><span class="line">│      └─`*.a`ファイル</span><br><span class="line">└─src/</span><br><span class="line">  ├─gopkg.in/</span><br><span class="line">  │  └─パッケージ名/</span><br><span class="line">  │    └─LICENSEとか`*.go`とかREADMEとか</span><br><span class="line">  └─github.com/</span><br><span class="line">    ├─GitHubアカウント名</span><br><span class="line">    │  └─GitHubレポジトリ名/</span><br><span class="line">    │    └─LICENSEとか`*.go`とかREADMEとか</span><br><span class="line">    └─&lt;あなたのGitHubユーザ名&gt;</span><br><span class="line">      └─GitHubレポジトリ名/ # プロジェクトディレクトリ（複数）</span><br><span class="line">        ├─glide.yaml</span><br><span class="line">        ├─main.go</span><br><span class="line">        ├─その他、あなたが開発中のソフトウェアのコード</span><br><span class="line">        └─vendor/依存先パッケージのコード(depでとってきたやつ)</span><br></pre></td></tr></table></figure><h2 id="コマンドラインツール">コマンドラインツール</h2><ul><li>goimports<ul><li>過不足のimportの自動補完</li><li><code>go get golang.org/x/tools/cmd/goimports</code></li></ul></li><li>gocode<ul><li>ヘルパー機能</li><li><code>go get -u -v github.com/nsf/gocode</code></li></ul></li><li>godef<ul><li>呼び出し関数へのジャンプなど</li><li><code>go get -u -v github.com/rogpeppe/godef</code></li></ul></li><li>gogetdoc<ul><li><code>go get -u -v github.com/zmb3/gogetdoc</code></li></ul></li><li>golint<ul><li>lint</li><li><code>go get -u -v github.com/golang/lint/golint</code></li></ul></li><li>go-outline<ul><li><code>go get -u -v github.com/lukehoban/go-outline</code></li></ul></li><li>goreturns<ul><li><code>go get -u -v sourcegraph.com/sqs/goreturns</code></li></ul></li><li>gorename<ul><li><code>go get -u -v golang.org/x/tools/cmd/gorename</code></li></ul></li><li>gopkgs<ul><li><code>go get -u -v github.com/tpng/gopkgs</code></li></ul></li><li>go-symbols<ul><li><code>go get -u -v github.com/newhook/go-symbols</code></li></ul></li><li>guru<ul><li><code>go get -u -v golang.org/x/tools/cmd/guru</code></li></ul></li><li>gotests<ul><li><code>go get -u -v github.com/cweill/gotests/...</code></li></ul></li></ul><h2 id="プロジェクトの作成">プロジェクトの作成</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/github.com/&lt;あなたのGithubアカウント名&gt;/&lt;プロジェクト名&gt;</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/&lt;あなたのGithubアカウント名&gt;/&lt;プロジェクト名&gt;</span><br></pre></td></tr></table></figure><p>初回は以下のような感じ。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/github.com/&lt;あなたのGithubアカウント名&gt;</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/&lt;あなたのGithubアカウント名&gt;</span><br><span class="line">$ git <span class="built_in">clone</span> &lt;golangプロジェクト&gt; <span class="comment"># プロジェクトディレクトリの作成</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;golangプロジェクト&gt;</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"vendor/"</span> &gt; .gitignore</span><br><span class="line">$ dep init <span class="comment"># dep の初期化</span></span><br><span class="line">$ touch app.go <span class="comment"># 依存ライブラリ含め好きなコード書く</span></span><br><span class="line">$ dep ensure -v <span class="comment"># 依存ライブラリの解決</span></span><br><span class="line">$ go run app.go</span><br></pre></td></tr></table></figure><h2 id="デバッグ環境作成">デバッグ環境作成</h2><ul><li>デバッガツール delve のインストール<ul><li><code>go get -u github.com/derekparker/delve/cmd/dlv</code></li></ul></li><li>VSCodeにGo言語の拡張機能をインストール<ul><li><code>Rich Go language support for Visual Studio Code</code></li></ul></li></ul><h1 id="基本文法">基本文法</h1><p><a href="https://go-tour-jp.appspot.com/list" target="_blank" rel="noopener">A Tour of Go</a>を一通りやるといい。<br>とりあえず、こんにちは世界。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, 世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run hello.go</span><br><span class="line">Hello, 世界</span><br></pre></td></tr></table></figure><p>なお、<a href="https://play.golang.org/" target="_blank" rel="noopener">The Go Playground</a> というサービスを使うと Web でお試し実行できる。<br><a href="http://interprism.hatenablog.com/entry/2014/03/04/132551" target="_blank" rel="noopener">他</a> にもいろいろあるみたい。<br>以降は、<a href="https://go-tour-jp.appspot.com/list" target="_blank" rel="noopener">A Tour of Go</a> を読みつつも、<strong>自分向けに</strong> 補足したり省略したりしてまとめたもの。</p><h2 id="パッケージのインポート">パッケージのインポート</h2><p>標準パッケージのインポートは以下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math"</span></span><br></pre></td></tr></table></figure><p>インポートしたら <code>fmt.Println</code> とかインポート名で使用できる。<br>また、インポート名を変更もできる。（ <code>f.Println</code> ）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">f <span class="string">"fmt"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>また、独自や OSS ライブラリのインポートは <code>${GOPATH}/src</code> からのパスを指定する。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/spf13/cobra"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="パッケージ外からの参照">パッケージ外からの参照</h2><p>Go では、最初の文字が <em>大文字で始まる名前</em> は、外部のパッケージから参照できる公開された名前( <em>exported name</em> )。<br>例えば、 <code>Pi</code> は <code>math</code> パッケージでエクスポートされている。<br><code>pi</code> （小文字）ではないことに注意。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//fmt.Println(math.pi)  // Error になる</span></span><br><span class="line">    fmt.Println(math.Pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="関数">関数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func add(x , y int) int &#123; // 引数の型定義、省略可能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(add(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数も値として扱える</span></span><br><span class="line">sub := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sub(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即時関数</span></span><br><span class="line">v := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y</span><br><span class="line">&#125;(<span class="number">42</span>, <span class="number">13</span>)</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="複数の-return">複数の return</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := swap(<span class="string">"hello"</span>, <span class="string">"world"</span>)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="return-の変数名">return の変数名</h2><p>返り値となる変数に名前をつけることができる。<br>そして、 <code>return</code> と書くだけでよくなる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">y = sum - x</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(split(<span class="number">17</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="クロージャ">クロージャ</h2><p>Go の関数は <strong>クロージャ</strong> （関数オブジェクトの一種）。<br>関数の引数として渡したり、遅延実行させたりできる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum += x   </span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pos := adder() <span class="comment">// 無名関数をオブジェクトとして受け取る</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 関数オブジェクト内で sum が保持されているので</span></span><br><span class="line"><span class="comment">// 呼び出す度に加算されていく</span></span><br><span class="line">fmt.Println(pos(i))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="変数宣言">変数宣言</h2><p><code>var</code> は <strong>変数宣言</strong> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, python, java <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">fmt.Println(i, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初期化子が与えられている場合、型を省略できる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span></span><br><span class="line">fmt.Println(i, j, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>関数の中では、 <code>var</code> 宣言の代わりに、短い <code>:=</code> の代入文を使い、暗黙的な型宣言ができる。<br>この場合、変数の型は右側の変数から型推論される。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span>           <span class="comment">// int</span></span><br><span class="line">f := <span class="number">3.142</span>        <span class="comment">// float64</span></span><br><span class="line">g := <span class="number">0.867</span> + <span class="number">0.5i</span> <span class="comment">// complex128</span></span><br></pre></td></tr></table></figure><p>関数の外では、キーワードではじまる宣言( <code>var</code> , <code>func</code> など)が必要で、 <code>:=</code> での暗黙的な宣言は利用できない。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">k := <span class="number">3</span></span><br><span class="line">c, python, java := <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(i, j, k, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本型">基本型</h2><ul><li><code>bool</code></li><li><code>string</code></li><li><code>int</code> <code>int8</code> <code>int16</code> <code>int32</code> <code>int64</code></li><li><code>uint</code> <code>uint8</code> <code>uint16</code> <code>uint32</code> <code>uint64</code> <code>uintptr</code></li><li><code>byte</code><ul><li><code>uint8</code> の別名</li></ul></li><li><code>rune</code><ul><li><code>int32</code> の別名</li><li>Unicode のコードポイントを表す</li><li>rune とは古代文字を表す言葉( runes )、 Go では文字そのものを表すためにruneという言葉を使う</li></ul></li><li><code>float32</code> <code>float64</code></li><li><code>complex64</code> <code>complex128</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/cmplx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ToBe   <span class="keyword">bool</span>       = <span class="literal">false</span></span><br><span class="line">MaxInt <span class="keyword">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">z      <span class="keyword">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Type: %T Value: %v\n"</span>, ToBe, ToBe)</span><br><span class="line">fmt.Printf(<span class="string">"Type: %T Value: %v\n"</span>, MaxInt, MaxInt)</span><br><span class="line">fmt.Printf(<span class="string">"Type: %T Value: %v\n"</span>, z, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ゼロ値">ゼロ値</h2><p>変数に初期値を与えずに宣言すると、ゼロ値( <strong>zero value</strong> )が与えられる。<br>ゼロ値は型によって以下のように与えられる。</p><ul><li>数値型(int,floatなど): 0</li><li>bool型: false</li><li>string型: "" (空文字列( empty string ))</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">fmt.Printf(<span class="string">"%v %v %v %q\n"</span>, i, f, b, s) <span class="comment">// 0 0 false ""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="型変換">型変換</h2><p>従来の <strong>キャスト</strong> とほぼ同じ。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="keyword">uint</span> = <span class="keyword">uint</span>(f)</span><br></pre></td></tr></table></figure><p>ただし、C言語とは異なり、 <em>Goでの型変換は明示的な変換が必要</em> 。</p><h2 id="定数型">定数型</h2><p>定数は、 <code>const</code> キーワードを使って変数と同じように宣言。<br>定数は、文字(character)、文字列(string)、boolean、数値(numeric)のみで使える。<br>なお、定数は <code>:=</code> を使って宣言できない。</p><h2 id="繰り返し-for">繰り返し for</h2><p>所謂 <code>for</code> ループ。Go に <code>while</code> はない。<br>他言語とは異なり、 for ステートメントの3つの部分を括る括弧 <code>( )</code> はない。なお、中括弧 <code>{ }</code> は必要。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while-っぽい-for">while っぽい for</h2><p><code>for</code> はセミコロン( <code>;</code> )を省略することもできる。<br>つまり、C言語などにある <code>while</code> は、Goでは <code>for</code> だけを使う。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件文-if">条件文 if</h2><p>Go 言語の <code>if</code> ステートメントは、 <code>for</code> ループと同様に、括弧 <code>( )</code> は不要で、中括弧 <code>{ }</code> は必要。<br>また、 <code>if</code> ステートメントは、 <code>for</code> のように、条件の前に、評価するための簡単なステートメントを書くことができる。<br>ここで宣言された変数は、 if のスコープ内だけで有効。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123; <span class="comment">// ここ注目</span></span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>),</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">3</span>, <span class="number">20</span>),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if</code> ステートメントで宣言された変数は、 <code>else</code> ブロック内でも使うことができる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%g &gt;= %g\n"</span>, v, lim) <span class="comment">// v を参照できる</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// can't use v here, though</span></span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>),</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">3</span>, <span class="number">20</span>),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-文">switch 文</h2><p>Go の <code>switch</code> は C や C++、Java、JavaScript、PHP の <code>switch</code> と似ているが、 Go では選択された <code>case</code> だけを実行してそれに続く全ての <code>case</code> は実行されない。<br>これらの言語の各 <code>case</code> の最後に必要な <code>break</code> ステートメントが Go では <em>自動的に提供される</em> 。<br>もう一つの重要な違いは Go の <code>switch</code> の <code>case</code> は定数である必要はなく、 関係する値は整数である必要はない。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"Go runs on "</span>)</span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">fmt.Println(<span class="string">"OS X."</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">fmt.Println(<span class="string">"Linux."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// freebsd, openbsd,</span></span><br><span class="line"><span class="comment">// plan9, windows...</span></span><br><span class="line">fmt.Printf(<span class="string">"%s."</span>, os)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defer">defer</h2><p><code>defer</code> ステートメントは、 <code>defer</code> へ渡した関数の実行を、呼び出し元の関数の終わり( <code>return</code> 後)まで遅延させる。<br><code>defer</code> へ渡した関数の引数は、すぐに評価されるが、その関数自体は呼び出し元の関数が <code>return</code> するまで実行されない。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br><span class="line"><span class="comment">// と出力される</span></span><br></pre></td></tr></table></figure><p><code>defer</code> が複数ある場合、その呼び出しはスタックされ、 LIFO の順番で実行される。（後から順に実行される）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"counting"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// counting</span></span><br><span class="line"><span class="comment">// done</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><code>defer</code> は <code>panic</code> の <code>recover</code> によく用いられる。（ Java で言う <code>try-catch</code> 的な）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hoge</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        err := <span class="built_in">recover</span>()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Recover!:"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"Panic!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    hoge()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>panic</code> は Java でいう <code>Runtime Exception</code> 。 エラーハンドリングでは使っちゃダメ。 <code>Error</code> インターフェースを使おう。</p><ul><li>https://qiita.com/nayuneko/items/3c0b3c0de9e8b27c9548</li></ul><h2 id="ポインタ">ポインタ</h2><p>Go では <strong>ポインタ</strong> （値が格納されているメモリのアドレス）を扱える。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">p := &amp;i         <span class="comment">// i のポインタ</span></span><br><span class="line">fmt.Println(p)  <span class="comment">// i が格納されてるメモリのアドレス：0x416020</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// ポインタ経由で i の値にアクセス：10</span></span><br><span class="line">*p = <span class="number">20</span>         <span class="comment">// ポインタ経由で i の値を変更</span></span><br><span class="line">fmt.Println(i)  <span class="comment">// もちろん i から参照しても値は変わってる：20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="構造体-struct">構造体 struct</h2><p><code>type</code> で作成する。<br><code>type</code> 自体は <code>struct</code> 専用ではなく、独自の型を定義できるもの。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">x <span class="keyword">int</span> <span class="comment">// var 不要</span></span><br><span class="line">y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// vertex&#123;x:1, y:2&#125; でフィールド明記もできる</span></span><br><span class="line"></span><br><span class="line">fmt.Println(v)   <span class="comment">// &#123;1 2&#125;</span></span><br><span class="line">fmt.Println(v.x) <span class="comment">// ドットでフィールドアクセス：1</span></span><br><span class="line"></span><br><span class="line">pv := &amp;v           <span class="comment">// v のポインタ</span></span><br><span class="line">p := &amp;vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// いきなりポインタで作成も可能</span></span><br><span class="line"></span><br><span class="line">fmt.Println((*pv).y)<span class="comment">// 2</span></span><br><span class="line">fmt.Println(p.y) <span class="comment">// * を省略してもコンパイラが良しなに解釈してくれる：2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配列とスライス">配列とスライス</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a [<span class="number">2</span>]<span class="keyword">string</span> <span class="comment">// 配列</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">"Hello"</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="string">"World"</span></span><br><span class="line">fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>]) <span class="comment">// Hello World</span></span><br><span class="line">fmt.Println(a)          <span class="comment">// [Hello World]</span></span><br><span class="line"></span><br><span class="line">primes := [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125; <span class="comment">// 配列の値付き宣言</span></span><br><span class="line">fmt.Println(primes)                  <span class="comment">// [2 3 5 7 11 13]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> = primes[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">// スライス</span></span><br><span class="line">fmt.Println(s)            <span class="comment">// [3 5 7]</span></span><br><span class="line"></span><br><span class="line">q := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125; <span class="comment">// スライスの値付き宣言</span></span><br><span class="line">fmt.Println(q)                 <span class="comment">// [2 3 5 7 11 13]</span></span><br><span class="line">fmt.Println(q[<span class="number">1</span>:<span class="number">3</span>])            <span class="comment">// Python のスライスっぽくアクセスできる：[3 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体のスライス</span></span><br><span class="line">ss := []<span class="keyword">struct</span> &#123;</span><br><span class="line">i <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="number">2</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ss) <span class="comment">// [&#123;2 true&#125; &#123;3 false&#125; &#123;5 true&#125; &#123;7 true&#125; &#123;11 false&#125; &#123;13 true&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次元配列・スライスも作成可能。<br>また、スライスは要素の追加（ <code>s = append(s, 0)</code> 、複数 <code>s = append(s, 2, 3, 4)</code> ）が可能。</p><h2 id="range">range</h2><p>これも Python っぽい。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123; <span class="comment">// インデックスと値</span></span><br><span class="line">fmt.Printf(<span class="string">"%d : %d\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;   <span class="comment">// インデックスだけ</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> pow &#123; <span class="comment">// "_"で捨てて値だけ</span></span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map">map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]vertex     <span class="comment">// mapの宣言</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]vertex) <span class="comment">// mapはmakeで作る</span></span><br><span class="line">m[<span class="string">"hoge"</span>] = vertex&#123;</span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m[<span class="string">"hoge"</span>]) <span class="comment">// &#123;1 2&#125;</span></span><br><span class="line"></span><br><span class="line">mm := <span class="keyword">map</span>[<span class="keyword">string</span>]vertex&#123; <span class="comment">// 値付きで宣言</span></span><br><span class="line"><span class="string">"hoge"</span>: &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line"><span class="string">"fuge"</span>: &#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(mm[<span class="string">"fuge"</span>]) <span class="comment">// &#123;3 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(mm, <span class="string">"fuge"</span>)        <span class="comment">// 要素の削除</span></span><br><span class="line">v, ok := mm[<span class="string">"fuge"</span>]       <span class="comment">// 要素の存在を確認</span></span><br><span class="line">fmt.Println(v, ok)        <span class="comment">// &#123;0 0&#125; false</span></span><br><span class="line">mm[<span class="string">"fuge"</span>] = vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// 要素の追加</span></span><br><span class="line">v, ok = mm[<span class="string">"fuge"</span>]</span><br><span class="line">fmt.Println(v, ok)        <span class="comment">// &#123;3 4&#125; true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="メソッド">メソッド</h2><p>Go には <strong>class</strong> は無いが、<strong>型に対してメソッドを定義</strong> できる。<br>構造体だけにメソッド定義できるのではなく、型に対して定義できることに注意。<br>Go ではメソッドを定義する型を <strong>レシーバ</strong> と呼び、 <strong>値レシーバ</strong> と <strong>ポインタレシーバ</strong> がある。<br>レシーバは <code>func</code> と関数名の間に定義する。</p><ul><li>値レシーバ<ul><li><code>(r Type)</code></li><li>メソッド呼び出しの度に <code>r</code> （値）が作成されるのでメモリ多用に注意</li><li>基本的にはポインタレシーバを使ってればいい。</li></ul></li><li>ポインタレシーバ<ul><li><code>(r *Type)</code></li><li>値レシーバと異なり、メソッド呼び出しの度に値は作成されない（ポインタなので）</li><li>ただし、 <code>nil</code> には注意（オブジェクト化されてなくても呼べちゃう）</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ポインタレシーバ</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span> <span class="title">hit</span><span class="params">()</span></span> &#123;</span><br><span class="line">u.score++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参照渡しでないと</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">hit2</span><span class="params">()</span></span> &#123;</span><br><span class="line">u.score++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u1 := &amp;user&#123;name: <span class="string">"pepese"</span>, score: <span class="number">100</span>&#125;</span><br><span class="line">fmt.Println(u1) <span class="comment">// &amp;&#123;pepese 100&#125;</span></span><br><span class="line"></span><br><span class="line">u1.hit()</span><br><span class="line">fmt.Println(u1.score) <span class="comment">// カウントアップされてる：101</span></span><br><span class="line"></span><br><span class="line">u1.hit2()</span><br><span class="line">fmt.Println(u1.score) <span class="comment">// カウントアップされてない：101 （102になると思った？）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hit2 はメソッド実行時に u1 のコピーが作成され、その値に対して処理が行われている。</span></span><br><span class="line"><span class="comment">なので、u1 のコピーに処理が行われているのであった、u1 に対しては処理は行われていない。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="インターフェース">インターフェース</h2><p><strong>インタフェース</strong> は、メソッドのシグニチャの集まりを定義する。<br>何も定義していないもの <code>interface{}</code> 型は <strong>空のインターフェース</strong> といい、任意の値を保持できる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v vertex)</span> <span class="title">add</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> v.x + v.y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *vertex)</span> <span class="title">sub</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> v.x - v.y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> adder <span class="keyword">interface</span> &#123;</span><br><span class="line">add() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> suber <span class="keyword">interface</span> &#123;</span><br><span class="line">sub() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a adder</span><br><span class="line">v1 := vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">a = v1</span><br><span class="line">fmt.Println(a.add()) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s suber</span><br><span class="line">v2 := &amp;vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">s = v2</span><br><span class="line">fmt.Println(s.sub()) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">s = v1 <span class="comment">// コンパイルエラーになる、sub() は vertex のメソッドではなく *vertex のメソッドなので、「s = &amp;v1」ならOK</span></span><br><span class="line">fmt.Println(s.sub())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">interface</span>&#123;&#125;              <span class="comment">// 空のインターフェース</span></span><br><span class="line">n = v1                         <span class="comment">// 空のインターフェースは任意の値を保持できる</span></span><br><span class="line">fmt.Printf(<span class="string">"(%v, %T)\n"</span>, n, n) <span class="comment">// (&#123;1 2&#125;, main.vertex)</span></span><br><span class="line">n = v2                         <span class="comment">// 空のインターフェースは任意の値を保持できる</span></span><br><span class="line">fmt.Printf(<span class="string">"(%v, %T)\n"</span>, n, n) <span class="comment">// (&amp;&#123;3 4&#125;, *main.vertex)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>標準ライブラリには <a href="https://go-tour-jp.appspot.com/methods/17" target="_blank" rel="noopener"><strong>Stringer</strong> インターフェース</a>があり、 <code>String()</code> メソッドが定義されている。<br>例えば、 <code>fmt</code> に <code>String()</code> メソッドを実装したオブジェクトを渡すと、その定義通りに標準出力してくれる。<br>他にも以下の様なものがある。</p><ul><li><a href="https://go-tour-jp.appspot.com/methods/19" target="_blank" rel="noopener">error インターフェース</a></li><li><a href="https://go-tour-jp.appspot.com/methods/21" target="_blank" rel="noopener">Reader インターフェース</a></li><li><a href="https://go-tour-jp.appspot.com/methods/24" target="_blank" rel="noopener">Image インターフェース</a></li></ul><h2 id="型アサーション">型アサーション</h2><p><code>インターフェース.(型)</code> で型を確認できる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line">s := i.(<span class="keyword">string</span>) <span class="comment">// string 型で空のインターフェースから値を取得する</span></span><br><span class="line">fmt.Println(s)  <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line">s, ok := i.(<span class="keyword">string</span>) <span class="comment">// 第2引数で string 型かどうかチェックできる</span></span><br><span class="line">fmt.Println(s, ok)  <span class="comment">// hello true</span></span><br><span class="line"></span><br><span class="line">f, ok := i.(<span class="keyword">float64</span>) <span class="comment">// 型が異なる場合は false</span></span><br><span class="line">fmt.Println(f, ok)   <span class="comment">// 0 false</span></span><br><span class="line"></span><br><span class="line">f = i.(<span class="keyword">float64</span>) <span class="comment">// 型が異なるのに第2引数が無いと panic する</span></span><br><span class="line">fmt.Println(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="型-switch">型 switch</h2><p><code>インターフェース.(type)</code> で型が取得でき、型に応じて switch できる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">fmt.Printf(<span class="string">"int: %v\n"</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">"string: %v\n"</span>, v)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">"unknown type: %T\n"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">do(<span class="number">21</span>)      <span class="comment">// int: 21</span></span><br><span class="line">do(<span class="string">"hello"</span>) <span class="comment">// string: hello</span></span><br><span class="line">do(<span class="literal">true</span>)    <span class="comment">// unknown type: bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="goroutine">goroutine</h2><p><strong>goroutine</strong> （ゴルーチン）は Go ランタイムが管理する軽量スレッド。<br>OS が管理するスレッドではなく、 Go ランタイムなのがポイント。<br>関数の前に <code>go</code> と記載すれば新しい goroutine 上でその関数が実行される。<br>main 関数自体も goroutine で実行されており、 <code>go</code> キーワードで実行する関数自体はメイン goroutine 上で評価される。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// goroutine 実行</span></span><br><span class="line"><span class="keyword">go</span> say(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数であれば実行できるので、即時関数でもよい</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;(<span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上記の goroutine が実行される前にメイン goroutine が終了するためスリープ</span></span><br><span class="line">time.Sleep(<span class="number">1</span>*time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="チャネル-channel">チャネル（ channel ）</h2><p>Go では <strong>チャネル</strong> （ <strong>channel</strong> ）を用いて goroutine 間のデータの送受信およびブロックを実現する。<br>チャネルは <code>make</code> で作成（ <code>c := make(chan int)</code> ）し、送受信するデータの型を指定する。<br>また、データの送信（ <code>c &lt;- 0</code> 入れる）・受信（ <code>&lt;-c</code> 取り出す）はアロー（？）で表現する。 <strong>キュー</strong> みたいなものだ。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// チャネルの作成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">c &lt;- <span class="string">"hello world"</span></span><br><span class="line">&#125;(c)</span><br><span class="line"></span><br><span class="line">fmt.Println(&lt;-c) <span class="comment">// チャネルに値が入って読みだせるまでメイン goroutine はブロックされる</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">int</span>, x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">c &lt;- x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">// チャネルの作成</span></span><br><span class="line"></span><br><span class="line">nums := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">go</span> add(c, nums[<span class="number">0</span>], nums[<span class="number">1</span>]) <span class="comment">// 足し算のお仕事を goroutine で分割</span></span><br><span class="line"><span class="keyword">go</span> add(c, nums[<span class="number">2</span>], nums[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">r1, r2 := &lt;-c, &lt;-c</span><br><span class="line">fmt.Println(r1, r2) <span class="comment">// 7 3</span></span><br><span class="line"><span class="comment">// 終わった方から先に入るので順番に保証は無い</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>チャネルには <strong>バッファ</strong> （チャネルに入るデータの数） を定義でき、 <strong>バッファがいっぱいのときはチャネルへの送信をブロック</strong> し、 <strong>バッファが空の時はチャネルの受信をブロック</strong> する。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>) <span class="comment">// バッファサイズ 2 のチャネル</span></span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">ch &lt;- <span class="number">2</span></span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>チャネルは閉じる（ <strong><code>close()</code></strong> ）ことができ、以下のように検知可能。</p><ul><li><code>v, ok := &lt;-ch</code><ul><li><code>ok</code> が <code>false</code> の場合チャネルが閉じている</li></ul></li><li><code>for i := range c</code><ul><li>チャネルが閉じられるまで値を繰り返し受信する</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">(n <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line">c &lt;- x</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(c) <span class="comment">// チャネルを閉じる</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">go</span> count(<span class="built_in">cap</span>(c), c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123; <span class="comment">// チャネルが閉じられるまでループ＆ブロック</span></span><br><span class="line">fmt.Print(i, <span class="string">" "</span>)</span><br><span class="line">&#125; <span class="comment">// 1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>select</code></strong> を使用することで複数のチャネルを評価できる。<br>複数ある <code>case</code> のいずれかが準備できるようになるまでブロックし、準備ができた <code>case</code> を実行する。<br>もし、複数の <code>case</code> の準備ができている場合、 <code>case</code> は <strong>ランダムに選択・実行</strong> される。<br>どの <code>case</code> も準備できていない場合は <code>default</code> が実行される。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123; <span class="comment">// どちらかの case が for 内で評価され続ける</span></span><br><span class="line"><span class="keyword">case</span> c &lt;- x:</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line">fmt.Println(<span class="string">"quit"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"wait"</span>)</span><br><span class="line">time.Sleep(<span class="number">1</span>*time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>), <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Print(&lt;-c, <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">quit &lt;- <span class="number">0</span></span><br><span class="line">&#125;()</span><br><span class="line">count(c, quit)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// wait</span></span><br><span class="line"><span class="comment">// wait</span></span><br><span class="line"><span class="comment">// 0 wait</span></span><br><span class="line"><span class="comment">// 1 wait</span></span><br><span class="line"><span class="comment">// 2 wait</span></span><br><span class="line"><span class="comment">// 3 wait</span></span><br><span class="line"><span class="comment">// 4 quit</span></span><br></pre></td></tr></table></figure><h2 id="sync.mutex">sync.Mutex</h2><p>チャネルは goroutine 間でデータの送受信とブロックを実現するものだが、データ送受信が不要な場合は <strong>sync.Mutex</strong> （排他制御・ミューテックス： mutual exclusion の略）を利用する。<br>所謂ロック機構（ <code>Lock</code> <code>Unlock</code> ）の機能を提供し、 <strong>クリティカルセッション</strong> （他の処理の介入抑止し、データの生合成を守る必要のある一連の一まとまりの処理）を保護する。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> counter <span class="keyword">struct</span> &#123;</span><br><span class="line">num <span class="keyword">int</span></span><br><span class="line">mux sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// クリティカルセッション</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *counter)</span> <span class="title">countup</span><span class="params">(roop <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">c.mux.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mux.Unlock() <span class="comment">// deferの利用、ほぼクリティカルセッションの構文</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;roop; i++ &#123;</span><br><span class="line">c.num++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(c.num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := counter&#123;num: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> c.countup(<span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記はロック機構によりきちんと 10 単位でカウントアップ・表示されている。</p><h1 id="参考">参考</h1><ul><li><a href="https://go-tour-jp.appspot.com/concurrency/11" target="_blank" rel="noopener">Where to Go from here…</a><ul><li>この先の学習のヒント</li></ul></li><li><a href="https://www.slideshare.net/takuyaueda967/2016-go" target="_blank" rel="noopener">Go入門</a><ul><li>slideshare</li></ul></li><li><a href="http://blog.amedama.jp/entry/2015/10/06/231038" target="_blank" rel="noopener">Mac OS X で Golang に入門してみる</a><ul><li>Go の文法ではなく、標準の構造がよくわかる</li></ul></li><li><a href="http://blog.nishimu.land/entry/2015/03/16/032222" target="_blank" rel="noopener">シュッと golang に入門する話</a><ul><li>文法がわかる</li></ul></li><li><a href="https://gist.github.com/hayajo/9559874" target="_blank" rel="noopener">Go言語入門</a></li><li><a href="http://cuto.unirita.co.jp/gostudy/" target="_blank" rel="noopener">はじめてのGo言語</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang の基本的なところをまとめる。&lt;br&gt;
さらっとまとめるつもりがどえらい量になったので注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;環境構築&lt;/li&gt;
&lt;li&gt;基本文法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://pepese.github.io/tags/golang/"/>
    
      <category term="go" scheme="https://pepese.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook入門</title>
    <link href="https://pepese.github.io/blog/jupyter-notebook-basics/"/>
    <id>https://pepese.github.io/blog/jupyter-notebook-basics/</id>
    <published>2018-02-19T23:42:35.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jupyter Notebook 、ついでに JupyterHub について軽くまとめる。</p><ul><li><a href="http://jupyter.org/" target="_blank" rel="noopener">公式</a></li><li><a href="http://jupyter.org/documentation" target="_blank" rel="noopener">公式ドキュメント</a></li></ul><a id="more"></a><h1 id="jupyter-notebook">Jupyter Notebook</h1><h2 id="インストール">インストール</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install jupyter</span><br></pre></td></tr></table></figure><h2 id="起動">起動</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="起動オプション">起動オプション</h3><table><thead><tr class="header"><th style="text-align: left;">オプション</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>--no-browser</code></td><td style="text-align: left;">自動でブラウザを起動しない</td></tr><tr class="even"><td style="text-align: left;"><code>--port xxxx</code></td><td style="text-align: left;">ポートの指定</td></tr><tr class="odd"><td style="text-align: left;"><code>--help</code></td><td style="text-align: left;">ヘルプ</td></tr></tbody></table><h2 id="ショートカットまとめ">ショートカットまとめ</h2><p>自分がよく使うショートカットのみまとめる。</p><h3 id="コマンドモード-esc-押したとき">コマンドモード（ <code>ESC</code> 押したとき）</h3><table><thead><tr class="header"><th style="text-align: left;">コマンド</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>Enter</code></td><td style="text-align: left;">編集モード</td></tr><tr class="even"><td style="text-align: left;"><code>H</code></td><td style="text-align: left;">ショートカット一覧</td></tr><tr class="odd"><td style="text-align: left;"><code>DD</code></td><td style="text-align: left;">セルの削除</td></tr><tr class="even"><td style="text-align: left;"><code>K</code></td><td style="text-align: left;">上のセルへ移動</td></tr><tr class="odd"><td style="text-align: left;"><code>J</code></td><td style="text-align: left;">下のセルへ移動</td></tr><tr class="even"><td style="text-align: left;"><code>A</code></td><td style="text-align: left;">セルを上に追加</td></tr><tr class="odd"><td style="text-align: left;"><code>B</code></td><td style="text-align: left;">セルを下に追加</td></tr><tr class="even"><td style="text-align: left;"><code>Y</code></td><td style="text-align: left;">コードモード</td></tr><tr class="odd"><td style="text-align: left;"><code>M</code></td><td style="text-align: left;">マークダウンモード</td></tr><tr class="even"><td style="text-align: left;"><code>1</code> 〜 <code>6</code></td><td style="text-align: left;">見出し１〜見出し６で書き出す</td></tr><tr class="odd"><td style="text-align: left;"><code>00</code></td><td style="text-align: left;">カーネルをリスタート</td></tr><tr class="even"><td style="text-align: left;"><code>S</code> or <code>Command + S</code></td><td style="text-align: left;">保存</td></tr></tbody></table><h3 id="編集モード-enter-押したとき">編集モード（ <code>Enter</code> 押したとき）</h3><table><thead><tr class="header"><th style="text-align: left;">コマンド</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>ESC</code> or <code>Ctrl + M</code></td><td style="text-align: left;">コマンドモード</td></tr><tr class="even"><td style="text-align: left;"><code>Ctrl + Enter</code></td><td style="text-align: left;">セルの実行</td></tr><tr class="odd"><td style="text-align: left;"><code>Command + S</code></td><td style="text-align: left;">保存</td></tr></tbody></table><h2 id="その他小技">その他小技</h2><table><thead><tr class="header"><th style="text-align: left;">コマンド</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">実行結果のセルをダブルクリック</td><td style="text-align: left;">実行結果の最小化（閉じる）</td></tr></tbody></table><h1 id="jupyterhub">JupyterHub</h1><p>JupyterHub を導入することで以下が可能になる。</p><ul><li>マルチユーザ</li><li>ユーザ管理・認証</li><li>高スペックサーバでリモートから利用</li><li>などなど</li></ul><p><img src="https://jupyterhub.readthedocs.io/en/stable/_images/jhub-parts.png"></p><h2 id="インストール-1">インストール</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pip install jupyterhub notebook</span><br><span class="line">$ npm install -g configurable-http-proxy</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">$ jupyterhub -h</span><br><span class="line">$ configurable-http-proxy -h</span><br></pre></td></tr></table></figure><p>なお、 Docker 版も提供されている。</p><h2 id="起動-1">起動</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jupyterhub</span><br></pre></td></tr></table></figure><p><code>https://localhost:8000</code> で起動する。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jupyter Notebook 、ついでに JupyterHub について軽くまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jupyter.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jupyter.org/documentation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Jupyter" scheme="https://pepese.github.io/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>形態素解析システムMeCab入門</title>
    <link href="https://pepese.github.io/blog/mecab-basics/"/>
    <id>https://pepese.github.io/blog/mecab-basics/</id>
    <published>2018-02-04T04:04:44.000Z</published>
    <updated>2019-02-04T04:09:47.992Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://taku910.github.io/mecab/" target="_blank" rel="noopener">公式</a></p><ul><li>環境構築</li><li>使い方</li><li>Node.js から Mecabを使う</li><li>Python3 から MeCab を使う</li></ul><a id="more"></a><h1 id="環境構築">環境構築</h1><h2 id="インストール">インストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mecab</span><br><span class="line">$ mecab --version</span><br><span class="line">mecab of 0.996</span><br></pre></td></tr></table></figure><h2 id="辞書の追加">辞書の追加</h2><p>このままでは辞書がないので追加する。<br>辞書の場所は <code>/usr/local/lib/mecab/dic/</code> 配下。</p><h3 id="mecab-ipadic-neologd-のインストール">mecab-ipadic-neologd のインストール</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git</span><br><span class="line">$ <span class="built_in">cd</span> mecab-ipadic-neologd/</span><br><span class="line">$ ./bin/install-mecab-ipadic-neologd -n -p /usr/<span class="built_in">local</span>/lib/mecab/dic/neologd</span><br></pre></td></tr></table></figure><p>最後に本当にインストールするか聞かれるから <code>yes</code> or <code>no</code> をタイプする。<br>なお、筆者の環境では足りなかった以下のコマンドを追加した。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install xz</span><br></pre></td></tr></table></figure><h3 id="デフォルトの辞書を変更する">デフォルトの辞書を変更する</h3><p><code>mecab -d /usr/local/lib/mecab/dic/neologd/</code> でも辞書を指定して実行できるが、めんどくさいのでデフォルトを変更する。<br><code>/usr/local/etc/mecabrc</code> の以下を変更する。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dicdir =  /usr/local/lib/mecab/dic/ipadic</span><br><span class="line"># 以下のように変更</span><br><span class="line">dicdir =  /usr/local/lib/mecab/dic/neologd</span><br></pre></td></tr></table></figure><h1 id="使い方">使い方</h1><p>インタラクティブモードは以下。（そのままコマンドを打つ）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mecab</span><br><span class="line">おはよう</span><br><span class="line">おはよう感動詞,*,*,*,*,*,おはよう,オハヨウ,オハヨー</span><br><span class="line">EOS</span><br></pre></td></tr></table></figure><p>第一引数にファイルを指定することもでき、 <code>-o</code> オプションで出力も可能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mecab [入力ファイル] -o [出力ファイル]</span><br></pre></td></tr></table></figure><h2 id="形態素の見方">形態素の見方</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表層形\t品詞,品詞細分類1,品詞細分類2,品詞細分類3,活用型,活用形,原形,読み,発音</span><br></pre></td></tr></table></figure><p>「表層形」は文章からそのまま抜き出した形。<br>なお MeCab の品詞体系は <a href="http://www.unixuser.org/~euske/doc/postag/#chasen" target="_blank" rel="noopener">IPA品詞体系</a>というものが使われている。（茶筅と同じ）</p><h2 id="未知語推定">未知語推定</h2><p>MeCabには未知語を推定する機能があり、デフォルトでは有効。<br>未知語を抽出したい場合は <code>-x</code> （ <code>--unk-feature</code> ）で未知語の表示形式を指定して実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mecab -x <span class="string">"undef"</span></span><br><span class="line">にゃほにゃほたまくろー</span><br><span class="line">に      助詞,格助詞,一般,*,*,*,に,ニ,ニ</span><br><span class="line">ゃほにゃほたまくろ      undef</span><br><span class="line">ー      undef</span><br><span class="line">EOS</span><br></pre></td></tr></table></figure><h2 id="ユーザ辞書の追加">ユーザ辞書の追加</h2><p>自分で単語を登録したいときの方法。<br>csv ファイルに 1 行 1 単語で以下の形式で作成する。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表層形,左文脈ID,右文脈ID,コスト,品詞,品詞細分類1,品詞細分類2,品詞細分類3,活用形,活用型,原形,読み,発音</span><br></pre></td></tr></table></figure><p>例えば以下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">にゃほにゃほたまくろー,1223,1223,6058,名詞,固有名詞,人名,名,*,*,ニャホニャホタマクロー,ニャホニャホタマクロー,ニャホニャホタマクロー</span><br></pre></td></tr></table></figure><ul><li>左文脈ID<ul><li>その単語を左から見たときの内部状態ID</li><li><code>/usr/local/lib/mecab/dic/neologd/left-id.def</code> から該当する ID を選択</li><li>空にしておくと mecab-dict-index が自動的に ID を付与する</li></ul></li><li>右文脈ID<ul><li>その単語を右から見たときの内部状態ID</li><li><code>/usr/local/lib/mecab/dic/neologd/right-id.def</code> から該当する ID を選択</li><li>空にしておくと, mecab-dict-index が自動的に ID を付与する</li></ul></li><li>コスト<ul><li>その単語がどれだけ出現しやすいかを示す</li><li>小さいほど, 出現しやすいという意味</li><li>似たような単語と 同じスコアを割り振り, その単位で切り出せない場合は, 徐々に小さくしていけばいい</li></ul></li></ul><p>以下のコマンドを実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/Cellar/mecab/0.996/libexec/mecab/mecab-dict-index -d /usr/<span class="built_in">local</span>/lib/mecab/dic/neologd -u user-dic.dic -f utf8 -t utf8 user-dic.csv</span><br></pre></td></tr></table></figure><ul><li>-d DIR<ul><li>システム辞書があるディレクトリ</li></ul></li><li>-u FILE<ul><li>FILE というユーザファイルを作成</li></ul></li><li>-f charset<ul><li>CSVの文字コード</li></ul></li><li>-t charset<ul><li>バイナリ辞書の文字コード</li></ul></li></ul><p><code>/usr/local/lib/mecab/dic/user-dic/</code> ディレクトリを作成し、上記のコマンドで作成した <code>user-dic.dic</code> を配置。<br><code>/usr/local/etc/mecabrc</code> に以下を追記。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdic = /usr/local/lib/mecab/dic/user-dic/user-dic.dic</span><br></pre></td></tr></table></figure><p><a href="https://taku910.github.io/mecab/dic.html" target="_blank" rel="noopener">参考</a></p><h2 id="分かち書き">分かち書き</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mecab -Owakati input.txt &gt; output_wakati.txt</span><br></pre></td></tr></table></figure><h1 id="node.js-から-mecabを使う">Node.js から Mecabを使う</h1><p>上記の手順で MeCab をセットアップしていることが前提。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add mecab-async</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> MeCab = <span class="keyword">new</span> <span class="built_in">require</span>(<span class="string">'mecab-async'</span>);</span><br><span class="line"><span class="keyword">let</span> mecab = <span class="keyword">new</span> MeCab();</span><br><span class="line"><span class="keyword">let</span> input = process.argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">mecab.parse(input,(err,result)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js <span class="string">"にゃほにゃほたまくろー"</span></span><br><span class="line">[ [ <span class="string">'にゃほにゃほたまくろー'</span>,</span><br><span class="line">    <span class="string">'名詞'</span>,</span><br><span class="line">    <span class="string">'固有名詞'</span>,</span><br><span class="line">    <span class="string">'人名'</span>,</span><br><span class="line">    <span class="string">'名'</span>,</span><br><span class="line">    <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'ニャホニャホタマクロー'</span>,</span><br><span class="line">    <span class="string">'ニャホニャホタマクロー'</span>,</span><br><span class="line">    <span class="string">'ニャホニャホタマクロー'</span> ] ]</span><br></pre></td></tr></table></figure><h1 id="python3-から-mecab-を使う">Python3 から MeCab を使う</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install mecab-python3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MeCab</span><br><span class="line">mc = MeCab.Tagger(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">print</span> (mc.parse(<span class="string">"形態素解析システムMeCab入門"</span>))</span><br></pre></td></tr></table></figure><p><code>MeCab.Tagger</code> の引数に <code>mecab</code> コマンドの引数を指定することができる。<br>また、 parse の結果は文字列になっている。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://taku910.github.io/mecab/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;環境構築&lt;/li&gt;
&lt;li&gt;使い方&lt;/li&gt;
&lt;li&gt;Node.js から Mecabを使う&lt;/li&gt;
&lt;li&gt;Python3 から MeCab を使う&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="MeCab" scheme="https://pepese.github.io/tags/MeCab/"/>
    
  </entry>
  
  <entry>
    <title>word2vec入門</title>
    <link href="https://pepese.github.io/blog/word2vec-basics/"/>
    <id>https://pepese.github.io/blog/word2vec-basics/</id>
    <published>2018-02-04T04:01:38.000Z</published>
    <updated>2019-02-04T04:11:00.144Z</updated>
    
    <content type="html"><![CDATA[<p>Mecab については以下を参考。</p><ul><li><a href="https://pepese.github.io/blog/mecab-basics/">形態素解析システムMeCab入門</a></li></ul><a id="more"></a><h1 id="コマンドで-word2vec">コマンドで word2vec</h1><h2 id="導入">導入</h2><p>Macでの導入方法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/svn2github/word2vec.git</span><br><span class="line">$ <span class="built_in">cd</span> word2vec/</span><br><span class="line">$ make</span><br><span class="line">gcc word2vec.c -o word2vec -lm -pthread -O3 -march=native -Wall -funroll-loops -Wno-unused-result</span><br><span class="line">gcc word2phrase.c -o word2phrase -lm -pthread -O3 -march=native -Wall -funroll-loops -Wno-unused-result</span><br><span class="line">gcc distance.c -o distance -lm -pthread -O3 -march=native -Wall -funroll-loops -Wno-unused-result</span><br><span class="line">distance.c:18:10: fatal error: <span class="string">'malloc.h'</span> file not found</span><br><span class="line"><span class="comment">#include &lt;malloc.h&gt;</span></span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [distance] Error 1</span><br></pre></td></tr></table></figure><p>Mac では上記の通りエラーが発生する。<br>Mac では <code>&lt;malloc.h&gt;</code> ではなく <code>&lt;stdlib.h&gt;</code> を使用するので以下を実行してから make する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -ie <span class="string">'s/#include &lt;malloc.h&gt;/#include &lt;stdlib.h&gt;/g'</span> *.c</span><br></pre></td></tr></table></figure><p>なお、コンパイルして作成した <code>word2vec</code> などのコマンドは <code>make</code> を実行したカレントに作成されており、パスは通っていない。</p><h2 id="実行">実行</h2><p>動作確認用の <code>./demo-word.sh</code> を実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ brew install wget</span><br><span class="line">$ brew install gzip</span><br><span class="line">$ ./demo-word.sh</span><br><span class="line">$ ./distance vectors.bin</span><br><span class="line">Enter word or sentence (EXIT to <span class="built_in">break</span>): dog</span><br><span class="line"></span><br><span class="line">Word: dog  Position <span class="keyword">in</span> vocabulary: 1902</span><br><span class="line"></span><br><span class="line">                                              Word       Cosine distance</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">                                              dogs0.637071</span><br><span class="line">                                           spaniel0.604613</span><br><span class="line">                                            borzoi0.582073</span><br><span class="line">                                             hound0.579149</span><br><span class="line">                                           mastiff0.573205</span><br><span class="line">                                           terrier0.563618</span><br><span class="line">                                              hund0.552174</span><br><span class="line">                                               ...</span><br><span class="line">Enter word or sentence (EXIT to <span class="built_in">break</span>):</span><br></pre></td></tr></table></figure><p>上記が成功したら英語コーパス（text8）による学習は完了しているので、次回以降は <code>./distance vectors.bin</code> で実行できる。<br>また <code>word2vec</code> コマンドの学習インプットとなるテキストは <strong>分かち書き</strong> である必要がある。<br>上記のデモは英語をコーパスとして使用しているため、もともと分かち書きである。<br>日本語コーパスをインプットとする場合は分かち書きした状態にする必要がある。</p><h2 id="word2vec-の機能">word2vec の機能</h2><ul><li>distance<ul><li>入力した単語の類義語や同義語を返す</li></ul></li><li>analogy<ul><li>単語の足し算、引き算ができる</li></ul></li></ul><h2 id="日本語学習済みモデル">日本語学習済みモデル</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www.cl.ecei.tohoku.ac.jp/~m-suzuki/jawiki_vector/data/20170201.tar.bz2</span><br><span class="line">$ tar xf 20170201.tar.bz2</span><br><span class="line">$ ./distance 20170201</span><br></pre></td></tr></table></figure><h2 id="日本語のコーパス">日本語のコーパス</h2><p>青空文庫</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ brew install nkf</span><br><span class="line">$ wget http://www.aozora.gr.jp/cards/001847/files/57347_ruby_57225.zip</span><br><span class="line">$ unzip 57347_ruby_57225.zip</span><br><span class="line">$ nkf -g rojinto_umi.txt</span><br><span class="line">Shift_JIS</span><br><span class="line">$ nkf -w --overwrite rojinto_umi.txt</span><br><span class="line">$ nkf -g rojinto_umi.txt</span><br><span class="line">UTF-8</span><br><span class="line">$ cat rojinto_umi.txt | mecab -Owakati &gt; rojinto_umi_wakati.txt</span><br><span class="line">$ time ./word2vec -train rojinto_umi_wakati.txt -output rojinto_umi_wakati.model -size 200 -window 5 -sample 1e-3 -negative 5 -hs 0 -binary 1</span><br><span class="line">$ ./distance rojinto_umi_wakati.model</span><br><span class="line">Enter word or sentence (EXIT to <span class="built_in">break</span>): 老人</span><br><span class="line"></span><br><span class="line">Word: 老人  Position <span class="keyword">in</span> vocabulary: 22</span><br><span class="line"></span><br><span class="line">                                              Word       Cosine distance</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">                                               　0.913845</span><br><span class="line">                                         分かっ0.904279</span><br><span class="line">                                         無かっ0.865596</span><br></pre></td></tr></table></figure><p><a href="http://www.cl.ecei.tohoku.ac.jp/~m-suzuki/jawiki_vector/" target="_blank" rel="noopener">参考</a></p><h2 id="コーパスの収集して学習実行する">コーパスの収集して学習・実行する</h2><p>コーパスとして Wikipedia のデータを使用する。<br>word2vec へのインプットとして上記のコーパスが分かち書きされた 1つのテキストデータを作成する必要がある。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nohup wget https://dumps.wikimedia.org/jawiki/latest/jawiki-latest-pages-articles.xml.bz2 &amp;</span><br><span class="line">$ less nohup.out</span><br><span class="line">Redirecting output to ‘wget-log’.</span><br><span class="line">$ tail -f wget-log</span><br></pre></td></tr></table></figure><p>上記で取得したデータは XMLファイルなので、テキストファイルに整形する必要がある。<br><code>wp2txt</code> という Ruby 系のツールを使用する。<br>インストールは以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install wp2txt</span><br></pre></td></tr></table></figure><p>実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir jawiki-latest-pages-articles</span><br><span class="line">$ <span class="built_in">cd</span> jawiki-latest-pages-articles</span><br><span class="line">$ wp2txt --input-file ../jawiki-latest-pages-articles.xml.bz2</span><br></pre></td></tr></table></figure><p>出力されたファイルを結合して分かち書きファイルを作成する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ cat jawiki-latest-pages-articles/*.txt | mecab -Owakati &gt; jawiki-latest-pages-articles-wakati-ipadic.txt</span><br></pre></td></tr></table></figure><p>コーパスを使って学習する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ time ./word2vec -train jawiki-latest-pages-articles-wakati-ipadic.txt -output jawiki-latest-pages-articles-wakati-ipadic.bin -size 200 -window 5 -sample 1e-3 -negative 5 -hs 0 -binary 1</span><br></pre></td></tr></table></figure><p>オプションは以下。（ <code>$ ./word2vec</code> コマンドで表示される）</p><ul><li>-train<ul><li>学習に使用するファイル。分かち書きが必要。</li></ul></li><li>-output<ul><li>学習結果を出力するファイル名</li></ul></li><li>-size<ul><li>ベクトルの次元数</li></ul></li><li>-window<ul><li>指定した数値の分だけ、単語の前後にある単語を文脈として判断させる</li></ul></li><li>-sample<ul><li>単語を無視する頻度の閾値。1e-3は「頻出度が高め」 の意味。</li><li>あまりに高い頻度で出現する単語は意味のない単語である可能性が高いので、無視する。</li></ul></li><li>-hs<ul><li>学習に階層化ソフトマックスを使用するかどうか</li></ul></li><li>-negative<ul><li>ネガティブサンプリングに用いる単語数、ランダムに間違った解答として判断させる</li></ul></li><li>-threads<ul><li>学習に使用するスレッド数</li></ul></li><li>-iter<ul><li>トレーニング反復回数</li></ul></li><li>-min-count<ul><li>n回未満登場する単語を破棄</li></ul></li><li>-alpha<ul><li>学習率</li><li>高いほど収束が速いですが、高すぎると発散します。低いほど精度が高いですが、収束が遅くなります。</li></ul></li><li>-classes<ul><li>ベクトルよりもワードクラスを優先させる</li></ul></li><li>-debug<ul><li>デバッグモード</li></ul></li><li>-binary<ul><li>バイナリ形式で出力するかどうか</li><li><code>-binary 0</code> で出力ファイルを見ると各単語のベクトルが見れる</li></ul></li><li>-save-vocab<ul><li>語彙をファイル保存</li></ul></li><li>-read-vocab<ul><li>語彙をファイルから使用</li></ul></li><li>-cbow<ul><li>学習モデル CBOW を使うか、Skip-gram を使うか</li></ul></li></ul><p>以下で学習データを使って実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./distance jawiki-latest-pages-articles-wakati-ipadic.bin</span><br><span class="line">Enter word or sentence (EXIT to <span class="built_in">break</span>):</span><br></pre></td></tr></table></figure><h1 id="pythonで-word2vec">Pythonで word2vec</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install gensim</span><br></pre></td></tr></table></figure><p>学習の実装は以下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s : %(levelname)s : %(message)s'</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">sentences = word2vec.Text8Corpus(<span class="string">'jawiki_wakati.txt'</span>)</span><br><span class="line"></span><br><span class="line">model = word2vec.Word2Vec(sentences, size=<span class="number">200</span>, min_count=<span class="number">20</span>, window=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">model.save(<span class="string">"jawiki_wakati.model"</span>)</span><br></pre></td></tr></table></figure><p>2単語の類似度を出力する実装は以下。<br>（どうやら Cos 類似度の模様）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s : %(levelname)s : %(message)s'</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">model = word2vec.Word2Vec.load(<span class="string">"jawiki_wakati.model"</span>)</span><br><span class="line">argvs = sys.argv</span><br><span class="line"><span class="keyword">print</span> model.similarity(argvs[<span class="number">1</span>], argvs[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python similarity.py 日本 フィリピン</span><br></pre></td></tr></table></figure><p>単語のベクトルを出力する実装は以下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s : %(levelname)s : %(message)s'</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">model = word2vec.Word2Vec.load(<span class="string">"jawiki_wakati.model"</span>)</span><br><span class="line">argvs = sys.argv</span><br><span class="line"><span class="keyword">print</span> model[argvs[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mecab については以下を参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/mecab-basics/&quot;&gt;形態素解析システムMeCab入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="gensim" scheme="https://pepese.github.io/tags/gensim/"/>
    
      <category term="word2vec" scheme="https://pepese.github.io/tags/word2vec/"/>
    
  </entry>
  
  <entry>
    <title>Pythonでデータ分析入門</title>
    <link href="https://pepese.github.io/blog/python-data-analytics-basics/"/>
    <id>https://pepese.github.io/blog/python-data-analytics-basics/</id>
    <published>2018-02-04T03:53:16.000Z</published>
    <updated>2019-02-04T04:13:46.761Z</updated>
    
    <content type="html"><![CDATA[<p>Python でのデータ分析環境・アプローチについて自分向けにまとめる。</p><a id="more"></a><h1 id="はじめに">はじめに</h1><p>ローカルマシンでアドホックに分析を行う場合、 Python/Pandas を基本で考える。<br>しかし、Pandas はデータを全てメモリに展開して処理するため、メモリに乗り切らない規模のデータを扱う場合は他の仕組みが必要になる。<br>以下、自分なりのデータサイズでのアプローチの違い。</p><ul><li>小規模データ（ローカルマシンのメモリにデータが乗る）<ul><li>Python、Pandas、Jupyter で処理</li></ul></li><li>中規模データ（ローカルマシンのメモリにデータが乗らない）<ul><li>サーバやローカルマシンにデータベース（ RDB ）を構築して分析する</li><li>RDB にクエリを発行して小規模データにしてから Python で処理する</li></ul></li><li>大規模データ（数十 GB 以上のデータ）<ul><li>Hadoop、Apache Impala など、ガッツリした環境を構築する</li><li>クエリを発行して中規模データ、小規模データに変換してからアドホックな分析を行う</li></ul></li></ul><p>ここではローカルマシン上で実施する以下分析環境について記載する。</p><ul><li>小規模データ分析<ul><li>Python、Pandas、Jupyter を用いた分析</li></ul></li><li>中規模データ分析<ul><li>SQLite を用いた分析</li></ul></li></ul><h1 id="小規模データ分析">小規模データ分析</h1><p>ローカルマシンのメモリが小さく、別途メモリサイズの大きいサーバを用意して Jupyter Notebook を起動して外部からアクセスしたい場合は以下。</p><p>Jupyter Notebook で外部から接続を許可する方法について。<br>サーバにて以下のコマンドで Jupyter Notebook を起動する。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter notebook --ip=* --no-browser</span><br></pre></td></tr></table></figure><p>表示されたパス（例えば以下）の localhost 部分をサーバの IP に書き換えてブラウザからアクセスする。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/?token=5a497cc7665e9fa60f20097e166c13c904958e0fe2e08cbb</span><br></pre></td></tr></table></figure><p>基本操作参考：<br>https://qiita.com/tanemaki/items/2ed05e258ef4c9e6caac</p><ul><li>Jupyter Notebook の拡張<ul><li><a href="https://qiita.com/sasaki77/items/30a19d2be7d94116b237" target="_blank" rel="noopener">extensionを追加してもっと快適なJupyter環境を構築する</a></li><li><a href="http://cartman0.hatenablog.com/entry/2016/03/28/170319" target="_blank" rel="noopener">Jupyter Notebookの拡張機能を使ってみる</a></li><li><a href="http://www.monthly-hack.com/entry/2016/07/15/152726" target="_blank" rel="noopener">Jupyter Notebookの次世代版「JupyterLab」を紹介する</a></li></ul></li></ul><p>Pandas を用いたデータ分析を行う際のメモ。<br>以下について記載する。</p><ul><li>ライブラリのロード</li><li>ライブラリの設定</li><li>データのロード</li></ul><h2 id="ライブラリのロード">ライブラリのロード</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h2 id="ライブラリの設定">ライブラリの設定</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dir(pd.options)</span><br><span class="line"><span class="comment">#dir(pd.options.display)</span></span><br></pre></td></tr></table></figure><h2 id="データのロード">データのロード</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># データのロード</span></span><br><span class="line">df = pd.read_csv(<span class="string">"train.csv"</span>)</span><br></pre></td></tr></table></figure><p>RDBMS の機能を使用して、データをダンプした場合はデータ末に以下のような文字列が含まれる場合があるから注意が必要。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(1855 行処理されました)</span><br></pre></td></tr></table></figure><p>また、一行目のカラム定義がじゃまな場合もある。<br>その際は、 <code>head -n n FILE &gt; newFILE</code> や <code>tail -n n FILE &gt; newFILE</code> コマンドなどで必要なデータ部分のみを切り出したファイルを作成する。</p><h2 id="データの確認">データの確認</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df.describe()</span><br><span class="line">df.info()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 欠損の確認</span></span><br><span class="line">print(len(df.index) - df[<span class="string">"PassengerId"</span>].count())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ユニークな値の数</span></span><br><span class="line">print(df[<span class="string">"PassengerId"</span>].value_counts().count())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 変数間の相関</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>)) <span class="comment">#heatmap size</span></span><br><span class="line">sns.heatmap(df.corr(), annot=<span class="keyword">True</span>, cmap=<span class="string">'plasma'</span>, linewidths=<span class="number">.5</span>) <span class="comment"># annot:値を表示するかどうか linewidths: しきり線</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ある範囲のデータを取得</span></span><br><span class="line">print(len(df.loc[df[<span class="string">"Age"</span>] &lt;= <span class="number">10</span> ].index))</span><br><span class="line">print(len(df.loc[(df[<span class="string">"Age"</span>] &gt; <span class="number">10</span>) &amp; (df[<span class="string">"Age"</span>] &lt;= <span class="number">20</span>)].index))</span><br></pre></td></tr></table></figure><h2 id="前処理">前処理</h2><h3 id="データの整形">データの整形</h3><p>Pandas の文字列メソッドで置換や空白削除などの処理を行うことができる。<br>Pandas では、 <code>pandas.DataFrame</code> の列（つまり、 <code>pandas.Series</code> ）に対して一括で処理を行うために、 <code>pandas.Series</code> に文字列メソッドが準備されている。</p><ul><li>置換<ul><li>str.replace()</li></ul></li><li>空白削除<ul><li>str.strip()</li><li>str.lstrip()</li><li>str.rstrip()</li></ul></li><li>大文字小文字変換<ul><li>str.lower()</li><li>str.upper()</li><li>str.capitalize()</li><li>str.title()</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全ての列を文字列として読み込み、空白を削除する処理</span></span><br><span class="line">df = pd.read_csv(<span class="string">"data.csv"</span>, dtype = <span class="string">"object"</span>)</span><br><span class="line"><span class="keyword">for</span> _col <span class="keyword">in</span> range(len(df.colomns)):</span><br><span class="line">  df.iloc[:, _col] = df.iloc[:, _col].str.strip()</span><br></pre></td></tr></table></figure><h3 id="ダミー変数の作成">ダミー変数の作成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.get_dummies(df[<span class="string">"Sex"</span>], prefix = <span class="string">"Sex"</span>, drop_first = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h1 id="中規模データ分析">中規模データ分析</h1><p>ローカルマシンに RDB を構築して分析する。</p><h2 id="データ型">データ型</h2><p>テーブル定義が存在しない場合、データ（CSVやTSV形式を前提）を分析して、テーブル定義を作成する。<br>RDB でデータ型を判定する場合、ざっくり以下がわかればいい。</p><ul><li>データ型<ul><li>数値<ul><li>整数/int 4 バイト符号付き整数</li><li>整数/smallint 2 バイト符号付き整数</li><li>整数/tinyint 1 バイト符号無し整数</li><li>浮動小数点/float 8 バイト浮動小数点</li><li>金額/money 8 バイト</li></ul></li><li>文字列<ul><li>固定長/char(n) 255バイトまでの固定長の文字列</li><li>可変長/varchar(n) 255バイトまでの可変長の文字列</li><li>text 2K 以上の文字列</li></ul></li><li>日付<ul><li>date<ul><li>フォーマット : ‘YYYY-MM-DD’</li><li>範囲 : ‘1000-01-01’ から ‘9999-12-31’</li></ul></li><li>datetime<ul><li>フォーマット : ‘YYYY-MM-DD HH:MM:SS’</li><li>範囲 : ‘1000-01-01 00:00:00’ から ‘9999-12-31 23:59:59’</li></ul></li><li>timestamp<ul><li>フォーマット : ‘YYYY-MM-DD HH:MM:SS’</li><li>範囲 : ‘1970-01-01 00:00:01’ から ‘2037-12-31 23:59:59’</li></ul></li><li>time<ul><li>フォーマット : ‘HH:MM:SS’</li><li>範囲 : ‘-838:59:59’ から ‘838:59:59’</li></ul></li></ul></li></ul></li><li>その他<ul><li>NULL 許容<ul><li>null</li><li>not null</li></ul></li></ul></li></ul><p>ここでは、 int 、 float 、 char(n) 、 varchar(n) 、 (not) null を判定する。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_float</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    str が float か否か判定</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        float(str)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span>(float(str) == int(str))</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_type</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    str の型を判定</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> is_float(str):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"float"</span></span><br><span class="line">    <span class="keyword">elif</span> str.isdigit():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"int"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"str"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice_type</span><span class="params">(type_list)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    type_list から正しい型を選択</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> len(type_list) == <span class="number">1</span>: <span class="comment"># 型が 1 つ含まれる場合</span></span><br><span class="line">        <span class="keyword">return</span> type_list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">"str"</span> <span class="keyword">in</span> type_list: <span class="comment"># 型が複数含まれ、 1 つでも str がある場合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"str"</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">"int"</span> <span class="keyword">in</span> type_list: <span class="comment"># str を含まない型が複数あり、 1 つでも int がある場合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"int"</span></span><br><span class="line">    <span class="keyword">else</span>:                             <span class="comment"># str も int も含まれない場合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"float"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_db_type</span><span class="params">(_type, len_list)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    RDB テーブルのデータ型を判定</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span>(_type == <span class="string">"str"</span>): <span class="comment"># 型が str の場合、 char か varchar か判定</span></span><br><span class="line">        <span class="keyword">if</span> len(len_list) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"char(&#123;&#125;)"</span>.format(len_list[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            len_list.sort()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"varchar(&#123;&#125;)"</span>.format(str(len_list[<span class="number">-1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> _type</span><br><span class="line"></span><br><span class="line"><span class="comment"># RDB テーブルのデータ型を判定</span></span><br><span class="line">df= pd.read_csv(<span class="string">"KKKOKUAKU.tsv"</span>, sep=<span class="string">"\t"</span>, dtype=<span class="string">"object"</span>)</span><br><span class="line"><span class="keyword">for</span> _col <span class="keyword">in</span> range(len(df.columns)):</span><br><span class="line">    type_list = []</span><br><span class="line">    len_list = []</span><br><span class="line">    contains_null = <span class="keyword">False</span> <span class="comment"># NaN を含むか</span></span><br><span class="line">    <span class="keyword">for</span> _index <span class="keyword">in</span> range(len(df.index)):</span><br><span class="line">        value = str(df.iat[_index, _col])</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: <span class="comment"># None 、空でない場合</span></span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="string">""</span>:</span><br><span class="line">                _type = determine_type(value) <span class="comment"># 値の型を判定</span></span><br><span class="line">                _len = len(value)                           <span class="comment"># 値の長さを取得</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> (_type <span class="keyword">in</span> type_list):</span><br><span class="line">                    type_list.append(_type)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span>(_len <span class="keyword">in</span> len_list):</span><br><span class="line">                    len_list.append(_len)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            contains_null = <span class="keyword">True</span></span><br><span class="line">    _type = choice_type(type_list) <span class="comment"># 値の型からカラムの型を判定</span></span><br><span class="line">    _type = determine_db_type(_type, len_list) <span class="comment"># 値の長さから型の長さを判定しつつ、カラムの型判定</span></span><br><span class="line">    print(<span class="string">"&#123;&#125; &#123;&#125; &#123;&#125; ,"</span>.format(df.columns[_col], _type, str(<span class="string">"null"</span> <span class="keyword">if</span> contains_null <span class="keyword">else</span> <span class="string">"not null"</span>)))</span><br></pre></td></tr></table></figure><h2 id="sqlite">SQLite</h2><p>ここでは SQLite を利用する。</p><ul><li><a href="https://sqlite.org/index.html" target="_blank" rel="noopener">SQLite3</a></li><li><a href="http://sqlitebrowser.org/" target="_blank" rel="noopener">DB Browser for SQLite</a><ul><li>SQLite の Viewer</li></ul></li></ul><p>インストール（ Mac ）は以下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew install sqlite</span><br><span class="line">$ sqlite3 --version</span><br><span class="line">3.19.3 2017-06-27 16:48:08 2b0954060fe10d6de6d479287dd88890f1bef6cc1beca11bc6cdb79f72e2377b</span><br><span class="line">$ brew cask install db-browser-for-sqlite</span><br></pre></td></tr></table></figure><p><code>/Applications/DB Browser for SQLite.app</code> が作成される。<br>まずは <code>sqlite3</code> コマンドでデータベース・テーブルを作成してデータをインポート。（ここからは Mac 以外も同様）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3 test.db</span><br><span class="line">sqlite&gt; .show</span><br><span class="line">(省略)</span><br><span class="line">colseparator: &quot;|&quot; # 確認</span><br><span class="line">(省略)</span><br><span class="line">    filename: test.db</span><br><span class="line">sqlite&gt; .separator \t # セパレータの変更</span><br><span class="line">sqlite&gt; .show</span><br><span class="line">(省略)</span><br><span class="line">colseparator: &quot;\t&quot; # 確認</span><br><span class="line">(省略)</span><br><span class="line">sqlite&gt; .read create_table.sql # テーブル作成クエリ発行</span><br><span class="line">sqlite&gt; .import insert_data.tsv TABLE # データインポート</span><br></pre></td></tr></table></figure><p>SQL ファイルの実行は以下でも可能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3 test.db &lt; create_table.sql</span><br></pre></td></tr></table></figure><p>なお、理想的にはテーブル定義を行なった後にインデックスを作成 <code>create index</code> して、データをインポートする。</p><p>クエリの出力結果をファイル出力する場合は以下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; .show</span><br><span class="line">(省略)</span><br><span class="line">      output: stdout</span><br><span class="line">(省略)</span><br><span class="line">sqlite&gt; .output /sqlite/data/output.txt # 出力先を標準出力からファイルへ変更</span><br></pre></td></tr></table></figure><p><code>output</code> をファイルへ変更したら <code>.show</code> の結果もファイルに出力されることに注意。<br>select 出力のフォーマットも <code>colseparator</code> の設定が適用される。</p><p>データの閲覧に <code>DB Browser for SQLite</code> を利用する。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python でのデータ分析環境・アプローチについて自分向けにまとめる。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Pandas" scheme="https://pepese.github.io/tags/Pandas/"/>
    
      <category term="SQL" scheme="https://pepese.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Pandas入門 DataFrame編</title>
    <link href="https://pepese.github.io/blog/pandas-basics-dataframe/"/>
    <id>https://pepese.github.io/blog/pandas-basics-dataframe/</id>
    <published>2018-02-04T03:50:02.000Z</published>
    <updated>2019-02-04T03:50:53.116Z</updated>
    
    <content type="html"><![CDATA[<p>Python ライブラリである Pandas の DataFrame についてまとめる。</p><p>- <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html" target="_blank" rel="noopener">公式ドキュメント</a></p><a id="more"></a><h1 id="基本操作">基本操作</h1><h2 id="dataframe-の作成">DataFrame の作成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="string">"Taro"</span>, <span class="number">10</span>], [<span class="string">"Jiro"</span>, <span class="number">20</span>], [<span class="string">"Goro"</span>, <span class="keyword">None</span>]], columns=[<span class="string">"name"</span>, <span class="string">"age"</span>])</span><br><span class="line"></span><br><span class="line">    age  name</span><br><span class="line"><span class="number">0</span>  Taro  <span class="number">10.0</span></span><br><span class="line"><span class="number">1</span>  Jiro  <span class="number">20.0</span></span><br><span class="line"><span class="number">2</span>  Goro   NaN</span><br></pre></td></tr></table></figure><p>リストや NumPy の ndarray をそのまま DataFrame にできる。<br>以降のプログラム例では、上記の DataFrame を操作する例とする。</p><h2 id="データのロード">データのロード</h2><p><code>read_csv()</code> と <code>read_table()</code> はデフォルトの区切り文字が違うだけで中身は同じ。<br><code>read_csv()</code> はカンマ、 <code>read_table()</code> はタブ。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"data.csv"</span>)</span><br><span class="line">df = pd.read_table(<span class="string">"data.tsv"</span>)</span><br></pre></td></tr></table></figure><p><code>sep</code> オプションを使用することで区切り文字を指定できる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"data.csv"</span>, sep = <span class="string">"¥t"</span>)</span><br></pre></td></tr></table></figure><p><code>dtype</code> オプションを指定することで、読み込み時のデータ型を指定できる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"data.csv"</span>, dtype = &#123;<span class="string">"name"</span>: <span class="string">"object"</span>, <span class="string">"age"</span>: <span class="string">"object"</span>&#125;) <span class="comment"># 列を指定して文字列で読み込み</span></span><br><span class="line">df = pd.read_csv(<span class="string">"data.csv"</span>, dtype = &#123;<span class="number">0</span>: <span class="string">"object"</span>, <span class="number">1</span>: <span class="string">"object"</span>&#125;) <span class="comment"># カラム番号でも可能</span></span><br><span class="line">df = pd.read_csv(<span class="string">"data.csv"</span>, dtype = <span class="string">"object"</span>) <span class="comment"># 全ての列を文字列で読み込み</span></span><br></pre></td></tr></table></figure><p>なお、 DataFrame ではデフォルトで欠損値を <code>NaN</code> で扱う。</p><h2 id="変換">変換</h2><p>Series を DataFrame へ変換する。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(se)</span><br></pre></td></tr></table></figure><h2 id="検索">検索</h2><p><code>[]</code> 内に <code>True</code> または <code>False</code> を返す式を指定する。<br>検索でヒットしたセルにそのまま値を代入できる。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &quot;age&quot; 列の値が 10 より大きい行を取得</span><br><span class="line">df[df.age &gt; 10]</span><br><span class="line"></span><br><span class="line">   name   age</span><br><span class="line">1  Jiro  20.0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 値が 0 より大きい値のみを取得</span></span><br><span class="line">df[df &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">   name   age</span><br><span class="line"><span class="number">0</span>  Taro   NaN</span><br><span class="line"><span class="number">1</span>  Jiro  <span class="number">20.0</span></span><br><span class="line"><span class="number">2</span>  Goro   NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 検索でヒットしたセルに値を代入</span></span><br><span class="line">df.age[df.age &gt; <span class="number">10</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">   name    age</span><br><span class="line"><span class="number">0</span>  Taro   <span class="number">10.0</span></span><br><span class="line"><span class="number">1</span>  Jiro  <span class="number">100.0</span></span><br><span class="line"><span class="number">2</span>  Goro    NaN</span><br><span class="line"><span class="comment"># SettingWithCopyWarning が出るが値は代入されている</span></span><br><span class="line"><span class="comment"># Warning が出ないようにするには後述の loc を使う</span></span><br></pre></td></tr></table></figure><p>後述の <code>isnull()</code> や <code>isin()</code> メソッドを使った検索も可能。</p><h2 id="削除">削除</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 行削除</span></span><br><span class="line">df.drop(index = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   name   age</span><br><span class="line"><span class="number">1</span>  Jiro  <span class="number">20.0</span></span><br><span class="line"><span class="number">2</span>  Goro   NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列削除</span></span><br><span class="line">df.drop(columns = <span class="string">"age"</span>, inplace = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">   name</span><br><span class="line"><span class="number">0</span>  Taro</span><br><span class="line"><span class="number">1</span>  Jiro</span><br><span class="line"><span class="number">2</span>  Goro</span><br></pre></td></tr></table></figure><p><code>inplace = True</code> を指定するとオブジェクトが上書きされる。<br>また、検索条件にひっかけることで行の削除が可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># age列が10以下の行を削除 = age列が10より大きい列のみ抽出</span></span><br><span class="line">df = df[df.age &gt; <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">   name   age</span><br><span class="line"><span class="number">1</span>  Jiro  <span class="number">20.0</span></span><br></pre></td></tr></table></figure><h2 id="追加">追加</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.DataFrame([[<span class="string">"Rokuro"</span>, <span class="number">60</span>]], columns=[<span class="string">"name"</span>, <span class="string">"age"</span>])</span><br><span class="line"><span class="comment"># 行追加</span></span><br><span class="line">df = df.append(df2)</span><br><span class="line"></span><br><span class="line">     name   age</span><br><span class="line"><span class="number">0</span>    Taro  <span class="number">10.0</span></span><br><span class="line"><span class="number">1</span>    Jiro  <span class="number">20.0</span></span><br><span class="line"><span class="number">2</span>    Goro   NaN</span><br><span class="line"><span class="number">0</span>  Rokuro  <span class="number">60.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">se = pd.Series([<span class="string">"male"</span>, <span class="string">"female"</span>, <span class="string">"male"</span>])</span><br><span class="line"><span class="comment"># 列追加</span></span><br><span class="line">df[<span class="string">"sex"</span>] = se</span><br><span class="line"></span><br><span class="line">   name   age     sex</span><br><span class="line"><span class="number">0</span>  Taro  <span class="number">10.0</span>    male</span><br><span class="line"><span class="number">1</span>  Jiro  <span class="number">20.0</span>  female</span><br><span class="line"><span class="number">2</span>  Goro   NaN    male</span><br></pre></td></tr></table></figure><h2 id="列取得">列取得</h2><p>一列取得した場合は <strong>Series</strong> になる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df.name</span><br><span class="line"><span class="comment"># print(df["name"]) も同じ</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span>      Taro</span><br><span class="line"><span class="number">1</span>      Jiro</span><br><span class="line"><span class="number">2</span>      Goro</span><br><span class="line">Name: name, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(df[[<span class="string">"name"</span>, <span class="string">"age"</span>]])</span><br><span class="line"></span><br><span class="line">   name   age</span><br><span class="line"><span class="number">0</span>  Taro  <span class="number">10.0</span></span><br><span class="line"><span class="number">1</span>  Jiro  <span class="number">20.0</span></span><br><span class="line"><span class="number">2</span>  Goro   NaN</span><br></pre></td></tr></table></figure><h2 id="検索-1">検索</h2><p>https://qiita.com/tanemaki/items/2ed05e258ef4c9e6caac</p><h1 id="属性attributes">属性（Attributes）</h1><table><thead><tr class="header"><th style="text-align: left;">属性</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">T</td><td style="text-align: left;">転置行列</td></tr><tr class="even"><td style="text-align: left;">at</td><td style="text-align: left;">後述</td></tr><tr class="odd"><td style="text-align: left;">axes</td><td style="text-align: left;">行ラベルと列ラベルの情報</td></tr><tr class="even"><td style="text-align: left;">blocks</td><td style="text-align: left;">辞書形式の内部属性</td></tr><tr class="odd"><td style="text-align: left;">columns</td><td style="text-align: left;">列ラベル</td></tr><tr class="even"><td style="text-align: left;">dtypes</td><td style="text-align: left;">オブジェクトのデータタイプ</td></tr><tr class="odd"><td style="text-align: left;">empty</td><td style="text-align: left;">中身が完全に空の時、Trueを返す</td></tr><tr class="even"><td style="text-align: left;">ftypes</td><td style="text-align: left;">オブジェクトの ftypes を Series 形式で返却</td></tr><tr class="odd"><td style="text-align: left;">iat</td><td style="text-align: left;">後述</td></tr><tr class="even"><td style="text-align: left;">iloc</td><td style="text-align: left;">後述</td></tr><tr class="odd"><td style="text-align: left;">index</td><td style="text-align: left;">行ラベル</td></tr><tr class="even"><td style="text-align: left;">is_copy</td><td style="text-align: left;">不明</td></tr><tr class="odd"><td style="text-align: left;">ix</td><td style="text-align: left;">非推奨</td></tr><tr class="even"><td style="text-align: left;">loc</td><td style="text-align: left;">後述</td></tr><tr class="odd"><td style="text-align: left;">ndim</td><td style="text-align: left;">何次元配列か返却</td></tr><tr class="even"><td style="text-align: left;">shape</td><td style="text-align: left;">行と列のサイズ</td></tr><tr class="odd"><td style="text-align: left;">size</td><td style="text-align: left;">行列の要素数（行サイズは <code>len(df.index)</code> 、列サイズは <code>len(df.columns)</code> ）</td></tr><tr class="even"><td style="text-align: left;">style</td><td style="text-align: left;">Stylerオブジェクトを返却</td></tr><tr class="odd"><td style="text-align: left;">values</td><td style="text-align: left;">numpy.ndarray 形式で値を取得</td></tr></tbody></table><h2 id="at-iat-loc-iloc"><code>at</code> 、 <code>iat</code> 、 <code>loc</code> 、 <code>iloc</code></h2><ul><li>単独の値（スカラー）にアクセスするのが <code>at</code> と <code>iat</code></li><li>単独の値（スカラー）および複数の値（ベクトル）にアクセスするのが <code>loc</code> と <code>iloc</code></li><li>行ラベル（行名）、列ラベル（列名）で位置を指定するのが <code>at</code> と <code>loc</code></li><li>行番号、列番号で位置を指定するのが <code>iat</code> と <code>iloc</code></li><li>処理速度は <code>at</code> と <code>iat</code> のほうが <code>loc</code> と <code>iloc</code> よりも高速</li></ul><p>なお、 <code>DataFrame.get_value()</code> 、 <code>DataFrame.ix[]</code> もあるが、それぞれバージョン <code>v0.21.0</code> <code>v0.20.0</code> から非推奨（Deprecated）になっている。これから新しく書くコードには <code>at</code> , <code>iat</code> , <code>loc</code> , <code>iloc</code> を使うほうがいいだろう。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># USAGE</span></span><br><span class="line">df.at[行条件, 列条件]</span><br><span class="line">df.iat[行条件, 列条件]</span><br><span class="line">df.loc[行条件, 列条件]</span><br><span class="line">df.iloc[行条件, 列条件]</span><br></pre></td></tr></table></figure><p><code>at</code> は行ラベルと列ラベルで位置を指定する。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df.at[<span class="number">1</span>, <span class="string">"age"</span>]</span><br><span class="line"><span class="comment"># 20.0</span></span><br><span class="line"><span class="comment"># numpy.float64</span></span><br><span class="line"></span><br><span class="line">df.at[<span class="number">2</span>, <span class="string">"name"</span>]</span><br><span class="line"><span class="comment"># 'Goro'</span></span><br><span class="line"><span class="comment"># str</span></span><br><span class="line"></span><br><span class="line">df.at[<span class="number">1</span>, <span class="string">"age"</span>] = <span class="number">60</span> <span class="comment"># 代入も可能</span></span><br></pre></td></tr></table></figure><p><code>iat</code> は行番号と列番号で位置を指定する。行番号・列番号は <code>0</code> はじまり。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.iat[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 'Taro'</span></span><br><span class="line"></span><br><span class="line">df.iat[<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># nan</span></span><br></pre></td></tr></table></figure><p><code>loc</code> はスライス <code>x:y</code> やリスト <code>[x, y]</code> でデータの範囲・位置を指定する。参照される値は pandas.Series または pandas.DataFrame になる。<br>列の指定を省略すると、列全体の参照になる。<br>列全体を参照したい場合は、行の指定を <code>:</code> （全体のスライス）にする。<br>また、行の指定には <code>df.age&gt;10</code> のような <strong>検索条件</strong> を指定することもできる。<br><code>loc</code> で取得したセルに対して <strong>値を代入</strong> することができる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="number">0</span>:<span class="number">1</span>, <span class="string">"name"</span>:<span class="string">"age"</span>]</span><br><span class="line"></span><br><span class="line">df.loc[[<span class="number">0</span>, <span class="number">2</span>], [<span class="string">"name"</span>, <span class="string">"age"</span>]]</span><br><span class="line"></span><br><span class="line">df.loc[<span class="number">0</span>:<span class="number">2</span>, <span class="string">"age"</span>] = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>] <span class="comment"># 代入</span></span><br><span class="line"></span><br><span class="line">df.loc[df.age&gt;<span class="number">10</span>, <span class="string">"age"</span>] = <span class="number">20</span> <span class="comment"># 検索結果が複数行でも代入可能</span></span><br></pre></td></tr></table></figure><h1 id="代表的なメソッド">代表的なメソッド</h1><table><thead><tr class="header"><th style="text-align: left;">メソッド</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>apply(関数・Lambda)</code></td><td style="text-align: left;">各列に任意の処理を適用</td></tr><tr class="even"><td style="text-align: left;"><code>astype({辞書型})</code></td><td style="text-align: left;">型変換</td></tr><tr class="odd"><td style="text-align: left;"><code>replace("置換対象文字", "置換文字")</code></td><td style="text-align: left;">文字の置換</td></tr><tr class="even"><td style="text-align: left;"><code>rename(columns={辞書型}, inplace=True)</code></td><td style="text-align: left;">カラム名の変更</td></tr><tr class="odd"><td style="text-align: left;"><code>isin(リスト)</code></td><td style="text-align: left;">セルの値がリストに含まれていれば True 、そうでなければ False の DataFrame を返却する</td></tr><tr class="even"><td style="text-align: left;"><code>isnull()</code></td><td style="text-align: left;">セルが None であれば True 、そうでなければ False の DataFrame を返却する</td></tr><tr class="odd"><td style="text-align: left;"><code>drop_duplicates()</code></td><td style="text-align: left;">重複を削除</td></tr><tr class="even"><td style="text-align: left;"><code>pivot_table(index=[], columns=[],values=[, aggfunc='sum')</code></td><td style="text-align: left;">ピボットテーブル</td></tr><tr class="odd"><td style="text-align: left;"><code>sort_values(by=)</code></td><td style="text-align: left;">ソート</td></tr></tbody></table><h1 id="sql-ライクな操作">SQL ライクな操作</h1><ul><li><a href="https://pandas.pydata.org/pandas-docs/stable/comparison_with_sql.html" target="_blank" rel="noopener">公式ドキュメント</a></li></ul><h2 id="wherer"><code>wherer</code></h2><p>条件式が成り立つものをとってきて，それ以外はNaNで埋める。</p><ul><li><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.where.html" target="_blank" rel="noopener">公式ドキュメント</a></li></ul><h2 id="groupby"><code>groupby</code></h2><p><code>groupby</code> でカラムを指定し、様々な集計関数を適用することができる。</p><table><thead><tr class="header"><th style="text-align: left;">項目</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>df.groupby('a').mean()</code></td><td style="text-align: left;">平均</td></tr><tr class="even"><td style="text-align: left;"><code>df.groupby('a').max()</code></td><td style="text-align: left;">最大値</td></tr><tr class="odd"><td style="text-align: left;"><code>df.groupby('a').min()</code></td><td style="text-align: left;">最小値</td></tr><tr class="even"><td style="text-align: left;"><code>df.groupby('a').count()</code></td><td style="text-align: left;">出現回数</td></tr><tr class="odd"><td style="text-align: left;"><code>df.groupby('a').sum()</code></td><td style="text-align: left;">合計値</td></tr><tr class="even"><td style="text-align: left;"><code>df.groupby('a').std()</code></td><td style="text-align: left;">標準偏差</td></tr><tr class="odd"><td style="text-align: left;"><code>df.groupby('a').sum()</code></td><td style="text-align: left;">合計値</td></tr></tbody></table><p>集計のキーをインデックスとして扱いたくない場合はオプション <code>as_index=False</code> を指定する。</p><ul><li><a href="https://pandas.pydata.org/pandas-docs/stable/api.html#groupby" target="_blank" rel="noopener">公式ドキュメント</a></li></ul><h2 id="merge"><code>merge</code></h2><p>いわゆる JOIN 。</p><ul><li><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html#pandas.DataFrame.merge" target="_blank" rel="noopener">公式ドキュメント</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python ライブラリである Pandas の DataFrame についてまとめる。&lt;/p&gt;
&lt;p&gt;- &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式ドキュメント&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Pandas" scheme="https://pepese.github.io/tags/Pandas/"/>
    
      <category term="DataFrame" scheme="https://pepese.github.io/tags/DataFrame/"/>
    
  </entry>
  
  <entry>
    <title>Nginx入門</title>
    <link href="https://pepese.github.io/blog/nginx-basics/"/>
    <id>https://pepese.github.io/blog/nginx-basics/</id>
    <published>2018-02-04T03:46:23.000Z</published>
    <updated>2019-02-04T04:13:24.297Z</updated>
    
    <content type="html"><![CDATA[<ul><li>インストール</li><li>ディレクトリ構成</li><li>各種設定</li></ul><a id="more"></a><h1 id="インストール">インストール</h1><p><code>/etc/yum.repos.d/nginx.repo</code> を作成し、以下のリポジトリ情報を入力。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/OS/OSRELEASE/$basearch/</span><br><span class="line">gpgchek=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><ul><li>OS： <code>centos</code> もしくは <code>rhel</code></li><li>OSRELEASE： <code>6</code> or <code>7</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install nginx</span><br><span class="line">$ systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">$ systemctl start nginx</span><br><span class="line">$ firewall-cmd --zone=public --add-port=80/tcp –permanent</span><br><span class="line">$ firewall-cmd –reload</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -v</span><br><span class="line">nginx version: nginx/1.13.3</span><br><span class="line">$ ps -ef | grep nginx</span><br><span class="line">root 1088 1 0 19:59 ? 00:00:00 nginx: master process …</span><br><span class="line">nginx 1092 1088 0 19:59 ? 00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure><h1 id="ディレクトリ構成">ディレクトリ構成</h1><ul><li><code>/etc/nginx</code><ul><li>Nginx 設定用ルートディレクトリ</li></ul></li><li><code>/etc/nginx/nginx.conf</code><ul><li>トップレベルの Nginx 設定ファイル</li></ul></li><li><code>/etc/nginx/conf.d/default.conf</code><ul><li>“welcome to nginx” ページの設定</li></ul></li><li><code>/etc/nginx/conf.d/*.conf</code><ul><li>仮想サーバとアップストリームの設定<ul><li>例）www.example.com.conf</li></ul></li></ul></li></ul><h1 id="各種設定">各種設定</h1><h2 id="webサーバの設定">Webサーバの設定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sslの設定">SSLの設定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line">    return 301 https://$server_name$request_url;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl http2 default_server;</span><br><span class="line">        server_name www.example.com;</span><br><span class="line">        ssl_certificatekey cert.key</span><br><span class="line">        ssl_ciphers HIGH;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="リバースプロキシphpアプリ">リバースプロキシ（PHPアプリ)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">        fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">        # fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ロードバランシング">ロードバランシング</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream my_upstream &#123;</span><br><span class="line">        server server1.example.com;</span><br><span class="line">        server server2.example.com;</span><br><span class="line">        least_conn;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_pass http://my_upstream;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="キャッシュ">キャッシュ</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path /path/to/cache levels=1:2</span><br><span class="line">                  keys_zone=my_cache:10m max_size=10g</span><br><span class="line">                  inactive=60m use_temp_path=off;</span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_cache my_cache;</span><br><span class="line">        # proxy_cache_valid 5m;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_pass http://my_upstream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;インストール&lt;/li&gt;
&lt;li&gt;ディレクトリ構成&lt;/li&gt;
&lt;li&gt;各種設定&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="https://pepese.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code入門</title>
    <link href="https://pepese.github.io/blog/vscode-basics/"/>
    <id>https://pepese.github.io/blog/vscode-basics/</id>
    <published>2018-01-31T09:15:32.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft が開発したエディタ<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>（以降、 VS Code ）のインストールから拡張機能の導入までをまとめる。</p><a id="more"></a><h1 id="インストールmac">インストール（Mac）</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install visual-studio-code</span><br></pre></td></tr></table></figure><h1 id="起動方法">起動方法</h1><p>アイコンクリックでもいいがコマンドラインで起動できる。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ code</span><br></pre></td></tr></table></figure><p>プロジェクト（カレントディレクトリ）で起動したい場合は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ code .</span><br></pre></td></tr></table></figure><h1 id="ショートカット操作">ショートカット・操作</h1><p>ショートカットの一覧・設定は <code>Comannd + K -&gt; Command + S</code> で開く。<br>（筆者の場合は「右側をすべて削除」が <code>Ctrl + K</code> になっていなかったので登録した。）</p><ul><li>ユーザ設定<ul><li><code>Command + ,</code></li></ul></li><li>Markdown Preview<ul><li><code>Command + Shift + V</code></li></ul></li><li>統合ターミナル<ul><li><code>Control + Shift + @</code></li></ul></li><li>ワークスペースにプロジェクトを追加<ul><li>「ファイル」-&gt;「ワークスペースにフォルダに追加」</li></ul></li></ul><h1 id="コマンドパレット">コマンドパレット</h1><p><code>Command + Shift + P</code> を押すと VS Code の上部に <strong>コマンドパレット</strong> が開く。<br>VS Code で実行できる各種コマンドには名前が付いていて、その名前をこのコマンドパレットに入力することでそれらを実行できる。</p><h1 id="拡張機能-extensions">拡張機能（ Extensions ）</h1><p>アクティビティーバー（左上に縦に並んでるアイコン）の一番下にあるアイコンをクリックするとサイドバーが拡張機能の画面になる。（ <code>Command + Shift + X</code> でも）<br>以下のような種類の拡張機能が存在する。</p><ul><li>［Debuggers］（デバッガー）</li><li>［Languages］（言語）</li><li>［Linters］（Lintツール）</li><li>［Snippets］（スニペット）</li><li>［Themes］（テーマ）</li><li>［Other］（その他）</li></ul><p>検索欄を空にすると現在インストール済みの拡張機能の一覧が表示される。<br>なお、拡張機能の反映には VS Code を再起動するか再読み込みボタンを押す。</p><h1 id="アップデート">アップデート</h1><h2 id="vs-code">VS Code</h2><p>「 Code 」 -&gt; 「更新の確認」。</p><h2 id="拡張機能">拡張機能</h2><p>拡張機能画面の右上の「・・・」をクリックして「更新の確認」。</p><h1 id="オススメの拡張機能">オススメの拡張機能</h1><h2 id="視覚サポート">視覚サポート</h2><ul><li>Trailing Spaces<ul><li>改行部分の最後に入る半角スペースの強調、削除</li></ul></li><li>EvilInspector<ul><li>文章中の全角スペースを強調, 削除</li></ul></li></ul><h2 id="markdown">Markdown</h2><ul><li>Auto-Open Markdown Preview<ul><li>Markdown ファイルを開くときに自動でプレビューを開く</li></ul></li><li>Markdown+Math<ul><li><code>$$</code> 内に数式を書いて <code>Ctrl + Shift + .</code> と打てば、数式対応のプレビューが表示</li></ul></li></ul><h2 id="git">Git</h2><ul><li>Git History<ul><li>ツリー表示や差分表示など</li></ul></li><li>gi<ul><li><a href="https://github.com/joeblau/gitignore.io" target="_blank" rel="noopener">gitignore.io</a> から gitignore を追加</li></ul></li><li>gitignore<ul><li><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">github/gitignore.io</a> から gitignore を追加</li></ul></li></ul><h2 id="マークアップ">マークアップ</h2><ul><li>Auto Complete Tag<ul><li>タグを自動で閉じて、開始・終了タグを変更したらもう片方のタグも自動で変更</li></ul></li></ul><h2 id="その他">その他</h2><ul><li>Shortcuts<ul><li>VS Code 最下部にショートカットボタンを追加</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft が開発したエディタ&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual Studio Code&lt;/a&gt;（以降、 VS Code ）のインストールから拡張機能の導入までをまとめる。&lt;/p&gt;
    
    </summary>
    
    
      <category term="VS Code" scheme="https://pepese.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>Appium入門</title>
    <link href="https://pepese.github.io/blog/appium-basics/"/>
    <id>https://pepese.github.io/blog/appium-basics/</id>
    <published>2018-01-06T06:07:54.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Appium は Selenium WebDriver の一種で、ネイティブアプリの自動テストを可能にする。<br>Node.js 上でサーバーとして動作し、HTTP 経由で WebDriver API を通して操作を受け付けるという仕組み。<br>Appium の背後には iOS 用, Android 用, Win 用などのドライバがある。</p><ul><li><a href="http://appium.io/slate/en/master/" target="_blank" rel="noopener">API Reference</a></li><li><a href="http://appium.io/slate/en/tutorial/android.html" target="_blank" rel="noopener">Tutorial Android</a></li><li><a href="http://appium.io/slate/en/tutorial/ios.html" target="_blank" rel="noopener">Tutorial iOS</a></li></ul><a id="more"></a><h1 id="環境設定">環境設定</h1><p>Homebrew 、 Java 1.8 の導入は省略している。</p><h2 id="appium">Appium</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install node</span><br><span class="line">$ npm install --global appium appium-doctor wd</span><br></pre></td></tr></table></figure><p>Appium は以下で起動。<br>後述の appium-desktop を使用せず、 Appium のテストコードだけ実行する場合はこれ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ appium &amp;</span><br></pre></td></tr></table></figure><h2 id="ios">iOS</h2><p>Xcode を App Store でインストールしてから以下を実行。<br>また、 <code>brew install carthage</code> を実行する際、権限不足で <code>/usr/local/Frameworks</code> ディレクトリ作成に失敗する。<br>そのため、 <code>brew link carthage</code> に失敗するので、あらかじめディレクトリを作ってあげてからインストールする。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /usr/<span class="built_in">local</span>/Frameworks</span><br><span class="line">$ sudo chown -R $(whoami):admin /usr/<span class="built_in">local</span>/Frameworks</span><br><span class="line">$ brew install carthage</span><br><span class="line"><span class="comment"># $ brew link carthage</span></span><br><span class="line">$ appium-doctor --ios <span class="comment"># インストール、設定が正しいかチェック</span></span><br><span class="line">$ brew install libimobiledevice --HEAD <span class="comment"># 実機接続用のモジュール</span></span><br><span class="line">$ npm install --global --unsafe-perm ios-deploy</span><br><span class="line">$ sudo xcode-select --switch /Applications/Xcode.app <span class="comment"># Xcode のバージョンを指定</span></span><br></pre></td></tr></table></figure><p>その他 iOS に関する細々した設定は<a href="https://github.com/appium/appium-xcuitest-driver/blob/master/docs/real-device-config.md" target="_blank" rel="noopener">ここ</a>を参照。</p><h3 id="シミュレータ">シミュレータ</h3><p>特に必要無いが、シミュレータの画面サイズが大きいのでやってもいい。</p><ol type="1"><li>Xcode を起動</li><li>Xcode -&gt; Open Developper Tool -&gt; Simulator</li><li>Window -&gt; Scale -&gt; 50%</li><li>ホームボタンは Shift + Command + H</li></ol><h3 id="実機">実機</h3><p>iOS の場合は、「実機＋アプリ」は <code>.ipa</code> ファイル、「エミュレータ＋アプリ」は <code>.app</code> ファイルが必要となる。<br>また、実機用のアプリは development のプロビジョニングでビルドされている必要があり、かつ実機端末の UDID の指定も合わせて必要。</p><ol type="1"><li>実機に接続する MacOS PC に App Store から <strong>Apple Configurator</strong> をインストール</li><li>USB で実機を MacOS PC に接続し、端末を選ぶと、再度バーにAppsというメニューが出てくるのでクリック</li><li><code>.ipa</code> ファイルをドラッグ＆ドロップすることでアプリを端末にインストールできる</li><li>appium-desktop との接続は後述</li></ol><p>iOS 実機へ WebDriver をインストールするコマンドは以下。<br>（なお、筆者は実機で試していない、、、）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcodebuild build <span class="built_in">test</span> -project /usr/<span class="built_in">local</span>/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination id=xxxx -configuration Debug</span><br></pre></td></tr></table></figure><h2 id="android">Android</h2><p>Android 開発環境の構築方法については <a href="https://pepese.github.io/blog/android-env-on-mac/">Androidアプリ入門 Macで環境構築編</a> を参照。<br>以下のコマンドで正しく環境構築されたか確認する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ appium-doctor --android</span><br></pre></td></tr></table></figure><h3 id="エミュレータ">エミュレータ</h3><p>Android エミュレータは iOS シミュレータと異なり、エミュレータを手で作る必要がある。<br>（また、各種ツール類を導入する必要がある？）</p><ol type="1"><li>Android Studio を起動<ul><li>「 Start a new Android Studio project 」で適当にプロジェクトを作る</li></ul></li><li>SDK Manager を起動<ul><li>左のメニューの Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK を選択</li><li>SDK Tools を選択して以下をインストール・更新<ul><li>Android SDK Tools</li><li>Android SDK Platform-tools</li><li>Android SDK Build-tools</li></ul></li><li>SDK Platforms を選択して、利用した API Version をインストール</li></ul></li><li>AVD Manager を起動</li><li>エミュレータを作成<ul><li>ARM 系のプラットフォームは挙動が遅いので x86 、 x86_64 を選択する</li></ul></li></ol><h4 id="コマンド">コマンド</h4><p>かつては <code>android</code> コマンドであったが、 <code>sdkmanager</code> と <code>avdmanager</code> に移行された。<br>以下はメモ程度。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sdkmanager --list</span><br><span class="line">$ sdkmanager <span class="string">"system-images;android-25;google_apis;armeabi-v7a"</span></span><br><span class="line">$ avdmanager create avd -n <span class="built_in">test</span> -k <span class="string">"system-images;android-25;google_apis;armeabi-v7a"</span></span><br><span class="line">$ avdmanager list avd</span><br><span class="line">$ emulator -list-avds</span><br><span class="line">$ emulator -avd <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.android.com/studio/command-line/sdkmanager.html" target="_blank" rel="noopener">sdkmanager</a></li><li><a href="https://developer.android.com/studio/command-line/avdmanager.html#syntax" target="_blank" rel="noopener">avdmanager</a></li><li><a href="https://developer.android.com/studio/run/emulator-commandline.html" target="_blank" rel="noopener">emulator</a></li></ul><h3 id="実機-1">実機</h3><p>Android 実機での自動テスト手順は以下。</p><ol type="1"><li>Android 実機を USB で PC に繋ぎ、実機側で USB デバッグを許可</li><li><code>$ adb devices</code> で device 番号が表示されることを</li><li>実機でアプリを起動して、パッケージ名などを確認（アプリインストールの確認）<ul><li><code>$ adb shell pm list packages | grep pepese</code><ul><li><code>package:org.pepese</code></li></ul></li><li><code>$ adb shell dumpsys activity | grep pepese | grep Intent</code><ul><li><code>Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=org.pepese/org.pepese.MainActivity }</code></li></ul></li></ul></li><li>appium-desktop を起動<ul><li>Capability を設定して接続（詳細後述）</li></ul></li></ol><h2 id="appium-desktop">appium-desktop</h2><p>appium-desktop を使用することにより以下のことが可能になる。</p><ul><li>Appiumサーバー起動（ <code>$ appium &amp;</code> コマンド打たなくてよくなる）</li><li>実機やエミュレータと接続</li><li>インスペクターを利用してアプリ画面内の要素の確認やその操作</li><li>操作のテストコード出力</li></ul><p>以下のように導入する。</p><ol type="1"><li><a href="https://github.com/appium/appium-desktop/releases/" target="_blank" rel="noopener">ここ</a> から最新版を取得してインストール。<ul><li><code>appium-desktop-x.x.x.dmg</code></li></ul></li><li>「 Simple 」で「 Start Server vx.x.x 」を押下</li><li>右上の左のボタン「 Start Inspector Session 」を押下</li><li>上のタブを「 Automatic Server 」、下のタブを「 Desired Capability 」の状態で、右下の「 JSON Representation 」にエミュレータや実機へ接続するための設定を記載する<ul><li><a href="https://appium.io/slate/en/master/?ruby#appium-server-capabilities" target="_blank" rel="noopener">公式：設定ドキュメント</a></li></ul></li></ol><h3 id="ios-シミュレータと接続">iOS シミュレータと接続</h3><p>iOS の場合は、「実機＋アプリ」は <code>.ipa</code> ファイル、「シミュレータ＋アプリ」は <code>.app</code> ファイルが必要となる。<br>（ Android とは異なり、 <code>appPackage</code> <code>appActivity</code> の設定は不要）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"platformName"</span>: <span class="string">"iOS"</span>,</span><br><span class="line">    <span class="string">"platformVersion"</span>: <span class="string">"11.1"</span>,</span><br><span class="line">    <span class="string">"deviceName"</span>: <span class="string">"iPhone Simulator"</span>,</span><br><span class="line">    <span class="string">"automationName"</span>: <span class="string">"XCUITest"</span>,</span><br><span class="line">    <span class="string">"app"</span>: <span class="string">"[アプリまでのパス]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ios-実機と接続">iOS 実機と接続</h3><p><code>udid</code> は MacOS PC へ実機を接続した後、 <strong>Apple Configurator</strong> で確認する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"platformName"</span>: <span class="string">"iOS"</span>,</span><br><span class="line">    <span class="string">"platformVersion"</span>: <span class="string">"11.1"</span>,</span><br><span class="line">    <span class="string">"deviceName"</span>: <span class="string">"iPhone Simulator"</span>,</span><br><span class="line">    <span class="string">"automationName"</span>: <span class="string">"XCUITest"</span>,</span><br><span class="line">    <span class="string">"app"</span>: <span class="string">"[アプリまでのパス]"</span>,</span><br><span class="line">    <span class="string">"udid"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"xcodeOrgId"</span>: <span class="string">"&lt;Team ID&gt;"</span>,</span><br><span class="line">    <span class="string">"xcodeSigningId"</span>: <span class="string">"iPhone Developer"</span>,</span><br><span class="line">    <span class="string">"updatedWDABundleId"</span>: <span class="string">"io.appium.WebDriverAgentRunner"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="android-エミュレータと接続">Android エミュレータと接続</h3><p>Android エミュレータの場合は、あらかじめエミュレータを起動しておく。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"appPackage"</span>: <span class="string">"org.pepese"</span>,</span><br><span class="line">  <span class="string">"appActivity"</span>: <span class="string">"org.pepese.MainActivity"</span>,</span><br><span class="line">  <span class="string">"platformName"</span>: <span class="string">"Android"</span>,</span><br><span class="line">  <span class="string">"automationName"</span>: <span class="string">"Appium"</span>,</span><br><span class="line">  <span class="string">"platformVersion"</span>: <span class="string">"8.1.0"</span>,</span><br><span class="line">  <span class="string">"deviceName"</span>: <span class="string">"Android Emulator"</span>,</span><br><span class="line">  <span class="string">"app"</span>: <span class="string">"[アプリまでのパス]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="android-実機と接続">Android 実機と接続</h3><p>実機の場合は <code>$ adb devices</code> で device 番号を取得し、 <code>deviceName</code> へ設定する。</p><h4 id="トラブルシューティング">トラブルシューティング</h4><ul><li><code>adb install</code> で <code>INSTALL_FAILED_NO_MATCHING_ABIS</code> が出た<ul><li>appium-desktop とエミュレータ接続時、アプリケーションがインストールされるのだが、アプリと ABI の組み合わせが悪いときに発生。<ul><li>アプリが「 x86 」用にビルドされてない、とか「 ARM 」用にビルドされてないとか</li></ul></li><li>CPU/ABI に「 x86 」がダメなら「 ARM(armeabi-v7a) 」を、「 ARM 」がダメなら「 x86 」を選択する。</li></ul></li><li>エミュレータが起動すると <code>Process system isn't responding</code> と表示される<ul><li>x86 系マシン（例えば Mac ）で ARM のエミュレータを実行している時に発生<ul><li>ただひたすらエミュレート処理が遅いだけ、大人しく x86 系エミュレータにしたほうがいい</li></ul></li><li>ひたすら「 wait 」する</li></ul></li></ul><h1 id="サンプルを実行">サンプルを実行</h1><p>サンプルアプリとサンプルテストコードで Appium の自動テストを動かしてみる。</p><h2 id="ios-1">iOS</h2><p>コマンドラインの iOS ビルドツールの準備。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br><span class="line">$ sudo xcode-select --switch /Applications/Xcode.app</span><br><span class="line">$ xcodebuild -version</span><br><span class="line">Xcode 9.2</span><br><span class="line">Build version 9C40b</span><br></pre></td></tr></table></figure><p>サンプルアプリとテストコードを取得してセットアップ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/appium/sample-code</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/appium/ios-test-app</span><br><span class="line">$ <span class="built_in">cd</span> ios-test-app</span><br><span class="line">$ xcodebuild -sdk iphonesimulator</span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ cp -R ios-test-app/build sample-code/sample-code/apps/TestApp/build</span><br><span class="line">$ <span class="built_in">cd</span> sample-code/sample-code/examples/python</span><br></pre></td></tr></table></figure><p><code>xcodebuild -version -sdk</code> コマンドで <code>PlatformVersion</code> を確認し、 <code>ios_simple.py</code> ファイルの 20 行目あたりの <code>PlatformVersion</code> を書き直す。<br>別ターミナルを起動し <code>appium &amp;</code> コマンドで Appium を起動してから以下を実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ py.test ios_simple.py</span><br></pre></td></tr></table></figure><h3 id="appium-desktop-との接続">appium-desktop との接続</h3><p>シミュレータ上のサンプルアプリと appium-desktop を接続する際、 Capability には以下を設定する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"platformName"</span>: <span class="string">"iOS"</span>,</span><br><span class="line">  <span class="string">"platformVersion"</span>: <span class="string">"11.2"</span>,</span><br><span class="line">  <span class="string">"deviceName"</span>: <span class="string">"iPhone Simulator"</span>,</span><br><span class="line">  <span class="string">"automationName"</span>: <span class="string">"XCUITest"</span>,</span><br><span class="line">  <span class="string">"app"</span>: <span class="string">"/path/to/ios-test-app/build/Release-iphonesimulator/TestApp.app"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="android-1">Android</h2><p>エミュレータは起動しておく。<br>iOS のテストを実行した後のテイで書く。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ py.test android_simple.py</span><br></pre></td></tr></table></figure><p>動かなかった。<br>以下の記事を参考のこと。</p><ul><li><a href="https://qiita.com/natsuki_summer/items/2d8d60114cdb95929dcb" target="_blank" rel="noopener">Appium インストールして起動まで/ iOS・Androidのトラブルシューティング</a></li></ul><h3 id="appium-desktop-との接続-1">appium-desktop との接続</h3><p>エミュレータ上のサンプルアプリと appium-desktop を接続する際、 Capability には以下を設定する。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;appPackage&quot;: &quot;com.example&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;com.example.toggletest.MainActivity&quot;,</span><br><span class="line">  &quot;platformName&quot;: &quot;Android&quot;,</span><br><span class="line">  &quot;automationName&quot;: &quot;Appium&quot;,</span><br><span class="line">  &quot;platformVersion&quot;: &quot;8.1.0&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;Android Emulator&quot;,</span><br><span class="line">  &quot;app&quot;: &quot;/path/to/sample-code/sample-code/apps/ApiDemos/bin/ApiDemos-debug.apk&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android Studio で自分で実装・ビルドしたアプリをエミュレータにインストールして接続する場合は以下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;appPackage&quot;: &quot;org.pepese.sample.audiosample&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;org.pepese.sample.audiosample.MainActivity&quot;,</span><br><span class="line">  &quot;platformName&quot;: &quot;Android&quot;,</span><br><span class="line">  &quot;automationName&quot;: &quot;Appium&quot;,</span><br><span class="line">  &quot;platformVersion&quot;: &quot;8.1.0&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;Android Emulator&quot;,</span><br><span class="line">  &quot;app&quot;: &quot;/Users/[UserName]/AndroidStudioProjects/[プロジェクト名]/app/build/outputs/apk/debug/app-debug.apk&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Appium は Selenium WebDriver の一種で、ネイティブアプリの自動テストを可能にする。&lt;br&gt;
Node.js 上でサーバーとして動作し、HTTP 経由で WebDriver API を通して操作を受け付けるという仕組み。&lt;br&gt;
Appium の背後には iOS 用, Android 用, Win 用などのドライバがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://appium.io/slate/en/master/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://appium.io/slate/en/tutorial/android.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tutorial Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://appium.io/slate/en/tutorial/ios.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tutorial iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://pepese.github.io/tags/iOS/"/>
    
      <category term="Android" scheme="https://pepese.github.io/tags/Android/"/>
    
      <category term="appium" scheme="https://pepese.github.io/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>Androidアプリ入門 Macで環境構築編</title>
    <link href="https://pepese.github.io/blog/android-env-on-mac/"/>
    <id>https://pepese.github.io/blog/android-env-on-mac/</id>
    <published>2018-01-06T05:34:36.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac で Android アプリを開発する際の環境構築についてまとめる。<br>なお、プログラミング言語は <a href="https://kotlinlang.org/" target="_blank" rel="noopener">Kotlin</a> を選択する。</p><p><a href="https://developer.android.com/studio/intro/index.html" target="_blank" rel="noopener">公式ドキュメント</a></p><a id="more"></a><h1 id="android-studio-の設定">Android Studio の設定</h1><p>Java 1.8 はインストール済みな前提。<br>バージョンは 3.0.1 for Mac 。</p><h2 id="インストール">インストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew cask install android-studio</span><br></pre></td></tr></table></figure><p>Homebrew については <a href="https://pepese.github.io/blog/homebrew-basics/">Homebrew 入門</a> を参照。</p><h2 id="初回起動時の設定">初回起動時の設定</h2><p>android-studio でインストールした android-sdk 系のツールは <code>~/Library/Android/sdk</code> 配下に配備される。<br>以下の初回起動時の設定後にダウンロードされる。</p><ol type="1"><li>Android Studio 起動</li><li>「 Do not import settings 」 -&gt; 「 OK 」</li><li>「 Next 」</li><li>「 custom 」 -&gt; 「 Next 」</li><li>「 Default 」 -&gt; 「 Next 」</li><li>以下を選択して「 Next 」<ul><li>Android SDK</li><li>Android SDK Platform</li><li>Performance (Intel HAXM)</li><li>Android Virtual Device</li></ul></li><li>任意の Emulator Settings して「 Next 」 -&gt; 「 Finish 」</li></ol><p>「[ダウンロードしたアプリケーションの実行許可]の下の方に intel なんたらかんたら」って出たら、Mac の「システム環境設定　&gt; セキュリティとプライバシー」を開いて許可する。<br><code>~/.bash_profile</code> に以下を加筆した後 <code>source ~/.bash_profile</code> を実行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=`/usr/libexec/java_home -v1.8`</span><br><span class="line">export ANDROID_HOME=$HOME/Library/Android/sdk</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">PATH=$PATH:$ANDROID_HOME/platform-tools</span><br><span class="line">PATH=$PATH:$ANDROID_HOME/tools/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p><code>$ adb devices</code> 、 <code>$ sdkmanager --help</code> が実行できることを確認しておく。</p><h2 id="アンインストール">アンインストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask uninstall android-studio</span><br><span class="line">$ rm -Rf ~/Library/Preferences/AndroidStudio*</span><br><span class="line">$ rm -Rf ~/Library/Logs/AndroidStudio*</span><br><span class="line">$ rm -Rf ~/Library/Caches/AndroidStudio*</span><br><span class="line">$ rm ~/Library/Preferences/com.android.Emulator.plist</span><br><span class="line">$ rm -Rf ~/Library/Android*</span><br><span class="line">$ rm -Rf ~/AndroidStudioProjects</span><br><span class="line">$ rm -Rf ~/.gradle</span><br><span class="line">$ rm -Rf ~/.android</span><br></pre></td></tr></table></figure><h1 id="android-studio-の使い方">Android Studio の使い方</h1><ol type="1"><li>Android Studio 起動</li><li>「 Start a new Android Project 」</li><li>アプリ名、ドメイン名、「 Include Kotlin Support 」にチェックを入れて「 Next 」</li><li>アプリのプラットフォームを選択して「 Next 」</li><li>コンポーネント（ Basic Activity でよい）を選択して「 Next 」</li><li>メインとなる Activity の名前などを設定して「 Next 」-&gt;「 Finish 」<ul><li>この時点でプロジェクトの初期設定環境</li><li>エラーメッセージが出た場合は、メッセージに従い SDK Manager からツールをダウンロードする</li></ul></li><li>エミュレータの作成<ul><li>AVD Manager から作成できる</li></ul></li><li>右上の再生ボタンでアプリを実行可能</li></ol><p>「 Shift 」を2回押すと、 Search Everywhere が起動する。</p><h1 id="プロジェクト構造">プロジェクト構造</h1><p>Android プロジェクト構造は以下。<br>実際のディレクトリ構造と異なることに注意。</p><ul><li>app<ul><li>manifest ： AndroidManifest.xml がある</li><li>java ： テストコードを含む Java ソースコードのファイルがある</li><li>res ： XML レイアウト、UI 文字列、ビットマップ イメージなど、コード以外のすべてのリソースがある（ resource の略）<ul><li>drawable ： 画像</li><li>layout ： Activity のレイアウト</li><li>menu ： アプリのメニューのレイアウト</li><li>mipmap ： 拡大縮小アニメーションに対応した画像</li><li>values ： 文字列や値を XML で管理</li></ul></li></ul></li><li>Gradle Script ： ビルドファイルがある<ul><li>build.gradle (Project: xxxx) ： プロジェクトのすべてのモジュールに適用されるビルド設定</li><li>build.gradle (Module: app) ： <code>&lt;project&gt;/&lt;module&gt;/</code> ディレクトリにあるモジュールレベルのビルド設定</li><li>gradle-wrapper.properties</li><li>proguard-rules.pro ： ProGuard はビルド時にアプリのソースコードを難読化するツール</li><li>gradle.properties ： Gradle デーモンの最大ヒープサイズなど、プロジェクト全体にわたる Gradle 設定</li><li>settings.gradle ： アプリをビルドするときに含めるモジュールを Gradle に通知するファイル</li><li>local.properties ： SDK インストールへのパスなど、ビルドシステムのローカル環境プロパティを設定</li></ul></li></ul><p><a href="https://developer.android.com/studio/build/index.html" target="_blank" rel="noopener">公式ドキュメント：ビルドシステム</a></p><h2 id="マニフェスト">マニフェスト</h2><p><code>AndroidManifest.xml</code> のこと。<br>記載方法は以下を参照。</p><p><a href="https://developer.android.com/guide/topics/manifest/manifest-intro.html" target="_blank" rel="noopener">公式ドキュメント：アプリ マニフェスト</a></p><h1 id="ndk-の導入">NDK の導入</h1><p>Android NDK （ Native Development Kit ）は、C や C++ などのネイティブ コード言語を使用して、アプリの一部を実装するためのツールセット。</p><ol type="1"><li>Android Studio 起動</li><li>SDK Manager 起動</li><li>「 SDK Tools 」から「 NDK 」「 CMake 」「 LLDB 」を選択してインストール</li><li>NDK を利用するプロジェクトでは「 Include C++ support 」をチェックしておく必要がある</li></ol><p>NDK に関するビルドの設定は、モジュールレベルの <code>build.gradle</code> で行う。<br>例えば以下は、cpp のビルドターゲットの .so を armeabi 、 armeabi-v7a に限定する設定。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'kotlin-android'</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'kotlin-android-extensions'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">26</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"sample.pepese.org.audiosample"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">26</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ndk &#123; <span class="comment">// ★★★★★★★このあたり！！！！★★★★★★★</span></span><br><span class="line">            <span class="comment">// Specifies the ABI configurations of your native</span></span><br><span class="line">            <span class="comment">// libraries Gradle should build and package with your APK.</span></span><br><span class="line">            abiFilters <span class="string">'armeabi'</span>, <span class="string">'armeabi-v7a'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation<span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"</span></span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:26.1.0'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    implementation <span class="string">'com.android.support:design:26.1.0'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac で Android アプリを開発する際の環境構築についてまとめる。&lt;br&gt;
なお、プログラミング言語は &lt;a href=&quot;https://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kotlin&lt;/a&gt; を選択する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/intro/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式ドキュメント&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://pepese.github.io/tags/Mac/"/>
    
      <category term="Android" scheme="https://pepese.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://pepese.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>SDKMAN入門</title>
    <link href="https://pepese.github.io/blog/sdkman-basics/"/>
    <id>https://pepese.github.io/blog/sdkman-basics/</id>
    <published>2017-12-14T23:09:58.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java 系の anyenv 、 <a href="http://sdkman.io/index.html" target="_blank" rel="noopener">SDKMAN</a> をさわってみる。</p><a id="more"></a><h1 id="概要">概要</h1><p>SDKMAN を導入することで、以下のツールのバージョン管理が可能となる。</p><ul><li>Ant</li><li>AsciidoctorJ</li><li>Ceylon</li><li>CRaSH</li><li>Gaiden</li><li>Glide</li><li>Gradle</li><li>Grails</li><li>Griffon</li><li>Groovy</li><li>GroovyServ</li><li>Java</li><li>JBake</li><li>Kobalt</li><li>Kotlin</li><li>kscript</li><li>Lazybones</li><li>Leiningen</li><li>Maven</li><li>sbt</li><li>Scala</li><li>Spring Boot</li><li>Sshoogr</li><li>Vert.x</li></ul><p>ここでは Java と Maven のみ記載する。</p><h1 id="環境設定">環境設定</h1><h2 id="sdkman">SDKMAN</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s <span class="string">"https://get.sdkman.io"</span> | bash</span><br><span class="line">$ <span class="built_in">source</span> <span class="string">"<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span></span><br></pre></td></tr></table></figure><p>init を叩かないと <code>sdk</code> コマンドのパスが通らないため、 <code>~/.bash_profile</code> に以下をいれておく。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br></pre></td></tr></table></figure><h1 id="各ツールの導入">各ツールの導入</h1><p>USAGE は以下。<br>ツール名を「 xxxx 」とする。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sdk <span class="built_in">help</span>                     <span class="comment"># help を表示</span></span><br><span class="line">$ sdk version                  <span class="comment"># SDKMAN 自体のバージョン</span></span><br><span class="line">$ sdk selfupdate force         <span class="comment"># SDKMAN 自体のバージョンアップ</span></span><br><span class="line">$ sdk install xxxx             <span class="comment"># xxxx をインストール</span></span><br><span class="line">$ sdk install xxxx [version]   <span class="comment"># xxxx を version 指定でインストール</span></span><br><span class="line">$ sdk uninstall xxxx [version] <span class="comment"># xxxx を version 指定でアンインストール</span></span><br><span class="line">$ sdk list xxxx                <span class="comment"># xxxx の version の一覧を表示</span></span><br><span class="line">$ sdk use xxxx [version]       <span class="comment"># xxxx の現ターミナルの version を指定</span></span><br><span class="line">$ sdk default xxxx [version]   <span class="comment"># xxxx のデフォルトの version を指定</span></span><br><span class="line">$ sdk current xxxx             <span class="comment"># xxxx の現在の version を表示</span></span><br></pre></td></tr></table></figure><p><a href="http://sdkman.io/usage.html" target="_blank" rel="noopener">公式</a></p><h2 id="java">Java</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sdk install java</span><br><span class="line">$ sdk list java</span><br><span class="line">==========================</span><br><span class="line">Available Java Versions</span><br><span class="line">==========================</span><br><span class="line">     9.0.1-zulu</span><br><span class="line">     9.0.1-oracle</span><br><span class="line">     9.0.0-zulu</span><br><span class="line"> &gt; * 8u152-zulu</span><br><span class="line">     8u151-oracle</span><br><span class="line">     8u144-zulu</span><br><span class="line">     8u131-zulu</span><br><span class="line">     7u141-zulu</span><br><span class="line">     6u65-apple</span><br><span class="line">==========================</span><br><span class="line">+ - <span class="built_in">local</span> version</span><br><span class="line">* - installed</span><br><span class="line">&gt; - currently <span class="keyword">in</span> use</span><br><span class="line">==========================</span><br><span class="line">$ sdk install java 8u151-oracle</span><br><span class="line">$ sdk default java 8u151-oracle</span><br></pre></td></tr></table></figure><p><code>-zulu</code> は OpenJDK 、 <code>-oracle</code> は Oracle Java を指す。<br><code>/usr/libexec/java_home</code> もちゃんと有効だった。</p><h2 id="maven">Maven</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sdk install maven 3.5.2</span><br><span class="line">$ sdk list maven</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 系の anyenv 、 &lt;a href=&quot;http://sdkman.io/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SDKMAN&lt;/a&gt; をさわってみる。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://pepese.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://pepese.github.io/tags/Maven/"/>
    
      <category term="SDKMAN" scheme="https://pepese.github.io/tags/SDKMAN/"/>
    
      <category term="Gradle" scheme="https://pepese.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Heroku入門</title>
    <link href="https://pepese.github.io/blog/heroku-basics/"/>
    <id>https://pepese.github.io/blog/heroku-basics/</id>
    <published>2017-12-07T09:54:42.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Heroku は salesforce が運営する PaaS 。<br>Free プランではクレカ登録無しで月に 550 dyno hours （約 23 日分、 1 ヶ月分無い）、クレカ登録すると月に 1000 dyno hours を無料で利用できる。<br>Free プランの落とし穴は、 30 分アクセスが無いとインスタンス（ dyno ）が Sleep してしまうところ。　　 以下、 Free プランでアカウントを取得している前提で記載する。</p><a id="more"></a><h1 id="heroku-cli">Heroku CLI</h1><p>Heroku の Web ページで各種設定できるが、ここでは CLI ベースの方法を記載する。</p><h2 id="インストール">インストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install heroku/brew/heroku</span><br></pre></td></tr></table></figure><p><a href="https://devcenter.heroku.com/articles/heroku-cli#troubleshooting" target="_blank" rel="noopener">Trouble Shooting</a><br><a href="https://devcenter.heroku.com/articles/heroku-cli#uninstalling-the-heroku-cli" target="_blank" rel="noopener">Uninstalling</a></p><h2 id="初期起動">初期起動</h2><p>以下の手順で Heroku へアプリケーションをデプロイ・起動する。<br>なお、 <code>/path/to/myApp</code> は Heroku が対応している言語で実装されたローカルのアプリケーションプロジェクトをさす。<br>また、 Heroku へのアプリケーションのデプロイは Git 経由で行われる。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ heroku login <span class="comment"># Heroku にログイン</span></span><br><span class="line">$ <span class="built_in">cd</span> /path/to/myApp</span><br><span class="line">$ heroku create <span class="comment"># Heroku 上に新しいアプリケーションを作成</span></span><br><span class="line">Creating app... <span class="keyword">done</span>, ⬢ shielded-scrubland-xxxxx</span><br><span class="line">https://shielded-scrubland-xxxxx.herokuapp.com/ | https://git.heroku.com/shielded-scrubland-xxxxx.git</span><br><span class="line">$ git init <span class="comment"># アプリケーションプロジェクトの Git 初期化</span></span><br><span class="line">$ git remote add heroku https://git.heroku.com/shielded-scrubland-xxxxx.git</span><br><span class="line">$ git add --all</span><br><span class="line">$ git commit -m <span class="string">"first commit"</span></span><br><span class="line">$ git push heroku master <span class="comment"># Heroku へアプリケーションをデプロイ</span></span><br><span class="line">$ heroku open <span class="comment"># ブラウザを立ち上げてページを表示</span></span><br><span class="line">$ heroku <span class="built_in">help</span> <span class="comment"># USAGE</span></span><br><span class="line">$ heroku apps <span class="built_in">help</span> <span class="comment"># apps の USAGE</span></span><br></pre></td></tr></table></figure><h2 id="アドオン">アドオン</h2><p>アドオンを CLI から適用する方法は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku addons:create xxxx</span><br></pre></td></tr></table></figure><h2 id="プロセスの確認停止">プロセスの確認、停止</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ heroku apps:info <span class="comment"># アプリケーションの情報を見る</span></span><br><span class="line">$ heroku ps <span class="comment"># プロセスを見る</span></span><br><span class="line">$ heroku logs <span class="comment"># ログを見る</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku ps:scale web=0 <span class="comment"># 停止</span></span><br><span class="line">$ heroku ps:scale web=1 <span class="comment"># 起動</span></span><br></pre></td></tr></table></figure><p>Webプロセスのスケール（Dyno、インスタンス台数）を 0 に指定して実質プロセスを停止している。</p><h1 id="小ネタめも">小ネタめも</h1><h2 id="node.js-アプリケーション">node.js アプリケーション</h2><p><code>$ heroku open</code> でエラーが発生した場合は以下に対応。</p><ul><li>npm script に <strong>start</strong> を追加する<ul><li><code>"start": "node app/app.js"</code></li></ul></li></ul><p>Heroku ではアプリケーションの起動方法に各プログラミング言語毎にルールがあるので注意。</p><h2 id="つのアプリケーションを複数のheroku環境へデプロイ">１つのアプリケーションを複数のHeroku環境へデプロイ</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku create アプリ名 --remote 新環境名</span><br><span class="line">$ git push 新環境名 master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Heroku は salesforce が運営する PaaS 。&lt;br&gt;
Free プランではクレカ登録無しで月に 550 dyno hours （約 23 日分、 1 ヶ月分無い）、クレカ登録すると月に 1000 dyno hours を無料で利用できる。&lt;br&gt;
Free プランの落とし穴は、 30 分アクセスが無いとインスタンス（ dyno ）が Sleep してしまうところ。　　 以下、 Free プランでアカウントを取得している前提で記載する。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Heroku" scheme="https://pepese.github.io/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>Virtualenv入門</title>
    <link href="https://pepese.github.io/blog/virtualenv-basics/"/>
    <id>https://pepese.github.io/blog/virtualenv-basics/</id>
    <published>2017-12-07T09:42:57.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="noopener">Virtualenv</a> についてかるくまとめる。<br>以下の記事を読んで pyenv を導入済みである前提で記載する。</p><ul><li><a href="https://pepese.github.io/blog/anyenv/">すべての**envを管理するanyenv</a></li></ul><a id="more"></a><h1 id="はじめに">はじめに</h1><p>ややこしい他ツールがあるので少しまとめる。</p><ul><li>pyenv-virtualenv<ul><li>pyenv で導入した各 Python の site-packages を管理するツール</li><li>Virtualenv とは全く別物</li></ul></li><li>Virtualenv<ul><li>Python で作成する各プロジェクト毎のモジュール・ライブラリのバージョンを管理するツール<ul><li>厳密に言うと、プロジェクト毎というか、環境のみをそれぞれ作成・管理できる感じ</li></ul></li><li>今回のターゲット</li></ul></li><li>venv<ul><li>Virtualenv とほぼ同じ機能</li><li>Virtualenv の方がデファクトの模様</li><li>Virtualenv が Python 2 系 3 系両方に対応しているのにたいして venv は 3 系対象</li></ul></li><li>virtualenvwapper<ul><li>Virtualenv のラッパー</li><li>今回は使わない</li></ul></li></ul><h1 id="環境設定">環境設定</h1><h2 id="pip-の更新と確認">pip の更新と確認</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br><span class="line">$ pip list --format=columns</span><br></pre></td></tr></table></figure><h2 id="virtualenv-のインストールと使い方">Virtualenv のインストールと使い方</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenv</span><br><span class="line">$ <span class="built_in">cd</span> /path/to/project</span><br><span class="line">$ virtualenv .virtualenv <span class="comment"># .virtualenv という名前でディレクトリができる</span></span><br><span class="line">$ <span class="built_in">source</span> .virtualenv/bin/activate <span class="comment"># これで .virtualenv の環境になる</span></span><br><span class="line">(.virtualenv) $ <span class="comment"># いつも通り pip で欲しいモジュールを導入・削除・更新する</span></span><br><span class="line">(.virtualenv) $ deactivate <span class="comment"># 環境をぬける</span></span><br></pre></td></tr></table></figure><p>Windows の場合は <code>.virtualenv\Scripts\activate</code> が環境実行用のスクリプト。<br><code>.virtualenv</code> ディレクトリを削除するば、環境が削除される。<br>gemfile とか package.json みたいなファイルベースではなく、環境を切り替える使い方。</p><h1 id="virtualenv-を使わない環境共有方法">Virtualenv を使わない環境共有方法</h1><p>Virtualenv など Python エコシステムを利用するとバージョン管理システムなどでプロジェクトを共有する際、モジュール・ライブラリのバージョンを共有しにくい印象。</p><h2 id="requirements.txt">requirements.txt</h2><p><code>requirements.txt</code> というファイル（名前は任意）に現在の <code>pip</code> でのインストール状況を出力する方法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br><span class="line">$ cat requirements.txt</span><br><span class="line">aniso8601==1.3.0</span><br><span class="line">appnope==0.1.0</span><br><span class="line">bleach==1.5.0</span><br><span class="line">certifi==2017.7.27.1</span><br><span class="line"><span class="comment"># (省略)</span></span><br></pre></td></tr></table></figure><p>残された <code>requirements.txt</code> を使って以下のようにインストールする。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  pip install -r requieremnts.txt</span><br></pre></td></tr></table></figure><p>その他実践的な方法は以下を参照。<br><a href="https://qiita.com/zakuro9715/items/68c8d8c6b1b05f91fa2e" target="_blank" rel="noopener">Python アプリ依存パッケージ管理 ベストプラクティス集</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://virtualenv.pypa.io/en/stable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Virtualenv&lt;/a&gt; についてかるくまとめる。&lt;br&gt;
以下の記事を読んで pyenv を導入済みである前提で記載する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/anyenv/&quot;&gt;すべての**envを管理するanyenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Virtualenv" scheme="https://pepese.github.io/tags/Virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>Pythonで機械学習 レコメンド編</title>
    <link href="https://pepese.github.io/blog/python-ml-recommendation/"/>
    <id>https://pepese.github.io/blog/python-ml-recommendation/</id>
    <published>2017-11-26T08:19:16.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>代表的なレコメンドアルゴリズムと Python での実装をまとめる。<br>スクラッチではなく、できるだけライブラリ（ <a href="http://surpriselib.com/" target="_blank" rel="noopener">scikit-surprise</a> ）を利用する。</p><a id="more"></a><h1 id="レコメンドアルゴリズム">レコメンドアルゴリズム</h1><ul><li>ポピュラリティ<ul><li>所謂人気ランキング</li></ul></li><li>コンテンツベース（内容ベース）フィルタリング<ul><li>アイテム間の類似度に基づいたレコメンド<ul><li>アイテムの特徴ベクトルで類似度（ Cos 類似度など）ソートしてレコメンドする方法</li><li>例：野球のバットを買った人には野球のボールをおすすめしよう</li></ul></li><li><a href="http://ohke.hateblo.jp/entry/2017/10/13/230000" target="_blank" rel="noopener">参考</a></li></ul></li><li>協調フィルタリング<ul><li>ユーザの利用履歴を扱う</li><li>トランザクションデータ、ユーザ・アイテム行列</li></ul></li><li>上記のハイブリッド</li></ul><p>ここでは <strong>協調フィルタリング</strong> を扱う。</p><p><a href="http://www.kamishima.net/archive/recsysdoc.pdf" target="_blank" rel="noopener">参考：推薦システムのアルゴリズム</a></p><p>レコメンドアルゴリズムでよく発生するネガティブが出来事は以下。</p><ul><li>同じようなアイテムばかりレコメンドされる</li><li>人気のアイテム、長期間掲載しているアイテムばかりレコメンドされる</li><li>数年に一度しか購入しない物に対するレコメンド結果がずっと表示される</li><li>ユーザー行動履歴が十分に蓄積されていないと精度がでない</li><li>データの管理コストがでかい</li><li>レコメンドの計算コストがでかい</li></ul><h2 id="協調フィルタリング">協調フィルタリング</h2><p>協調フィルタリングには主に以下の種類がある。</p><ul><li>メモリベース（近傍ベース）<ul><li>ユーザ・アイテム行列をそのまま利用、モデルを作成しない</li><li>類似度の高いユーザ、アイテムを集め、実際の値と類似度の <strong>加重平均</strong> で評価値を算出する</li><li>以下の手法がある<ul><li>ユーザベース</li><li>アイテムベース</li></ul></li><li>スパース性（データサイズに対して意味のある情報が少ない、 0 が多い行列）の高いデータには適用し辛い</li></ul></li><li>モデルベース<ul><li>事前に調べておいたデータの規則性を使って予測</li><li>ユーザ・アイテム行列をモデル構築に利用</li><li>モデルの種類には以下がある。<ul><li>行列因子分解（Matrix Factorization）モデル<ul><li>ユーザ・アイテム行列をユーザ行列（user × k）とアイテム行列（item × k）に分解する際、既に値があるセルの値の誤差が最小になるようにする<ul><li>分解した後の行列の積をとって元に戻した際、値の入っていなかったセルに値が入っており、その値を評価値とする</li></ul></li><li>特異値分解（SVD：Singular Value Decomposition）</li><li>非負値行列因子分解（NMF：Non-negative Matrix Factorization）<ul><li>SVDと異なり、分解した行列の要素が全て正の数</li><li>交互最小二乗法（ALS：Alternative Least Squares）や確率的勾配降下法（SGD：Stochastic Gradient Descent）を用いて実施</li></ul></li></ul></li><li>クラスタモデル<ul><li>嗜好が類似した利用者のグループごとに推薦をする</li></ul></li><li>関数モデル<ul><li>利用者の嗜好パターンから，アイテムの評価値を予測する関数</li></ul></li><li>確率モデル<ul><li>行動分布型：どの利用者が，どのアイテムを，どう評価したかの分布をモデル化</li><li>評価分布型：全アイテムに対する評価値の同時分布をモデル化</li><li>ナイーブベイズ、ベイジアンネットワークなど</li></ul></li><li>時系列モデル<ul><li>マルコフ過程：アイテムを評価した時間的順序も考慮</li><li>マルコフ決定過程(MDP：Markov Decision Process)：加えて，利用者の行動もモデル化</li></ul></li></ul></li></ul></li><li>上記のハイブリッド</li></ul><p>狭義の協調フィルタリングは、近傍ベースを指す。</p><h3 id="メモリベース協調フィルタリング">メモリベース協調フィルタリング</h3><p>メモリベース協調フィルタリングのコンセプトは、「類似度」。<br>過去の利用履歴から似たもの同士を明らかにし、この類似度を使ってオススメ商品を推定する。<br>類似度といった場合、ユーザ同士の類似度と商品同士の類似度の 2 つが考えられ、前者を使う場合をユーザベース、後者をアイテムベースと言って区別する。</p><ul><li>ユーザベース<ul><li>ユーザーの行動履歴からユーザー間の類似度を計算し、おすすめするアイテムを決める手法</li><li>例<ul><li>Aさんに何かおすすめしたい、Aさんは商品a、商品b、商品cを買っている。</li><li>同じような行動履歴のBさんは商品a、商品b、商品c、商品dを買っている、ということはAさんには商品dをおすすめできる</li></ul></li></ul></li><li>アイテムベース<ul><li>ユーザーの行動履歴からアイテム間の類似度を計算し、類似するアイテムをおすすめする手法</li><li>例<ul><li>商品Aは商品Bと一緒に購入されることが多いから、商品Aの購入者に商品Bをおすすめしよう</li></ul></li></ul></li></ul><h4 id="ユーザベース">ユーザベース</h4><p>ユーザベース協調フィルタリングのロジックは、いわゆるkNN回帰という機械学習手法を利用する。<br>kNN（k-Nearest-Neighbor、<strong>k近傍法</strong> ）を簡単に説明すると、推定する対象に最も特徴が似ているk個の観測値を参考にし、値を推定しようというもの。<br>アルゴリズムの概要は以下の通り。</p><ol type="1"><li>あるユーザと他のユーザの <strong>類似度</strong> を計算</li><li>レコメンドしたい対象ユーザ（ユーザ A ）と類似度の高い k 名のユーザを選ぶ</li><li>他のユーザ利用したアイテムのうち、ユーザAがまだ利用していないアイテムの集合を抽出</li><li>それらのアイテム群のうち、おすすめ度が高いアイテムのリストを返却<ul><li>この選定の際に、類似度が高いユーザが利用したアイテムほど重みが高くなるようにする</li></ul></li></ol><h4 id="アイテムベース">アイテムベース</h4><p>ユーザベースはユーザ同士の類似度を考えたのに対して、アイテムベースはアイテム同士の類似度を考える。<br>それ以外の考え方はユーザベースに同じ。</p><h4 id="用いられる類似度">用いられる類似度</h4><p>類似度には以下のようなものがある。</p><ul><li>ユークリッド距離（ Euclidean distance ）<ul><li>平方ユークリッド距離（ Squared Euclidean distance ）</li><li>2 点間の普通の距離</li></ul></li><li>コサイン類似度（ Cosine Similarity ）</li><li>ピアソンの積率相関係数（ Pearson correlation coefficient ）<ul><li>ユーザの評価をそのユーザの評価全体の平均を用いて正規化する</li><li>データが正規化されていないような状況でユークリッド距離よりも良い結果を得られることが多いとされる</li></ul></li></ul><p>ユーザベースでは、 <strong>ピアソンの積率相関係数</strong> を用いる。<br>そうすることによって以下のように評価の傾向が似ている 2 ユーザ間で高い相関を得られる。</p><ul><li>ユーザ A ：「ラーメンはまずまずで 3 点だがカレーとチャーハンはイマイチだから 1.5 点だな……。」</li><li>ユーザ B ：「ラーメンはうまくて 5 点だがカレーとチャーハンはふつうで 3.5 点だな……。」</li></ul><p>また、アイテムベースでは <strong>コサイン類似度</strong> がよく用いられる。</p><h1 id="実装">実装</h1><p>scikit-surprise ベースで実装する。</p><h2 id="環境設定">環境設定</h2><p>環境設定は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 3.6.1</span><br><span class="line">$ pip -V</span><br><span class="line">pip 9.0.1</span><br><span class="line">$ pip install jupyter scikit-learn matplotlib scipy numpy scikit-surprise</span><br><span class="line">$ pip freeze | grep scikit-surprise</span><br><span class="line">scikit-surprise==1.0.5</span><br></pre></td></tr></table></figure><h2 id="データセット">データセット</h2><p>データセットには <a href="http://www.kamishima.net/sushi/" target="_blank" rel="noopener">SUSHI Preference Data Sets</a> を使用する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www.kamishima.net/asset/sushi3-2016.zip</span><br><span class="line">$ unzip sushi3-2016.zip</span><br><span class="line">$ rm sushi3-2016.zip</span><br><span class="line">$ ls ./sushi3-2016/</span><br><span class="line">README-en.txt</span><br><span class="line">sushi3.idata</span><br><span class="line">sushi3b.5000.10.order</span><br><span class="line">README-ja.txt</span><br><span class="line">sushi3.udata</span><br><span class="line">sushi3b.5000.10.score</span><br><span class="line">README-stat-ja.txt</span><br><span class="line">sushi3a.5000.10.order</span><br></pre></td></tr></table></figure><p><code>sushi3b.5000.10.score</code> は 5000 行 100 列( 5000 人 × 寿司ネタ 100 種類)の構成となっており、各要素には評価値 0 〜 4 (値が大きいほど、好き)と、欠測値 -1 がセットされている。</p><h2 id="データのロード">データのロード</h2><p>scikit-surprise でデータをロードするには、 <code>Dataset</code> クラスに対応した形式にする必要がある。<br>形式は <strong>1行1評価値</strong> で、以下のようにする。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ユーザID アイテムID 評価値</span><br></pre></td></tr></table></figure><p><code>sushi3b.5000.10.score</code> を上記の形式に変換・Dataset形式でロードするコードは以下。<br>なお、ユーザ ID は 0000 〜 4999 、アイテム ID は 00 〜 99 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(input_file_name)</span>:</span></span><br><span class="line">    <span class="comment"># 返還後のファイル名</span></span><br><span class="line">    output_file_name = input_file_name + <span class="string">'_converted'</span></span><br><span class="line">    output = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(input_file_name, mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        user_id = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            words = line.strip().split(<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">for</span> item_id, word <span class="keyword">in</span> enumerate(words):</span><br><span class="line">                score = int(word)</span><br><span class="line">                <span class="keyword">if</span> score != <span class="number">-1</span>:</span><br><span class="line">                    output += <span class="string">'&#123;0:04d&#125; &#123;1:02d&#125; &#123;2:01d&#125;\n'</span>.format(user_id, item_id, score)</span><br><span class="line">            user_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(output_file_name, mode=<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output_file_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 「ユーザID アイテムID 評価値」形式にデータファイルを変換</span></span><br><span class="line">output_file_name = convert(<span class="string">'sushi3-2016/sushi3b.5000.10.score'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(output_file_name, mode='r') as f:</span></span><br><span class="line"><span class="comment">#     print(f.read())</span></span><br></pre></td></tr></table></figure><p>データフォーマットを変換した後、以下のように <code>Dataset</code> 形式でデータをロードし、 <code>trainset</code> を作成する。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> Reader, Dataset</span><br><span class="line"></span><br><span class="line"><span class="comment"># ファイルからデータをロードし、Dataset形式に</span></span><br><span class="line"><span class="comment"># dataset.raw_ratings にデータが格納される</span></span><br><span class="line">dataset = Dataset.load_from_file(output_file_name, reader=reader)</span><br><span class="line"><span class="comment"># dataset を計算し、trainset 形式に</span></span><br><span class="line">trainset = dataset.build_full_trainset()</span><br></pre></td></tr></table></figure><p><code>dataset</code> から <code>trainset</code> へ変換される際、元の <code>user_id</code> <code>item_id</code> から読み込んだ順に 0 からインクリメントされた内部 ID へ変換される。</p><p><code>dataset</code> には以下のようなフィールドがある。（面倒なので説明は一部のみ）</p><ul><li>build_full_trainset</li><li>construct_testset</li><li>construct_trainset</li><li>folds</li><li>load_builtin : scikit-surprise が準備しているデータセットの読み込み</li><li>load_from_df : DataFrame 形式のデータを Dataset 形式へ変換するメソッド</li><li>load_from_file : ファイルからデータをロードし、 Dataset 形式へ変換するメソッド</li><li>load_from_folds : ファイルからデータをロードし、 Dataset 形式へ変換するメソッド（クロスバリデーションなどで利用）</li><li>n_folds</li><li>ratings_file</li><li>raw_folds</li><li>raw_ratings : <code>ユーザID アイテムID 評価値 None</code> 形式のデータ</li><li>read_ratings</li><li>reader</li><li>shuffle</li><li>split</li></ul><p><code>trainset</code> には以下のようなフィールドがある。（面倒なので説明は一部のみ）</p><ul><li>all_items : n_items の range を返却するメソッド</li><li>all_ratings</li><li>all_users</li><li>build_anti_testset</li><li>build_testset</li><li>global_mean : 評価値の平均（ <code>_global_mean</code> ）を計算するメソッド</li><li>ir : ユーザ ID をインデクスとした各アイテムの評価値のタプル</li><li>knows_item</li><li>knows_user</li><li>n_items : アイテム数</li><li>n_ratings : 評価数（ユーザ数 x アイテム数、欠損は考えられていない）</li><li>n_users : ユーザ数</li><li>offset</li><li>rating_scale</li><li>to_inner_iid : 元の <code>item_id</code> を入力すると <code>trainset</code> 内部管理の ID を返却する</li><li>to_inner_uid：元の <code>user_id</code> を入力すると <code>trainset</code> 内部管理の ID を返却する</li><li>to_raw_iid： <code>trainset</code> 内部管理の ID を入力すると元の <code>item_id</code> を返却する</li><li>to_raw_uid： <code>trainset</code> 内部管理の ID を入力すると元の <code>user_id</code> を返却する</li><li>ur : アイテム ID をインデクスとした各ユーザの評価値のタプル</li></ul><h2 id="協調フィルタリング-1">協調フィルタリング</h2><p>scikit-surprise で実装できるアルゴリズムの一覧は <a href="http://surprise.readthedocs.io/en/stable/prediction_algorithms_package.html" target="_blank" rel="noopener">ここ</a> 。</p><p>scikit-surprise の各アルゴリズムのクラスは <code>AlgoBase</code> クラスを継承して作成されている。<br>このクラスには、 <code>compute_similarities</code> や <code>algo.train(trainset)</code> など全てのアルゴリズムで共通して利用される実装されている。<br><code>sim_options</code> オプションを利用することで、類似度の計算方法（ cosine 、 msd 、 pearson 、 pearson_baseline ）やユーザベースかアイテムベース（ user_based ）などを指定することができる。</p><h3 id="メモリベース協調フィルタリング-1">メモリベース協調フィルタリング</h3><p>以下のような形で各アルゴリズムの学習を実行する。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> KNNBasic</span><br><span class="line"></span><br><span class="line">sim_options = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'pearson'</span>, <span class="comment"># 類似度を計算する方法を指定（ cosine,msd,pearson,pearson_baseline ）</span></span><br><span class="line">    <span class="string">'user_based'</span>: <span class="keyword">True</span> <span class="comment"># False にするとアイテムベースに</span></span><br><span class="line">&#125;</span><br><span class="line">algo = KNNBasic(k=<span class="number">5</span>, min_k=<span class="number">1</span>,sim_options=sim_options)</span><br><span class="line">algo.fit(trainset)</span><br></pre></td></tr></table></figure><p>上記で、 <strong>k近傍法</strong> の学習が完了する。<br><code>algo.compute_similarities()</code> を実行するとユーザ間の類似度を計算してくれ、「ユーザ数 x ユーザ数」の 2 次元配列を返却する。<br>なお、 <code>algo.train</code> を実行すると内部で <code>algo.compute_similarities()</code> が実行されており、その後 <code>algo.sim</code> で「ユーザ数 x ユーザ数」の 2 次元配列でユーザ間の類似度を取得できる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(train.sim)</span><br></pre></td></tr></table></figure><p>また、以下のように学習後のモデルを使用して評価の予測値を取得できる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_id = <span class="string">'&#123;:04d&#125;'</span>.format(<span class="number">0</span>)</span><br><span class="line">item_id = <span class="string">'&#123;:02d&#125;'</span>.format(<span class="number">92</span>)</span><br><span class="line"></span><br><span class="line">pred = algo.predict(uid=user_id, iid=item_id)</span><br><span class="line">print(<span class="string">'Predicted rating(User: &#123;0&#125;, Item: &#123;1&#125;): &#123;2:.2f&#125;'</span>.format(pred.uid, pred.iid, pred.est))</span><br></pre></td></tr></table></figure><p>スクラッチでの実装例は以下。</p><ul><li>ユーザベース<ul><li>http://ohke.hateblo.jp/entry/2017/09/22/230000</li><li>https://qiita.com/hik0107/items/96c483afd6fb2f077985</li></ul></li><li>アイテムベース<ul><li>http://ohke.hateblo.jp/entry/2017/09/29/230000</li><li>https://qiita.com/kotaroito/items/6acb58bb16b68a460af9</li></ul></li></ul><h3 id="モデルベース協調フィルタリング">モデルベース協調フィルタリング</h3><h4 id="特異値分解-svd">特異値分解（ SVD ）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> SVD</span><br><span class="line"></span><br><span class="line">algo = SVD()</span><br><span class="line">algo.fit(trainset)</span><br></pre></td></tr></table></figure><h2 id="精度評価">精度評価</h2><p>精度の評価には以下のものがある。</p><ul><li>MAE（Mean Abusolute Error）<ul><li>予測値と実測値の差の絶対値を算出し、平均したもの</li></ul></li><li>MSE (Mean Squared Error)<ul><li>予測値と実測値の差を二乗した値の平均値</li></ul></li><li>RMSE（Root Mean Squared Error）<ul><li>MSEの平方根</li></ul></li></ul><h1 id="参考">参考</h1><ul><li><a href="http://ohke.hateblo.jp/entry/2017/10/06/230000" target="_blank" rel="noopener">scikit-surpriseを使ってレコメンドする</a></li><li><a href="http://www.kamishima.net/archive/recsys.pdf" target="_blank" rel="noopener">推薦システム</a><ul><li>P.134：協調フィルタリング、メモリベースのチューニングのヒント</li><li>p.137：モデルベースの種類</li><li>P.215：ショートヘッド、ロングテールについて</li></ul></li><li>精度評価<ul><li><a href="http://blog.brainpad.co.jp/entry/2017/08/25/140000" target="_blank" rel="noopener">レコメンドつれづれ ～第3回 レコメンド精度の評価方法を学ぶ～</a></li><li><a href="https://www.slideshare.net/MasahiroSato2/ss-65646039" target="_blank" rel="noopener">レコメンド研究のあれこれ</a></li><li><a href="https://www.slideshare.net/takemikami/ss-76817490" target="_blank" rel="noopener">レコメンドアルゴリズムの基本と周辺知識と実装方法</a></li><li><a href="https://datahotel.io/archives/4778" target="_blank" rel="noopener">推薦システムの基本的な評価指標について整理してみた</a></li><li><a href="https://ameblo.jp/principia-ca/entry-10980281840.html" target="_blank" rel="noopener">MatrixFacorization を使った評価予測</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代表的なレコメンドアルゴリズムと Python での実装をまとめる。&lt;br&gt;
スクラッチではなく、できるだけライブラリ（ &lt;a href=&quot;http://surpriselib.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;scikit-surprise&lt;/a&gt; ）を利用する。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Machine Learning" scheme="https://pepese.github.io/tags/Machine-Learning/"/>
    
      <category term="scikit-surprise" scheme="https://pepese.github.io/tags/scikit-surprise/"/>
    
      <category term="Collaborative filtering" scheme="https://pepese.github.io/tags/Collaborative-filtering/"/>
    
      <category term="協調フィルタリング" scheme="https://pepese.github.io/tags/%E5%8D%94%E8%AA%BF%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>LINEチャットボットをFlaskとngrokで</title>
    <link href="https://pepese.github.io/blog/flask-ngrok-chatbot/"/>
    <id>https://pepese.github.io/blog/flask-ngrok-chatbot/</id>
    <published>2017-11-01T03:31:28.000Z</published>
    <updated>2019-02-05T00:10:46.571Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> と <a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a> でメッセージをオウム返しする LINE のチャットボットを作ってみた。<br>Heroku で公開したい場合は以下参照。</p><ul><li><a href="https://pepese.github.io/blog/heroku-basics/">Heroku入門</a></li></ul><a id="more"></a><h1 id="セットアップ">セットアップ</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install Flask gunicorn line-bot-sdk</span><br><span class="line">$ brew cask install ngrok</span><br></pre></td></tr></table></figure><h1 id="ソースコード">ソースコード</h1><p>app.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> linebot <span class="keyword">import</span> LineBotApi, WebhookHandler</span><br><span class="line"><span class="keyword">from</span> linebot.exceptions <span class="keyword">import</span> InvalidSignatureError</span><br><span class="line"><span class="keyword">from</span> linebot.models <span class="keyword">import</span> MessageEvent, TextMessage, TextSendMessage</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">line_bot_api = LineBotApi(<span class="string">'アクセストークン'</span>)</span><br><span class="line">handler = WebhookHandler(<span class="string">'Channel Secret'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/webhook", methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">webhook</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># get X-Line-Signature header value</span></span><br><span class="line">    signature = request.headers[<span class="string">'X-Line-Signature'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get request body as text</span></span><br><span class="line">    body = request.get_data(as_text=<span class="keyword">True</span>)</span><br><span class="line">    app.logger.info(<span class="string">"Request body: "</span> + body)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># handle webhook body</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        handler.handle(body, signature)</span><br><span class="line">    <span class="keyword">except</span> InvalidSignatureError:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'OK'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@handler.add(MessageEvent, message=TextMessage)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_message</span><span class="params">(event)</span>:</span></span><br><span class="line">    line_bot_api.reply_message(</span><br><span class="line">        event.reply_token,</span><br><span class="line">        TextSendMessage(text=event.message.text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>Procfile <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: gunicorn -b 0.0.0.0:$PORT app:app --log-file=-</span><br></pre></td></tr></table></figure></p><p>requirements.txt <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flask==0.12.2</span><br><span class="line">gunicorn==19.7.1</span><br><span class="line">line-bot-sdk==1.5.0</span><br></pre></td></tr></table></figure></p><p>runtime.txt <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python-3.6.2</span><br></pre></td></tr></table></figure></p><h1 id="起動">起動</h1><h2 id="ローカルでap起動">ローカルでAP起動</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ FLASK_APP=app.py flask run</span><br><span class="line"> * Serving Flask app <span class="string">"app"</span></span><br><span class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><h2 id="ngrokで公開">ngrokで公開</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ngrok http 5000</span><br><span class="line">ngrok by @inconshreveable                                       (Ctrl+C to quit)</span><br><span class="line"></span><br><span class="line">Session Status                online                                            </span><br><span class="line">Version                       2.2.8                                             </span><br><span class="line">Region                        United States (us)                                </span><br><span class="line">Web Interface                 http://127.0.0.1:4040                             </span><br><span class="line">Forwarding                    http://8eeb5441.ngrok.io -&gt; localhost:5000        </span><br><span class="line">Forwarding                    https://8eeb5441.ngrok.io -&gt; localhost:5000       </span><br><span class="line"></span><br><span class="line">Connections                   ttl     opn     rt1     rt5     p50     p90       </span><br><span class="line">                              2       0       0.02    0.01    0.01    0.01      </span><br><span class="line"></span><br><span class="line">HTTP Requests                                                                   </span><br><span class="line">-------------                                                                   </span><br><span class="line"></span><br><span class="line">GET /favicon.ico               404 NOT FOUND                                    </span><br><span class="line">GET /                          200 OK</span><br></pre></td></tr></table></figure><p>なお好きなホスト名をつけたい場合は、ngrokの有料サービスを利用する必要がある模様。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flask&lt;/a&gt; と &lt;a href=&quot;https://ngrok.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ngrok&lt;/a&gt; でメッセージをオウム返しする LINE のチャットボットを作ってみた。&lt;br&gt;
Heroku で公開したい場合は以下参照。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/heroku-basics/&quot;&gt;Heroku入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="https://pepese.github.io/tags/Flask/"/>
    
      <category term="ngrok" scheme="https://pepese.github.io/tags/ngrok/"/>
    
      <category term="chatbot" scheme="https://pepese.github.io/tags/chatbot/"/>
    
      <category term="LINE" scheme="https://pepese.github.io/tags/LINE/"/>
    
  </entry>
  
  <entry>
    <title>Node.js/Express/Multerでファイルアップロード・ダウンロード</title>
    <link href="https://pepese.github.io/blog/express-multer-fileupload/"/>
    <id>https://pepese.github.io/blog/express-multer-fileupload/</id>
    <published>2017-09-20T23:17:44.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js/Expressアプリケーションへファイルアップロードしてみる。<br>使用するツール・ライブラリは以下。</p><ul><li><a href="https://github.com/expressjs/multer" target="_blank" rel="noopener">Multer</a></li></ul><p>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/express-basics/">Express入門</a></li></ul><a id="more"></a><h1 id="環境設定">環境設定</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add multer</span><br></pre></td></tr></table></figure><h1 id="実装">実装</h1><p>controller 層へ以下のような実装を行う。</p><h2 id="ファイルアップロード">ファイルアップロード</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multer  = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// アップロードされたファイルをストレージへ保存する場合</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</span><br><span class="line">  <span class="comment">// ファイルの保存先を指定</span></span><br><span class="line">  destination: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">'/tmp'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ファイル名を指定(オリジナルのファイル名を指定)</span></span><br><span class="line">  filename: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, file.originalname);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// アップロードされたファイルを一時的にメモリへ保存する場合</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.memoryStorage();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 つのファイルをアップロードする場合</span></span><br><span class="line"><span class="keyword">const</span> upload_ = multer(&#123; <span class="attr">storage</span>: storage &#125;).single(<span class="string">'qafile'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  upload_(req, res, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> csvData = req.file.buffer;</span><br><span class="line">    <span class="keyword">const</span> mimetype = req.file.mimetype;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> qaData = [];</span><br><span class="line">    <span class="keyword">let</span> errorData = [];</span><br><span class="line">    <span class="keyword">if</span>(mimetype == <span class="string">'text/csv'</span> || mimetype == <span class="string">'application/vnd.ms-excel'</span>) &#123;</span><br><span class="line">      <span class="comment">// 何らかのファイルの処理ロジック</span></span><br><span class="line">      <span class="comment">// テキストファイルであれば `csvData.toString()` してから処理する</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ファイルダウンロード">ファイルダウンロード</h2><p>ダウンロード処理には特別ライブラリは必要ない。<br>CSVなどのテキストデータの場合は以下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">'hoge, hoge, hoge'</span>;</span><br><span class="line">  res.setHeader(<span class="string">'Content-disposition'</span>, <span class="string">'attachment; filename='</span> + <span class="string">'hoge.csv'</span>);</span><br><span class="line">  res.setHeader(<span class="string">'Content-type'</span>, <span class="string">'text/csv; charset=UTF-8'</span>);</span><br><span class="line">  res.write(str);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js/Expressアプリケーションへファイルアップロードしてみる。&lt;br&gt;
使用するツール・ライブラリは以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/expressjs/multer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Multer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事を読んだ前提で書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/express-basics/&quot;&gt;Express入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="yarn" scheme="https://pepese.github.io/tags/yarn/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="Multer" scheme="https://pepese.github.io/tags/Multer/"/>
    
  </entry>
  
  <entry>
    <title>Node.js/ExpressでブラウザからPUT/DELETEリクエストを発行する</title>
    <link href="https://pepese.github.io/blog/express-browser-put-delete-request/"/>
    <id>https://pepese.github.io/blog/express-browser-put-delete-request/</id>
    <published>2017-09-20T12:19:13.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js/Expressアプリケーションに対してブラウザからPUT/DELETEリクエストを発行する方法について記載する。<br>通常、ブラウザからPUT/DELETEリクエストは発行できない。<br>ここで紹介する方法も実際にブラウザからPUT/DELETEリクエストを発行しているのではなく、 <em>Node.js/Express側でPUT/DELETEリクエストとして解釈</em> しているだけ。</p><p>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/express-basics/">Express入門</a></li></ul><a id="more"></a><h1 id="環境設定">環境設定</h1><p>先の記事で紹介したプロジェクトにて以下を実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add method-override</span><br></pre></td></tr></table></figure><h1 id="実装">実装</h1><p>先の記事で紹介したプロジェクトを基準に記載する。</p><p><code>app.js</code> へ以下を加筆する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">app.use(methodOverride(<span class="string">'_method'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br></pre></td></tr></table></figure><p>上記を記載すれば、ブラウザからリクエストを発行する際、 <strong>クエリパラメータ</strong> に <code>_method=PUT</code> や <code>_method=DELETE</code> を記載することによって Node.js/Express 側で PUT/DELETE リクエストとして解釈される。<br>つまり、 <code>express.Router().put()</code> や <code>express.Router().delete()</code> へルーティングされるようになる。<br>ブラウザからのリクエストの発行の例は以下のようになる。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">form(action="/clients?_method=PUT")</span><br><span class="line">  input(type="submit" value="submit")</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a(href="/clients?_method=DELETE")</span><br></pre></td></tr></table></figure><p><code>router.put('/clients', ...</code> や <code>router.delete('/clients', ...</code> を実装すれば、上記のブラウザからのリクエストを処理することができるようになる。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js/Expressアプリケーションに対してブラウザからPUT/DELETEリクエストを発行する方法について記載する。&lt;br&gt;
通常、ブラウザからPUT/DELETEリクエストは発行できない。&lt;br&gt;
ここで紹介する方法も実際にブラウザからPUT/DELETEリクエストを発行しているのではなく、 &lt;em&gt;Node.js/Express側でPUT/DELETEリクエストとして解釈&lt;/em&gt; しているだけ。&lt;/p&gt;
&lt;p&gt;以下の記事を読んだ前提で書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/express-basics/&quot;&gt;Express入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="npm" scheme="https://pepese.github.io/tags/npm/"/>
    
      <category term="Yarn" scheme="https://pepese.github.io/tags/Yarn/"/>
    
  </entry>
  
</feed>
