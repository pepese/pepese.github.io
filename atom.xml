<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ぺーぺーSEのテックブログ</title>
  
  <subtitle>備忘録用メモサイト</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pepese.github.io/"/>
  <updated>2019-02-02T08:49:54.721Z</updated>
  <id>https://pepese.github.io/</id>
  
  <author>
    <name>ぺーぺーSE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang入門</title>
    <link href="https://pepese.github.io/blog/golang-basics/"/>
    <id>https://pepese.github.io/blog/golang-basics/</id>
    <published>2019-02-02T01:54:59.000Z</published>
    <updated>2019-02-02T08:49:54.721Z</updated>
    
    <content type="html"><![CDATA[<p>golang の基本的なところをまとめる。</p><ul><li>環境構築</li><li>基本文法</li></ul><a id="more"></a><h1 id="環境構築">環境構築</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install go</span><br></pre></td></tr></table></figure><h2 id="環境変数の設定">環境変数の設定</h2><p>https://golang.org/doc/install/source#environment</p><ul><li><code>GOROOT</code><ul><li>go のバイナリのホームまでのパス</li><li><code>go env GOROOT</code></li></ul></li><li><code>GOPATH</code><ul><li><code>go env GOPATH</code></li><li>go のパスであってプロジェクトのパスでないことに注意</li><li>プロジェクトのパスは <code>$GOPATH/src/github.com/&lt;Githubアカウント名&gt;/&lt;プロジェクト名&gt;</code></li></ul></li><li><code>GOOS</code><ul><li>コンパイルして作成するバイナリの対象 OS を指定する</li></ul></li><li><code>GOARCH</code><ul><li>コンパイルして作成するバイナリの対象 CPU を指定する</li></ul></li></ul><p><code>.bash_profile</code> に以下を追記。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=`go env GOROOT`</span><br><span class="line">export GOPATH=`go env GOPATH`</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h2 id="依存関係管理ツール-dep">依存関係管理ツール dep</h2><p>ライブラリの依存解決ツールはいくつかあるが、オフィシャル化に近そうなので <code>dep</code> を使用する。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install dep</span><br><span class="line">$ dep <span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="ディレクトリ構造">ディレクトリ構造</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">├─bin/</span><br><span class="line">├─pkg/</span><br><span class="line">│  └─darwin_amd64/</span><br><span class="line">│    ├─github.com/</span><br><span class="line">│    │  └─GitHubアカウント名</span><br><span class="line">│    │    ├─`*.a`ファイル[^1]</span><br><span class="line">│    │    └─GitHubレポジトリ名/`*.a`ファイル[^2]</span><br><span class="line">│    └─pkg.in/</span><br><span class="line">│      ├─パッケージ名/</span><br><span class="line">│      └─`*.a`ファイル</span><br><span class="line">└─src/</span><br><span class="line">  ├─gopkg.in/</span><br><span class="line">  │  └─パッケージ名/</span><br><span class="line">  │    └─LICENSEとか`*.go`とかREADMEとか</span><br><span class="line">  └─github.com/</span><br><span class="line">    ├─GitHubアカウント名</span><br><span class="line">    │  └─GitHubレポジトリ名/</span><br><span class="line">    │    └─LICENSEとか`*.go`とかREADMEとか</span><br><span class="line">    └─&lt;あなたのGitHubユーザ名&gt;</span><br><span class="line">      └─GitHubレポジトリ名/ # プロジェクトディレクトリ（複数）</span><br><span class="line">        ├─glide.yaml</span><br><span class="line">        ├─main.go</span><br><span class="line">        ├─その他、あなたが開発中のソフトウェアのコード</span><br><span class="line">        └─vendor/依存先パッケージのコード(depでとってきたやつ)</span><br></pre></td></tr></table></figure><h2 id="コマンドラインツール">コマンドラインツール</h2><ul><li>goimports<ul><li>過不足のimportの自動補完</li><li><code>go get golang.org/x/tools/cmd/goimports</code></li></ul></li><li>gocode<ul><li>ヘルパー機能</li><li><code>go get -u -v github.com/nsf/gocode</code></li></ul></li><li>godef<ul><li>呼び出し関数へのジャンプなど</li><li><code>go get -u -v github.com/rogpeppe/godef</code></li></ul></li><li>gogetdoc<ul><li><code>go get -u -v github.com/zmb3/gogetdoc</code></li></ul></li><li>golint<ul><li>lint</li><li><code>go get -u -v github.com/golang/lint/golint</code></li></ul></li><li>go-outline<ul><li><code>go get -u -v github.com/lukehoban/go-outline</code></li></ul></li><li>goreturns<ul><li><code>go get -u -v sourcegraph.com/sqs/goreturns</code></li></ul></li><li>gorename<ul><li><code>go get -u -v golang.org/x/tools/cmd/gorename</code></li></ul></li><li>gopkgs<ul><li><code>go get -u -v github.com/tpng/gopkgs</code></li></ul></li><li>go-symbols<ul><li><code>go get -u -v github.com/newhook/go-symbols</code></li></ul></li><li>guru<ul><li><code>go get -u -v golang.org/x/tools/cmd/guru</code></li></ul></li><li>gotests<ul><li><code>go get -u -v github.com/cweill/gotests/...</code></li></ul></li></ul><h2 id="プロジェクトの作成">プロジェクトの作成</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/github.com/&lt;あなたのGithubアカウント名&gt;/&lt;プロジェクト名&gt;</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/&lt;あなたのGithubアカウント名&gt;/&lt;プロジェクト名&gt;</span><br></pre></td></tr></table></figure><p>初回は以下のような感じ。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/github.com/&lt;あなたのGithubアカウント名&gt;</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/&lt;あなたのGithubアカウント名&gt;</span><br><span class="line">$ git <span class="built_in">clone</span> &lt;golangプロジェクト&gt; <span class="comment"># プロジェクトディレクトリの作成</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;golangプロジェクト&gt;</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"vendor/"</span> &gt; .gitignore</span><br><span class="line">$ dep init <span class="comment"># dep の初期化</span></span><br><span class="line">$ touch app.go <span class="comment"># 依存ライブラリ含め好きなコード書く</span></span><br><span class="line">$ dep ensure -v <span class="comment"># 依存ライブラリの解決</span></span><br><span class="line">$ go run app.go</span><br></pre></td></tr></table></figure><h2 id="デバッグ環境作成">デバッグ環境作成</h2><ul><li>デバッガツール delve のインストール<ul><li><code>go get -u github.com/derekparker/delve/cmd/dlv</code></li></ul></li><li>VSCodeにGo言語の拡張機能をインストール<ul><li><code>Rich Go language support for Visual Studio Code</code></li></ul></li></ul><h1 id="基本文法">基本文法</h1><p><a href="https://go-tour-jp.appspot.com/list" target="_blank" rel="noopener">A Tour of Go</a>を一通りやるといい。<br>とりあえず、こんにちは世界。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, 世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run hello.go</span><br><span class="line">Hello, 世界</span><br></pre></td></tr></table></figure><p>なお、<a href="https://play.golang.org/" target="_blank" rel="noopener">The Go Playground</a> というサービスを使うと Web でお試し実行できる。<br><a href="http://interprism.hatenablog.com/entry/2014/03/04/132551" target="_blank" rel="noopener">他</a> にもいろいろあるみたい。</p><h2 id="標準パッケージのインポート">標準パッケージのインポート</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math"</span></span><br></pre></td></tr></table></figure><p>インポートしたら <code>fmt.Println</code> とかインポート名で使用できる。<br>また、インポート名を変更もできる。（ <code>f.Println</code> ）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">f <span class="string">"fmt"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="exported-name">exported name</h2><p>Go では、最初の文字が大文字で始まる名前は、外部のパッケージから参照できる公開された名前( <em>exported name</em> )。<br>例えば、 <code>Pi</code> は <code>math</code> パッケージでエクスポートされている。<br><code>pi</code> （小文字）ではないことに注意。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//fmt.Println(math.pi)  // Error になる</span></span><br><span class="line">    fmt.Println(math.Pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="関数">関数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func add(x , y int) int &#123; // 引数の型定義、省略可能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(add(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 関数も値として扱える</span></span><br><span class="line">sub := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sub(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即時関数</span></span><br><span class="line">v := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y</span><br><span class="line">&#125;(<span class="number">42</span>, <span class="number">13</span>)</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="複数の-return">複数の return</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := swap(<span class="string">"hello"</span>, <span class="string">"world"</span>)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="result-の変数名">result の変数名</h2><p>返り値となる変数に名前をつけることができる。<br>そして、 <code>return</code> と書くだけでよくなる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">y = sum - x</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(split(<span class="number">17</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="変数宣言">変数宣言</h2><p><code>var</code> は <strong>変数宣言</strong> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, python, java <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">fmt.Println(i, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初期化子が与えられている場合、型を省略できる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span></span><br><span class="line">fmt.Println(i, j, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>関数の中では、 <code>var</code> 宣言の代わりに、短い <code>:=</code> の代入文を使い、暗黙的な型宣言ができる。<br>この場合、変数の型は右側の変数から型推論される。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span>           <span class="comment">// int</span></span><br><span class="line">f := <span class="number">3.142</span>        <span class="comment">// float64</span></span><br><span class="line">g := <span class="number">0.867</span> + <span class="number">0.5i</span> <span class="comment">// complex128</span></span><br></pre></td></tr></table></figure><p>関数の外では、キーワードではじまる宣言( <code>var</code> , <code>func</code> など)が必要で、 <code>:=</code> での暗黙的な宣言は利用できない。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">k := <span class="number">3</span></span><br><span class="line">c, python, java := <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(i, j, k, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本型">基本型</h2><ul><li><code>bool</code></li><li><code>string</code></li><li><code>int</code> <code>int8</code> <code>int16</code> <code>int32</code> <code>int64</code></li><li><code>uint</code> <code>uint8</code> <code>uint16</code> <code>uint32</code> <code>uint64</code> <code>uintptr</code></li><li><code>byte</code><ul><li><code>uint8</code> の別名</li></ul></li><li><code>rune</code><ul><li><code>int32</code> の別名</li><li>Unicode のコードポイントを表す</li><li>rune とは古代文字を表す言葉( runes )、 Go では文字そのものを表すためにruneという言葉を使う</li></ul></li><li><code>float32</code> <code>float64</code></li><li><code>complex64</code> <code>complex128</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/cmplx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ToBe   <span class="keyword">bool</span>       = <span class="literal">false</span></span><br><span class="line">MaxInt <span class="keyword">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">z      <span class="keyword">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Type: %T Value: %v\n"</span>, ToBe, ToBe)</span><br><span class="line">fmt.Printf(<span class="string">"Type: %T Value: %v\n"</span>, MaxInt, MaxInt)</span><br><span class="line">fmt.Printf(<span class="string">"Type: %T Value: %v\n"</span>, z, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ゼロ値">ゼロ値</h2><p>変数に初期値を与えずに宣言すると、ゼロ値( <strong>zero value</strong> )が与えられる。<br>ゼロ値は型によって以下のように与えられる。</p><ul><li>数値型(int,floatなど): 0</li><li>bool型: false</li><li>string型: "" (空文字列( empty string ))</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">fmt.Printf(<span class="string">"%v %v %v %q\n"</span>, i, f, b, s) <span class="comment">// 0 0 false ""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="型変換">型変換</h2><p>従来の <strong>キャスト</strong> とほぼ同じ。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="keyword">uint</span> = <span class="keyword">uint</span>(f)</span><br></pre></td></tr></table></figure><p>ただし、C言語とは異なり、 <em>Goでの型変換は明示的な変換が必要</em> 。</p><h2 id="定数型">定数型</h2><p>定数は、 <code>const</code> キーワードを使って変数と同じように宣言。<br>定数は、文字(character)、文字列(string)、boolean、数値(numeric)のみで使える。<br>なお、定数は <code>:=</code> を使って宣言できない。</p><h2 id="繰り返し-for">繰り返し for</h2><p>所謂 <code>for</code> ループ。Go に <code>while</code> はない。<br>他言語とは異なり、 for ステートメントの3つの部分を括る括弧 <code>( )</code> はない。なお、中括弧 <code>{ }</code> は必要。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while-っぽい-for">while っぽい for</h2><p><code>for</code> はセミコロン( <code>;</code> )を省略することもできる。<br>つまり、C言語などにある <code>while</code> は、Goでは <code>for</code> だけを使う。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件文-if">条件文 if</h2><p>Go 言語の <code>if</code> ステートメントは、 <code>for</code> ループと同様に、括弧 <code>( )</code> は不要で、中括弧 <code>{ }</code> は必要。<br>また、 <code>if</code> ステートメントは、 <code>for</code> のように、条件の前に、評価するための簡単なステートメントを書くことができる。<br>ここで宣言された変数は、 if のスコープ内だけで有効。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123; <span class="comment">// ここ注目</span></span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>),</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">3</span>, <span class="number">20</span>),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if</code> ステートメントで宣言された変数は、 <code>else</code> ブロック内でも使うことができる。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%g &gt;= %g\n"</span>, v, lim) <span class="comment">// v を参照できる</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// can't use v here, though</span></span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>),</span><br><span class="line">pow(<span class="number">3</span>, <span class="number">3</span>, <span class="number">20</span>),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-文">switch 文</h2><p>Go の <code>switch</code> は C や C++、Java、JavaScript、PHP の <code>switch</code> と似ているが、 Go では選択された <code>case</code> だけを実行してそれに続く全ての <code>case</code> は実行されない。<br>これらの言語の各 <code>case</code> の最後に必要な <code>break</code> ステートメントが Go では <em>自動的に提供される</em> 。<br>もう一つの重要な違いは Go の <code>switch</code> の <code>case</code> は定数である必要はなく、 関係する値は整数である必要はない。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"Go runs on "</span>)</span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">fmt.Println(<span class="string">"OS X."</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">fmt.Println(<span class="string">"Linux."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// freebsd, openbsd,</span></span><br><span class="line"><span class="comment">// plan9, windows...</span></span><br><span class="line">fmt.Printf(<span class="string">"%s."</span>, os)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defer">defer</h2><p><code>defer</code> ステートメントは、 <code>defer</code> へ渡した関数の実行を、呼び出し元の関数の終わり( <code>return</code> 後)まで遅延させる。<br><code>defer</code> へ渡した関数の引数は、すぐに評価されるが、その関数自体は呼び出し元の関数が <code>return</code> するまで実行されない。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br><span class="line"><span class="comment">// と出力される</span></span><br></pre></td></tr></table></figure><p><code>defer</code> が複数ある場合、その呼び出しはスタックされ、 LIFO の順番で実行される。（後から順に実行される）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"counting"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// counting</span></span><br><span class="line"><span class="comment">// done</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><code>defer</code> は <code>panic</code> の <code>recover</code> によく用いられる。（ Java で言う <code>try-catch</code> 的な）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hoge</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        err := <span class="built_in">recover</span>()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Recover!:"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"Panic!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    hoge()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>panic</code> は Java でいう <code>Runtime Exception</code> 。 エラーハンドリングでは使っちゃダメ。 <code>Error</code> インターフェースを使おう。</p><ul><li>https://qiita.com/nayuneko/items/3c0b3c0de9e8b27c9548</li></ul><h2 id="ポインタ">ポインタ</h2><p>Go では <strong>ポインタ</strong> （値が格納されているメモリのアドレス）を扱える。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">p := &amp;i         <span class="comment">// i のポインタ</span></span><br><span class="line">fmt.Println(p)  <span class="comment">// i が格納されてるメモリのアドレス：0x416020</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// ポインタ経由で i の値にアクセス：10</span></span><br><span class="line">*p = <span class="number">20</span>         <span class="comment">// ポインタ経由で i の値を変更</span></span><br><span class="line">fmt.Println(i)  <span class="comment">// もちろん i から参照しても値は変わってる：20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="構造体-struct">構造体 struct</h2><p><code>type</code> で作成する。<br><code>type</code> 自体は <code>struct</code> 専用ではなく、独自の型を定義できるもの。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">x <span class="keyword">int</span> <span class="comment">// var 不要</span></span><br><span class="line">y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// vertex&#123;x:1, y:2&#125; でフィールド明記もできる</span></span><br><span class="line"></span><br><span class="line">fmt.Println(v)   <span class="comment">// &#123;1 2&#125;</span></span><br><span class="line">fmt.Println(v.x) <span class="comment">// ドットでフィールドアクセス：1</span></span><br><span class="line"></span><br><span class="line">pv := &amp;v           <span class="comment">// v のポインタ</span></span><br><span class="line">p := &amp;vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// いきなりポインタで作成も可能</span></span><br><span class="line"></span><br><span class="line">fmt.Println((*pv).y)<span class="comment">// 2</span></span><br><span class="line">fmt.Println(p.y) <span class="comment">// * を省略してもコンパイラが良しなに解釈してくれる：2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配列とスライス">配列とスライス</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a [<span class="number">2</span>]<span class="keyword">string</span> <span class="comment">// 配列</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">"Hello"</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="string">"World"</span></span><br><span class="line">fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>]) <span class="comment">// Hello World</span></span><br><span class="line">fmt.Println(a)          <span class="comment">// [Hello World]</span></span><br><span class="line"></span><br><span class="line">primes := [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125; <span class="comment">// 配列の値付き宣言</span></span><br><span class="line">fmt.Println(primes)                  <span class="comment">// [2 3 5 7 11 13]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> = primes[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">// スライス</span></span><br><span class="line">fmt.Println(s)            <span class="comment">// [3 5 7]</span></span><br><span class="line"></span><br><span class="line">q := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125; <span class="comment">// スライスの値付き宣言</span></span><br><span class="line">fmt.Println(q)                 <span class="comment">// [2 3 5 7 11 13]</span></span><br><span class="line">fmt.Println(q[<span class="number">1</span>:<span class="number">3</span>])            <span class="comment">// Python のスライスっぽくアクセスできる：[3 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体のスライス</span></span><br><span class="line">ss := []<span class="keyword">struct</span> &#123;</span><br><span class="line">i <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="number">2</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ss) <span class="comment">// [&#123;2 true&#125; &#123;3 false&#125; &#123;5 true&#125; &#123;7 true&#125; &#123;11 false&#125; &#123;13 true&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次元配列・スライスも作成可能。<br>また、スライスは要素の追加（ <code>s = append(s, 0)</code> 、複数 <code>s = append(s, 2, 3, 4)</code> ）が可能。</p><h2 id="range">range</h2><p>これも Python っぽい。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123; <span class="comment">// インデックスと値</span></span><br><span class="line">fmt.Printf(<span class="string">"%d : %d\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;   <span class="comment">// インデックスだけ</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> pow &#123; <span class="comment">// "_"で捨てて値だけ</span></span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map">map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]vertex     <span class="comment">// mapの宣言</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]vertex) <span class="comment">// mapはmakeで作る</span></span><br><span class="line">m[<span class="string">"hoge"</span>] = vertex&#123;</span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m[<span class="string">"hoge"</span>]) <span class="comment">// &#123;1 2&#125;</span></span><br><span class="line"></span><br><span class="line">mm := <span class="keyword">map</span>[<span class="keyword">string</span>]vertex&#123; <span class="comment">// 値付きで宣言</span></span><br><span class="line"><span class="string">"hoge"</span>: &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line"><span class="string">"fuge"</span>: &#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(mm[<span class="string">"fuge"</span>]) <span class="comment">// &#123;3 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(mm, <span class="string">"fuge"</span>)        <span class="comment">// 要素の削除</span></span><br><span class="line">v, ok := mm[<span class="string">"fuge"</span>]       <span class="comment">// 要素の存在を確認</span></span><br><span class="line">fmt.Println(v, ok)        <span class="comment">// &#123;0 0&#125; false</span></span><br><span class="line">mm[<span class="string">"fuge"</span>] = vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// 要素の追加</span></span><br><span class="line">v, ok = mm[<span class="string">"fuge"</span>]</span><br><span class="line">fmt.Println(v, ok)        <span class="comment">// &#123;3 4&#125; true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="つづき">つづき</h2><p>気が向いたらまとめるかも。</p><p>https://go-tour-jp.appspot.com/moretypes/25 関数の所に書く</p><h1 id="参考">参考</h1><ul><li>https://www.slideshare.net/takuyaueda967/2016-go<ul><li>slideshare</li></ul></li><li>http://blog.amedama.jp/entry/2015/10/06/231038<ul><li>Go の文法ではなく、標準の構造・エコシステムがよくわかる</li></ul></li><li>http://blog.nishimu.land/entry/2015/03/16/032222<ul><li>文法がわかる</li></ul></li><li>おすすめさいとまとめ<ul><li>https://mayonez.jp/topic/1362</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang の基本的なところをまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;環境構築&lt;/li&gt;
&lt;li&gt;基本文法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="go" scheme="https://pepese.github.io/tags/go/"/>
    
      <category term="golang" scheme="https://pepese.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook入門</title>
    <link href="https://pepese.github.io/blog/jupyter-notebook-basics/"/>
    <id>https://pepese.github.io/blog/jupyter-notebook-basics/</id>
    <published>2018-02-19T23:42:35.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jupyter Notebook 、ついでに JupyterHub について軽くまとめる。</p><ul><li><a href="http://jupyter.org/" target="_blank" rel="noopener">公式</a></li><li><a href="http://jupyter.org/documentation" target="_blank" rel="noopener">公式ドキュメント</a></li></ul><a id="more"></a><h1 id="jupyter-notebook">Jupyter Notebook</h1><h2 id="インストール">インストール</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install jupyter</span><br></pre></td></tr></table></figure><h2 id="起動">起動</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="起動オプション">起動オプション</h3><table><thead><tr class="header"><th style="text-align: left;">オプション</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>--no-browser</code></td><td style="text-align: left;">自動でブラウザを起動しない</td></tr><tr class="even"><td style="text-align: left;"><code>--port xxxx</code></td><td style="text-align: left;">ポートの指定</td></tr><tr class="odd"><td style="text-align: left;"><code>--help</code></td><td style="text-align: left;">ヘルプ</td></tr></tbody></table><h2 id="ショートカットまとめ">ショートカットまとめ</h2><p>自分がよく使うショートカットのみまとめる。</p><h3 id="コマンドモード-esc-押したとき">コマンドモード（ <code>ESC</code> 押したとき）</h3><table><thead><tr class="header"><th style="text-align: left;">コマンド</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>Enter</code></td><td style="text-align: left;">編集モード</td></tr><tr class="even"><td style="text-align: left;"><code>H</code></td><td style="text-align: left;">ショートカット一覧</td></tr><tr class="odd"><td style="text-align: left;"><code>DD</code></td><td style="text-align: left;">セルの削除</td></tr><tr class="even"><td style="text-align: left;"><code>K</code></td><td style="text-align: left;">上のセルへ移動</td></tr><tr class="odd"><td style="text-align: left;"><code>J</code></td><td style="text-align: left;">下のセルへ移動</td></tr><tr class="even"><td style="text-align: left;"><code>A</code></td><td style="text-align: left;">セルを上に追加</td></tr><tr class="odd"><td style="text-align: left;"><code>B</code></td><td style="text-align: left;">セルを下に追加</td></tr><tr class="even"><td style="text-align: left;"><code>Y</code></td><td style="text-align: left;">コードモード</td></tr><tr class="odd"><td style="text-align: left;"><code>M</code></td><td style="text-align: left;">マークダウンモード</td></tr><tr class="even"><td style="text-align: left;"><code>1</code> 〜 <code>6</code></td><td style="text-align: left;">見出し１〜見出し６で書き出す</td></tr><tr class="odd"><td style="text-align: left;"><code>00</code></td><td style="text-align: left;">カーネルをリスタート</td></tr><tr class="even"><td style="text-align: left;"><code>S</code> or <code>Command + S</code></td><td style="text-align: left;">保存</td></tr></tbody></table><h3 id="編集モード-enter-押したとき">編集モード（ <code>Enter</code> 押したとき）</h3><table><thead><tr class="header"><th style="text-align: left;">コマンド</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>ESC</code> or <code>Ctrl + M</code></td><td style="text-align: left;">コマンドモード</td></tr><tr class="even"><td style="text-align: left;"><code>Ctrl + Enter</code></td><td style="text-align: left;">セルの実行</td></tr><tr class="odd"><td style="text-align: left;"><code>Command + S</code></td><td style="text-align: left;">保存</td></tr></tbody></table><h2 id="その他小技">その他小技</h2><table><thead><tr class="header"><th style="text-align: left;">コマンド</th><th style="text-align: left;">説明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">実行結果のセルをダブルクリック</td><td style="text-align: left;">実行結果の最小化（閉じる）</td></tr></tbody></table><h1 id="jupyterhub">JupyterHub</h1><p>JupyterHub を導入することで以下が可能になる。</p><ul><li>マルチユーザ</li><li>ユーザ管理・認証</li><li>高スペックサーバでリモートから利用</li><li>などなど</li></ul><p><img src="https://jupyterhub.readthedocs.io/en/stable/_images/jhub-parts.png"></p><h2 id="インストール-1">インストール</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pip install jupyterhub notebook</span><br><span class="line">$ npm install -g configurable-http-proxy</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">$ jupyterhub -h</span><br><span class="line">$ configurable-http-proxy -h</span><br></pre></td></tr></table></figure><p>なお、 Docker 版も提供されている。</p><h2 id="起動-1">起動</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jupyterhub</span><br></pre></td></tr></table></figure><p><code>https://localhost:8000</code> で起動する。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jupyter Notebook 、ついでに JupyterHub について軽くまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jupyter.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jupyter.org/documentation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Jupyter" scheme="https://pepese.github.io/tags/Jupyter/"/>
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code入門</title>
    <link href="https://pepese.github.io/blog/vscode-basics/"/>
    <id>https://pepese.github.io/blog/vscode-basics/</id>
    <published>2018-01-31T09:15:32.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft が開発したエディタ<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>（以降、 VS Code ）のインストールから拡張機能の導入までをまとめる。</p><a id="more"></a><h1 id="インストールmac">インストール（Mac）</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install visual-studio-code</span><br></pre></td></tr></table></figure><h1 id="起動方法">起動方法</h1><p>アイコンクリックでもいいがコマンドラインで起動できる。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ code</span><br></pre></td></tr></table></figure><p>プロジェクト（カレントディレクトリ）で起動したい場合は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ code .</span><br></pre></td></tr></table></figure><h1 id="ショートカット操作">ショートカット・操作</h1><p>ショートカットの一覧・設定は <code>Comannd + K -&gt; Command + S</code> で開く。<br>（筆者の場合は「右側をすべて削除」が <code>Ctrl + K</code> になっていなかったので登録した。）</p><ul><li>ユーザ設定<ul><li><code>Command + ,</code></li></ul></li><li>Markdown Preview<ul><li><code>Command + Shift + V</code></li></ul></li><li>統合ターミナル<ul><li><code>Control + Shift + @</code></li></ul></li><li>ワークスペースにプロジェクトを追加<ul><li>「ファイル」-&gt;「ワークスペースにフォルダに追加」</li></ul></li></ul><h1 id="コマンドパレット">コマンドパレット</h1><p><code>Command + Shift + P</code> を押すと VS Code の上部に <strong>コマンドパレット</strong> が開く。<br>VS Code で実行できる各種コマンドには名前が付いていて、その名前をこのコマンドパレットに入力することでそれらを実行できる。</p><h1 id="拡張機能-extensions">拡張機能（ Extensions ）</h1><p>アクティビティーバー（左上に縦に並んでるアイコン）の一番下にあるアイコンをクリックするとサイドバーが拡張機能の画面になる。（ <code>Command + Shift + X</code> でも）<br>以下のような種類の拡張機能が存在する。</p><ul><li>［Debuggers］（デバッガー）</li><li>［Languages］（言語）</li><li>［Linters］（Lintツール）</li><li>［Snippets］（スニペット）</li><li>［Themes］（テーマ）</li><li>［Other］（その他）</li></ul><p>検索欄を空にすると現在インストール済みの拡張機能の一覧が表示される。<br>なお、拡張機能の反映には VS Code を再起動するか再読み込みボタンを押す。</p><h1 id="アップデート">アップデート</h1><h2 id="vs-code">VS Code</h2><p>「 Code 」 -&gt; 「更新の確認」。</p><h2 id="拡張機能">拡張機能</h2><p>拡張機能画面の右上の「・・・」をクリックして「更新の確認」。</p><h1 id="オススメの拡張機能">オススメの拡張機能</h1><h2 id="視覚サポート">視覚サポート</h2><ul><li>Trailing Spaces<ul><li>改行部分の最後に入る半角スペースの強調、削除</li></ul></li><li>EvilInspector<ul><li>文章中の全角スペースを強調, 削除</li></ul></li></ul><h2 id="markdown">Markdown</h2><ul><li>Auto-Open Markdown Preview<ul><li>Markdown ファイルを開くときに自動でプレビューを開く</li></ul></li><li>Markdown+Math<ul><li><code>$$</code> 内に数式を書いて <code>Ctrl + Shift + .</code> と打てば、数式対応のプレビューが表示</li></ul></li></ul><h2 id="git">Git</h2><ul><li>Git History<ul><li>ツリー表示や差分表示など</li></ul></li><li>gi<ul><li><a href="https://github.com/joeblau/gitignore.io" target="_blank" rel="noopener">gitignore.io</a> から gitignore を追加</li></ul></li><li>gitignore<ul><li><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">github/gitignore.io</a> から gitignore を追加</li></ul></li></ul><h2 id="マークアップ">マークアップ</h2><ul><li>Auto Complete Tag<ul><li>タグを自動で閉じて、開始・終了タグを変更したらもう片方のタグも自動で変更</li></ul></li></ul><h2 id="その他">その他</h2><ul><li>Shortcuts<ul><li>VS Code 最下部にショートカットボタンを追加</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft が開発したエディタ&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual Studio Code&lt;/a&gt;（以降、 VS Code ）のインストールから拡張機能の導入までをまとめる。&lt;/p&gt;
    
    </summary>
    
    
      <category term="VS Code" scheme="https://pepese.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>Appium入門</title>
    <link href="https://pepese.github.io/blog/appium-basics/"/>
    <id>https://pepese.github.io/blog/appium-basics/</id>
    <published>2018-01-06T06:07:54.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Appium は Selenium WebDriver の一種で、ネイティブアプリの自動テストを可能にする。<br>Node.js 上でサーバーとして動作し、HTTP 経由で WebDriver API を通して操作を受け付けるという仕組み。<br>Appium の背後には iOS 用, Android 用, Win 用などのドライバがある。</p><ul><li><a href="http://appium.io/slate/en/master/" target="_blank" rel="noopener">API Reference</a></li><li><a href="http://appium.io/slate/en/tutorial/android.html" target="_blank" rel="noopener">Tutorial Android</a></li><li><a href="http://appium.io/slate/en/tutorial/ios.html" target="_blank" rel="noopener">Tutorial iOS</a></li></ul><a id="more"></a><h1 id="環境設定">環境設定</h1><p>Homebrew 、 Java 1.8 の導入は省略している。</p><h2 id="appium">Appium</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install node</span><br><span class="line">$ npm install --global appium appium-doctor wd</span><br></pre></td></tr></table></figure><p>Appium は以下で起動。<br>後述の appium-desktop を使用せず、 Appium のテストコードだけ実行する場合はこれ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ appium &amp;</span><br></pre></td></tr></table></figure><h2 id="ios">iOS</h2><p>Xcode を App Store でインストールしてから以下を実行。<br>また、 <code>brew install carthage</code> を実行する際、権限不足で <code>/usr/local/Frameworks</code> ディレクトリ作成に失敗する。<br>そのため、 <code>brew link carthage</code> に失敗するので、あらかじめディレクトリを作ってあげてからインストールする。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /usr/<span class="built_in">local</span>/Frameworks</span><br><span class="line">$ sudo chown -R $(whoami):admin /usr/<span class="built_in">local</span>/Frameworks</span><br><span class="line">$ brew install carthage</span><br><span class="line"><span class="comment"># $ brew link carthage</span></span><br><span class="line">$ appium-doctor --ios <span class="comment"># インストール、設定が正しいかチェック</span></span><br><span class="line">$ brew install libimobiledevice --HEAD <span class="comment"># 実機接続用のモジュール</span></span><br><span class="line">$ npm install --global --unsafe-perm ios-deploy</span><br><span class="line">$ sudo xcode-select --switch /Applications/Xcode.app <span class="comment"># Xcode のバージョンを指定</span></span><br></pre></td></tr></table></figure><p>その他 iOS に関する細々した設定は<a href="https://github.com/appium/appium-xcuitest-driver/blob/master/docs/real-device-config.md" target="_blank" rel="noopener">ここ</a>を参照。</p><h3 id="シミュレータ">シミュレータ</h3><p>特に必要無いが、シミュレータの画面サイズが大きいのでやってもいい。</p><ol type="1"><li>Xcode を起動</li><li>Xcode -&gt; Open Developper Tool -&gt; Simulator</li><li>Window -&gt; Scale -&gt; 50%</li><li>ホームボタンは Shift + Command + H</li></ol><h3 id="実機">実機</h3><p>iOS の場合は、「実機＋アプリ」は <code>.ipa</code> ファイル、「エミュレータ＋アプリ」は <code>.app</code> ファイルが必要となる。<br>また、実機用のアプリは development のプロビジョニングでビルドされている必要があり、かつ実機端末の UDID の指定も合わせて必要。</p><ol type="1"><li>実機に接続する MacOS PC に App Store から <strong>Apple Configurator</strong> をインストール</li><li>USB で実機を MacOS PC に接続し、端末を選ぶと、再度バーにAppsというメニューが出てくるのでクリック</li><li><code>.ipa</code> ファイルをドラッグ＆ドロップすることでアプリを端末にインストールできる</li><li>appium-desktop との接続は後述</li></ol><p>iOS 実機へ WebDriver をインストールするコマンドは以下。<br>（なお、筆者は実機で試していない、、、）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcodebuild build <span class="built_in">test</span> -project /usr/<span class="built_in">local</span>/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination id=xxxx -configuration Debug</span><br></pre></td></tr></table></figure><h2 id="android">Android</h2><p>Android 開発環境の構築方法については <a href="https://pepese.github.io/blog/android-env-on-mac/">Androidアプリ入門 Macで環境構築編</a> を参照。<br>以下のコマンドで正しく環境構築されたか確認する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ appium-doctor --android</span><br></pre></td></tr></table></figure><h3 id="エミュレータ">エミュレータ</h3><p>Android エミュレータは iOS シミュレータと異なり、エミュレータを手で作る必要がある。<br>（また、各種ツール類を導入する必要がある？）</p><ol type="1"><li>Android Studio を起動<ul><li>「 Start a new Android Studio project 」で適当にプロジェクトを作る</li></ul></li><li>SDK Manager を起動<ul><li>左のメニューの Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK を選択</li><li>SDK Tools を選択して以下をインストール・更新<ul><li>Android SDK Tools</li><li>Android SDK Platform-tools</li><li>Android SDK Build-tools</li></ul></li><li>SDK Platforms を選択して、利用した API Version をインストール</li></ul></li><li>AVD Manager を起動</li><li>エミュレータを作成<ul><li>ARM 系のプラットフォームは挙動が遅いので x86 、 x86_64 を選択する</li></ul></li></ol><h4 id="コマンド">コマンド</h4><p>かつては <code>android</code> コマンドであったが、 <code>sdkmanager</code> と <code>avdmanager</code> に移行された。<br>以下はメモ程度。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sdkmanager --list</span><br><span class="line">$ sdkmanager <span class="string">"system-images;android-25;google_apis;armeabi-v7a"</span></span><br><span class="line">$ avdmanager create avd -n <span class="built_in">test</span> -k <span class="string">"system-images;android-25;google_apis;armeabi-v7a"</span></span><br><span class="line">$ avdmanager list avd</span><br><span class="line">$ emulator -list-avds</span><br><span class="line">$ emulator -avd <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.android.com/studio/command-line/sdkmanager.html" target="_blank" rel="noopener">sdkmanager</a></li><li><a href="https://developer.android.com/studio/command-line/avdmanager.html#syntax" target="_blank" rel="noopener">avdmanager</a></li><li><a href="https://developer.android.com/studio/run/emulator-commandline.html" target="_blank" rel="noopener">emulator</a></li></ul><h3 id="実機-1">実機</h3><p>Android 実機での自動テスト手順は以下。</p><ol type="1"><li>Android 実機を USB で PC に繋ぎ、実機側で USB デバッグを許可</li><li><code>$ adb devices</code> で device 番号が表示されることを</li><li>実機でアプリを起動して、パッケージ名などを確認（アプリインストールの確認）<ul><li><code>$ adb shell pm list packages | grep pepese</code><ul><li><code>package:org.pepese</code></li></ul></li><li><code>$ adb shell dumpsys activity | grep pepese | grep Intent</code><ul><li><code>Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=org.pepese/org.pepese.MainActivity }</code></li></ul></li></ul></li><li>appium-desktop を起動<ul><li>Capability を設定して接続（詳細後述）</li></ul></li></ol><h2 id="appium-desktop">appium-desktop</h2><p>appium-desktop を使用することにより以下のことが可能になる。</p><ul><li>Appiumサーバー起動（ <code>$ appium &amp;</code> コマンド打たなくてよくなる）</li><li>実機やエミュレータと接続</li><li>インスペクターを利用してアプリ画面内の要素の確認やその操作</li><li>操作のテストコード出力</li></ul><p>以下のように導入する。</p><ol type="1"><li><a href="https://github.com/appium/appium-desktop/releases/" target="_blank" rel="noopener">ここ</a> から最新版を取得してインストール。<ul><li><code>appium-desktop-x.x.x.dmg</code></li></ul></li><li>「 Simple 」で「 Start Server vx.x.x 」を押下</li><li>右上の左のボタン「 Start Inspector Session 」を押下</li><li>上のタブを「 Automatic Server 」、下のタブを「 Desired Capability 」の状態で、右下の「 JSON Representation 」にエミュレータや実機へ接続するための設定を記載する<ul><li><a href="https://appium.io/slate/en/master/?ruby#appium-server-capabilities" target="_blank" rel="noopener">公式：設定ドキュメント</a></li></ul></li></ol><h3 id="ios-シミュレータと接続">iOS シミュレータと接続</h3><p>iOS の場合は、「実機＋アプリ」は <code>.ipa</code> ファイル、「シミュレータ＋アプリ」は <code>.app</code> ファイルが必要となる。<br>（ Android とは異なり、 <code>appPackage</code> <code>appActivity</code> の設定は不要）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"platformName"</span>: <span class="string">"iOS"</span>,</span><br><span class="line">    <span class="string">"platformVersion"</span>: <span class="string">"11.1"</span>,</span><br><span class="line">    <span class="string">"deviceName"</span>: <span class="string">"iPhone Simulator"</span>,</span><br><span class="line">    <span class="string">"automationName"</span>: <span class="string">"XCUITest"</span>,</span><br><span class="line">    <span class="string">"app"</span>: <span class="string">"[アプリまでのパス]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ios-実機と接続">iOS 実機と接続</h3><p><code>udid</code> は MacOS PC へ実機を接続した後、 <strong>Apple Configurator</strong> で確認する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"platformName"</span>: <span class="string">"iOS"</span>,</span><br><span class="line">    <span class="string">"platformVersion"</span>: <span class="string">"11.1"</span>,</span><br><span class="line">    <span class="string">"deviceName"</span>: <span class="string">"iPhone Simulator"</span>,</span><br><span class="line">    <span class="string">"automationName"</span>: <span class="string">"XCUITest"</span>,</span><br><span class="line">    <span class="string">"app"</span>: <span class="string">"[アプリまでのパス]"</span>,</span><br><span class="line">    <span class="string">"udid"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"xcodeOrgId"</span>: <span class="string">"&lt;Team ID&gt;"</span>,</span><br><span class="line">    <span class="string">"xcodeSigningId"</span>: <span class="string">"iPhone Developer"</span>,</span><br><span class="line">    <span class="string">"updatedWDABundleId"</span>: <span class="string">"io.appium.WebDriverAgentRunner"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="android-エミュレータと接続">Android エミュレータと接続</h3><p>Android エミュレータの場合は、あらかじめエミュレータを起動しておく。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"appPackage"</span>: <span class="string">"org.pepese"</span>,</span><br><span class="line">  <span class="string">"appActivity"</span>: <span class="string">"org.pepese.MainActivity"</span>,</span><br><span class="line">  <span class="string">"platformName"</span>: <span class="string">"Android"</span>,</span><br><span class="line">  <span class="string">"automationName"</span>: <span class="string">"Appium"</span>,</span><br><span class="line">  <span class="string">"platformVersion"</span>: <span class="string">"8.1.0"</span>,</span><br><span class="line">  <span class="string">"deviceName"</span>: <span class="string">"Android Emulator"</span>,</span><br><span class="line">  <span class="string">"app"</span>: <span class="string">"[アプリまでのパス]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="android-実機と接続">Android 実機と接続</h3><p>実機の場合は <code>$ adb devices</code> で device 番号を取得し、 <code>deviceName</code> へ設定する。</p><h4 id="トラブルシューティング">トラブルシューティング</h4><ul><li><code>adb install</code> で <code>INSTALL_FAILED_NO_MATCHING_ABIS</code> が出た<ul><li>appium-desktop とエミュレータ接続時、アプリケーションがインストールされるのだが、アプリと ABI の組み合わせが悪いときに発生。<ul><li>アプリが「 x86 」用にビルドされてない、とか「 ARM 」用にビルドされてないとか</li></ul></li><li>CPU/ABI に「 x86 」がダメなら「 ARM(armeabi-v7a) 」を、「 ARM 」がダメなら「 x86 」を選択する。</li></ul></li><li>エミュレータが起動すると <code>Process system isn't responding</code> と表示される<ul><li>x86 系マシン（例えば Mac ）で ARM のエミュレータを実行している時に発生<ul><li>ただひたすらエミュレート処理が遅いだけ、大人しく x86 系エミュレータにしたほうがいい</li></ul></li><li>ひたすら「 wait 」する</li></ul></li></ul><h1 id="サンプルを実行">サンプルを実行</h1><p>サンプルアプリとサンプルテストコードで Appium の自動テストを動かしてみる。</p><h2 id="ios-1">iOS</h2><p>コマンドラインの iOS ビルドツールの準備。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br><span class="line">$ sudo xcode-select --switch /Applications/Xcode.app</span><br><span class="line">$ xcodebuild -version</span><br><span class="line">Xcode 9.2</span><br><span class="line">Build version 9C40b</span><br></pre></td></tr></table></figure><p>サンプルアプリとテストコードを取得してセットアップ。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/appium/sample-code</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/appium/ios-test-app</span><br><span class="line">$ <span class="built_in">cd</span> ios-test-app</span><br><span class="line">$ xcodebuild -sdk iphonesimulator</span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ cp -R ios-test-app/build sample-code/sample-code/apps/TestApp/build</span><br><span class="line">$ <span class="built_in">cd</span> sample-code/sample-code/examples/python</span><br></pre></td></tr></table></figure><p><code>xcodebuild -version -sdk</code> コマンドで <code>PlatformVersion</code> を確認し、 <code>ios_simple.py</code> ファイルの 20 行目あたりの <code>PlatformVersion</code> を書き直す。<br>別ターミナルを起動し <code>appium &amp;</code> コマンドで Appium を起動してから以下を実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ py.test ios_simple.py</span><br></pre></td></tr></table></figure><h3 id="appium-desktop-との接続">appium-desktop との接続</h3><p>シミュレータ上のサンプルアプリと appium-desktop を接続する際、 Capability には以下を設定する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"platformName"</span>: <span class="string">"iOS"</span>,</span><br><span class="line">  <span class="string">"platformVersion"</span>: <span class="string">"11.2"</span>,</span><br><span class="line">  <span class="string">"deviceName"</span>: <span class="string">"iPhone Simulator"</span>,</span><br><span class="line">  <span class="string">"automationName"</span>: <span class="string">"XCUITest"</span>,</span><br><span class="line">  <span class="string">"app"</span>: <span class="string">"/path/to/ios-test-app/build/Release-iphonesimulator/TestApp.app"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="android-1">Android</h2><p>エミュレータは起動しておく。<br>iOS のテストを実行した後のテイで書く。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ py.test android_simple.py</span><br></pre></td></tr></table></figure><p>動かなかった。<br>以下の記事を参考のこと。</p><ul><li><a href="https://qiita.com/natsuki_summer/items/2d8d60114cdb95929dcb" target="_blank" rel="noopener">Appium インストールして起動まで/ iOS・Androidのトラブルシューティング</a></li></ul><h3 id="appium-desktop-との接続-1">appium-desktop との接続</h3><p>エミュレータ上のサンプルアプリと appium-desktop を接続する際、 Capability には以下を設定する。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;appPackage&quot;: &quot;com.example&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;com.example.toggletest.MainActivity&quot;,</span><br><span class="line">  &quot;platformName&quot;: &quot;Android&quot;,</span><br><span class="line">  &quot;automationName&quot;: &quot;Appium&quot;,</span><br><span class="line">  &quot;platformVersion&quot;: &quot;8.1.0&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;Android Emulator&quot;,</span><br><span class="line">  &quot;app&quot;: &quot;/path/to/sample-code/sample-code/apps/ApiDemos/bin/ApiDemos-debug.apk&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android Studio で自分で実装・ビルドしたアプリをエミュレータにインストールして接続する場合は以下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;appPackage&quot;: &quot;org.pepese.sample.audiosample&quot;,</span><br><span class="line">  &quot;appActivity&quot;: &quot;org.pepese.sample.audiosample.MainActivity&quot;,</span><br><span class="line">  &quot;platformName&quot;: &quot;Android&quot;,</span><br><span class="line">  &quot;automationName&quot;: &quot;Appium&quot;,</span><br><span class="line">  &quot;platformVersion&quot;: &quot;8.1.0&quot;,</span><br><span class="line">  &quot;deviceName&quot;: &quot;Android Emulator&quot;,</span><br><span class="line">  &quot;app&quot;: &quot;/Users/[UserName]/AndroidStudioProjects/[プロジェクト名]/app/build/outputs/apk/debug/app-debug.apk&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Appium は Selenium WebDriver の一種で、ネイティブアプリの自動テストを可能にする。&lt;br&gt;
Node.js 上でサーバーとして動作し、HTTP 経由で WebDriver API を通して操作を受け付けるという仕組み。&lt;br&gt;
Appium の背後には iOS 用, Android 用, Win 用などのドライバがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://appium.io/slate/en/master/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://appium.io/slate/en/tutorial/android.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tutorial Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://appium.io/slate/en/tutorial/ios.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tutorial iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://pepese.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="https://pepese.github.io/tags/iOS/"/>
    
      <category term="appium" scheme="https://pepese.github.io/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>Androidアプリ入門 Macで環境構築編</title>
    <link href="https://pepese.github.io/blog/android-env-on-mac/"/>
    <id>https://pepese.github.io/blog/android-env-on-mac/</id>
    <published>2018-01-06T05:34:36.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac で Android アプリを開発する際の環境構築についてまとめる。<br>なお、プログラミング言語は <a href="https://kotlinlang.org/" target="_blank" rel="noopener">Kotlin</a> を選択する。</p><p><a href="https://developer.android.com/studio/intro/index.html" target="_blank" rel="noopener">公式ドキュメント</a></p><a id="more"></a><h1 id="android-studio-の設定">Android Studio の設定</h1><p>Java 1.8 はインストール済みな前提。<br>バージョンは 3.0.1 for Mac 。</p><h2 id="インストール">インストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew cask install android-studio</span><br></pre></td></tr></table></figure><p>Homebrew については <a href="https://pepese.github.io/blog/homebrew-basics/">Homebrew 入門</a> を参照。</p><h2 id="初回起動時の設定">初回起動時の設定</h2><p>android-studio でインストールした android-sdk 系のツールは <code>~/Library/Android/sdk</code> 配下に配備される。<br>以下の初回起動時の設定後にダウンロードされる。</p><ol type="1"><li>Android Studio 起動</li><li>「 Do not import settings 」 -&gt; 「 OK 」</li><li>「 Next 」</li><li>「 custom 」 -&gt; 「 Next 」</li><li>「 Default 」 -&gt; 「 Next 」</li><li>以下を選択して「 Next 」<ul><li>Android SDK</li><li>Android SDK Platform</li><li>Performance (Intel HAXM)</li><li>Android Virtual Device</li></ul></li><li>任意の Emulator Settings して「 Next 」 -&gt; 「 Finish 」</li></ol><p>「[ダウンロードしたアプリケーションの実行許可]の下の方に intel なんたらかんたら」って出たら、Mac の「システム環境設定　&gt; セキュリティとプライバシー」を開いて許可する。<br><code>~/.bash_profile</code> に以下を加筆した後 <code>source ~/.bash_profile</code> を実行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=`/usr/libexec/java_home -v1.8`</span><br><span class="line">export ANDROID_HOME=$HOME/Library/Android/sdk</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">PATH=$PATH:$ANDROID_HOME/platform-tools</span><br><span class="line">PATH=$PATH:$ANDROID_HOME/tools/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p><code>$ adb devices</code> 、 <code>$ sdkmanager --help</code> が実行できることを確認しておく。</p><h2 id="アンインストール">アンインストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask uninstall android-studio</span><br><span class="line">$ rm -Rf ~/Library/Preferences/AndroidStudio*</span><br><span class="line">$ rm -Rf ~/Library/Logs/AndroidStudio*</span><br><span class="line">$ rm -Rf ~/Library/Caches/AndroidStudio*</span><br><span class="line">$ rm ~/Library/Preferences/com.android.Emulator.plist</span><br><span class="line">$ rm -Rf ~/Library/Android*</span><br><span class="line">$ rm -Rf ~/AndroidStudioProjects</span><br><span class="line">$ rm -Rf ~/.gradle</span><br><span class="line">$ rm -Rf ~/.android</span><br></pre></td></tr></table></figure><h1 id="android-studio-の使い方">Android Studio の使い方</h1><ol type="1"><li>Android Studio 起動</li><li>「 Start a new Android Project 」</li><li>アプリ名、ドメイン名、「 Include Kotlin Support 」にチェックを入れて「 Next 」</li><li>アプリのプラットフォームを選択して「 Next 」</li><li>コンポーネント（ Basic Activity でよい）を選択して「 Next 」</li><li>メインとなる Activity の名前などを設定して「 Next 」-&gt;「 Finish 」<ul><li>この時点でプロジェクトの初期設定環境</li><li>エラーメッセージが出た場合は、メッセージに従い SDK Manager からツールをダウンロードする</li></ul></li><li>エミュレータの作成<ul><li>AVD Manager から作成できる</li></ul></li><li>右上の再生ボタンでアプリを実行可能</li></ol><p>「 Shift 」を2回押すと、 Search Everywhere が起動する。</p><h1 id="プロジェクト構造">プロジェクト構造</h1><p>Android プロジェクト構造は以下。<br>実際のディレクトリ構造と異なることに注意。</p><ul><li>app<ul><li>manifest ： AndroidManifest.xml がある</li><li>java ： テストコードを含む Java ソースコードのファイルがある</li><li>res ： XML レイアウト、UI 文字列、ビットマップ イメージなど、コード以外のすべてのリソースがある（ resource の略）<ul><li>drawable ： 画像</li><li>layout ： Activity のレイアウト</li><li>menu ： アプリのメニューのレイアウト</li><li>mipmap ： 拡大縮小アニメーションに対応した画像</li><li>values ： 文字列や値を XML で管理</li></ul></li></ul></li><li>Gradle Script ： ビルドファイルがある<ul><li>build.gradle (Project: xxxx) ： プロジェクトのすべてのモジュールに適用されるビルド設定</li><li>build.gradle (Module: app) ： <code>&lt;project&gt;/&lt;module&gt;/</code> ディレクトリにあるモジュールレベルのビルド設定</li><li>gradle-wrapper.properties</li><li>proguard-rules.pro ： ProGuard はビルド時にアプリのソースコードを難読化するツール</li><li>gradle.properties ： Gradle デーモンの最大ヒープサイズなど、プロジェクト全体にわたる Gradle 設定</li><li>settings.gradle ： アプリをビルドするときに含めるモジュールを Gradle に通知するファイル</li><li>local.properties ： SDK インストールへのパスなど、ビルドシステムのローカル環境プロパティを設定</li></ul></li></ul><p><a href="https://developer.android.com/studio/build/index.html" target="_blank" rel="noopener">公式ドキュメント：ビルドシステム</a></p><h2 id="マニフェスト">マニフェスト</h2><p><code>AndroidManifest.xml</code> のこと。<br>記載方法は以下を参照。</p><p><a href="https://developer.android.com/guide/topics/manifest/manifest-intro.html" target="_blank" rel="noopener">公式ドキュメント：アプリ マニフェスト</a></p><h1 id="ndk-の導入">NDK の導入</h1><p>Android NDK （ Native Development Kit ）は、C や C++ などのネイティブ コード言語を使用して、アプリの一部を実装するためのツールセット。</p><ol type="1"><li>Android Studio 起動</li><li>SDK Manager 起動</li><li>「 SDK Tools 」から「 NDK 」「 CMake 」「 LLDB 」を選択してインストール</li><li>NDK を利用するプロジェクトでは「 Include C++ support 」をチェックしておく必要がある</li></ol><p>NDK に関するビルドの設定は、モジュールレベルの <code>build.gradle</code> で行う。<br>例えば以下は、cpp のビルドターゲットの .so を armeabi 、 armeabi-v7a に限定する設定。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'kotlin-android'</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'kotlin-android-extensions'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">26</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"sample.pepese.org.audiosample"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">26</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ndk &#123; <span class="comment">// ★★★★★★★このあたり！！！！★★★★★★★</span></span><br><span class="line">            <span class="comment">// Specifies the ABI configurations of your native</span></span><br><span class="line">            <span class="comment">// libraries Gradle should build and package with your APK.</span></span><br><span class="line">            abiFilters <span class="string">'armeabi'</span>, <span class="string">'armeabi-v7a'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation<span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"</span></span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:26.1.0'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    implementation <span class="string">'com.android.support:design:26.1.0'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac で Android アプリを開発する際の環境構築についてまとめる。&lt;br&gt;
なお、プログラミング言語は &lt;a href=&quot;https://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kotlin&lt;/a&gt; を選択する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/intro/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式ドキュメント&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://pepese.github.io/tags/Mac/"/>
    
      <category term="Android" scheme="https://pepese.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://pepese.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>SDKMAN入門</title>
    <link href="https://pepese.github.io/blog/sdkman-basics/"/>
    <id>https://pepese.github.io/blog/sdkman-basics/</id>
    <published>2017-12-14T23:09:58.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java 系の anyenv 、 <a href="http://sdkman.io/index.html" target="_blank" rel="noopener">SDKMAN</a> をさわってみる。</p><a id="more"></a><h1 id="概要">概要</h1><p>SDKMAN を導入することで、以下のツールのバージョン管理が可能となる。</p><ul><li>Ant</li><li>AsciidoctorJ</li><li>Ceylon</li><li>CRaSH</li><li>Gaiden</li><li>Glide</li><li>Gradle</li><li>Grails</li><li>Griffon</li><li>Groovy</li><li>GroovyServ</li><li>Java</li><li>JBake</li><li>Kobalt</li><li>Kotlin</li><li>kscript</li><li>Lazybones</li><li>Leiningen</li><li>Maven</li><li>sbt</li><li>Scala</li><li>Spring Boot</li><li>Sshoogr</li><li>Vert.x</li></ul><p>ここでは Java と Maven のみ記載する。</p><h1 id="環境設定">環境設定</h1><h2 id="sdkman">SDKMAN</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s <span class="string">"https://get.sdkman.io"</span> | bash</span><br><span class="line">$ <span class="built_in">source</span> <span class="string">"<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span></span><br></pre></td></tr></table></figure><p>init を叩かないと <code>sdk</code> コマンドのパスが通らないため、 <code>~/.bash_profile</code> に以下をいれておく。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br></pre></td></tr></table></figure><h1 id="各ツールの導入">各ツールの導入</h1><p>USAGE は以下。<br>ツール名を「 xxxx 」とする。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sdk <span class="built_in">help</span>                     <span class="comment"># help を表示</span></span><br><span class="line">$ sdk version                  <span class="comment"># SDKMAN 自体のバージョン</span></span><br><span class="line">$ sdk selfupdate force         <span class="comment"># SDKMAN 自体のバージョンアップ</span></span><br><span class="line">$ sdk install xxxx             <span class="comment"># xxxx をインストール</span></span><br><span class="line">$ sdk install xxxx [version]   <span class="comment"># xxxx を version 指定でインストール</span></span><br><span class="line">$ sdk uninstall xxxx [version] <span class="comment"># xxxx を version 指定でアンインストール</span></span><br><span class="line">$ sdk list xxxx                <span class="comment"># xxxx の version の一覧を表示</span></span><br><span class="line">$ sdk use xxxx [version]       <span class="comment"># xxxx の現ターミナルの version を指定</span></span><br><span class="line">$ sdk default xxxx [version]   <span class="comment"># xxxx のデフォルトの version を指定</span></span><br><span class="line">$ sdk current xxxx             <span class="comment"># xxxx の現在の version を表示</span></span><br></pre></td></tr></table></figure><p><a href="http://sdkman.io/usage.html" target="_blank" rel="noopener">公式</a></p><h2 id="java">Java</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sdk install java</span><br><span class="line">$ sdk list java</span><br><span class="line">==========================</span><br><span class="line">Available Java Versions</span><br><span class="line">==========================</span><br><span class="line">     9.0.1-zulu</span><br><span class="line">     9.0.1-oracle</span><br><span class="line">     9.0.0-zulu</span><br><span class="line"> &gt; * 8u152-zulu</span><br><span class="line">     8u151-oracle</span><br><span class="line">     8u144-zulu</span><br><span class="line">     8u131-zulu</span><br><span class="line">     7u141-zulu</span><br><span class="line">     6u65-apple</span><br><span class="line">==========================</span><br><span class="line">+ - <span class="built_in">local</span> version</span><br><span class="line">* - installed</span><br><span class="line">&gt; - currently <span class="keyword">in</span> use</span><br><span class="line">==========================</span><br><span class="line">$ sdk install java 8u151-oracle</span><br><span class="line">$ sdk default java 8u151-oracle</span><br></pre></td></tr></table></figure><p><code>-zulu</code> は OpenJDK 、 <code>-oracle</code> は Oracle Java を指す。<br><code>/usr/libexec/java_home</code> もちゃんと有効だった。</p><h2 id="maven">Maven</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sdk install maven 3.5.2</span><br><span class="line">$ sdk list maven</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 系の anyenv 、 &lt;a href=&quot;http://sdkman.io/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SDKMAN&lt;/a&gt; をさわってみる。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://pepese.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://pepese.github.io/tags/Maven/"/>
    
      <category term="SDKMAN" scheme="https://pepese.github.io/tags/SDKMAN/"/>
    
      <category term="Gradle" scheme="https://pepese.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Heroku入門</title>
    <link href="https://pepese.github.io/blog/heroku-basics/"/>
    <id>https://pepese.github.io/blog/heroku-basics/</id>
    <published>2017-12-07T09:54:42.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Heroku は salesforce が運営する PaaS 。<br>Free プランではクレカ登録無しで月に 550 dyno hours （約 23 日分、 1 ヶ月分無い）、クレカ登録すると月に 1000 dyno hours を無料で利用できる。<br>Free プランの落とし穴は、 30 分アクセスが無いとインスタンス（ dyno ）が Sleep してしまうところ。　　 以下、 Free プランでアカウントを取得している前提で記載する。</p><a id="more"></a><h1 id="heroku-cli">Heroku CLI</h1><p>Heroku の Web ページで各種設定できるが、ここでは CLI ベースの方法を記載する。</p><h2 id="インストール">インストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install heroku/brew/heroku</span><br></pre></td></tr></table></figure><p><a href="https://devcenter.heroku.com/articles/heroku-cli#troubleshooting" target="_blank" rel="noopener">Trouble Shooting</a><br><a href="https://devcenter.heroku.com/articles/heroku-cli#uninstalling-the-heroku-cli" target="_blank" rel="noopener">Uninstalling</a></p><h2 id="初期起動">初期起動</h2><p>以下の手順で Heroku へアプリケーションをデプロイ・起動する。<br>なお、 <code>/path/to/myApp</code> は Heroku が対応している言語で実装されたローカルのアプリケーションプロジェクトをさす。<br>また、 Heroku へのアプリケーションのデプロイは Git 経由で行われる。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ heroku login <span class="comment"># Heroku にログイン</span></span><br><span class="line">$ <span class="built_in">cd</span> /path/to/myApp</span><br><span class="line">$ heroku create <span class="comment"># Heroku 上に新しいアプリケーションを作成</span></span><br><span class="line">Creating app... <span class="keyword">done</span>, ⬢ shielded-scrubland-xxxxx</span><br><span class="line">https://shielded-scrubland-xxxxx.herokuapp.com/ | https://git.heroku.com/shielded-scrubland-xxxxx.git</span><br><span class="line">$ git init <span class="comment"># アプリケーションプロジェクトの Git 初期化</span></span><br><span class="line">$ git remote add heroku https://git.heroku.com/shielded-scrubland-xxxxx.git</span><br><span class="line">$ git add --all</span><br><span class="line">$ git commit -m <span class="string">"first commit"</span></span><br><span class="line">$ git push heroku master <span class="comment"># Heroku へアプリケーションをデプロイ</span></span><br><span class="line">$ heroku open <span class="comment"># ブラウザを立ち上げてページを表示</span></span><br><span class="line">$ heroku <span class="built_in">help</span> <span class="comment"># USAGE</span></span><br><span class="line">$ heroku apps <span class="built_in">help</span> <span class="comment"># apps の USAGE</span></span><br></pre></td></tr></table></figure><h2 id="アドオン">アドオン</h2><p>アドオンを CLI から適用する方法は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku addons:create xxxx</span><br></pre></td></tr></table></figure><h2 id="プロセスの確認停止">プロセスの確認、停止</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ heroku apps:info <span class="comment"># アプリケーションの情報を見る</span></span><br><span class="line">$ heroku ps <span class="comment"># プロセスを見る</span></span><br><span class="line">$ heroku logs <span class="comment"># ログを見る</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku ps:scale web=0 <span class="comment"># 停止</span></span><br><span class="line">$ heroku ps:scale web=1 <span class="comment"># 起動</span></span><br></pre></td></tr></table></figure><p>Webプロセスのスケール（Dyno、インスタンス台数）を 0 に指定して実質プロセスを停止している。</p><h1 id="小ネタめも">小ネタめも</h1><h2 id="node.js-アプリケーション">node.js アプリケーション</h2><p><code>$ heroku open</code> でエラーが発生した場合は以下に対応。</p><ul><li>npm script に <strong>start</strong> を追加する<ul><li><code>"start": "node app/app.js"</code></li></ul></li></ul><p>Heroku ではアプリケーションの起動方法に各プログラミング言語毎にルールがあるので注意。</p><h2 id="つのアプリケーションを複数のheroku環境へデプロイ">１つのアプリケーションを複数のHeroku環境へデプロイ</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku create アプリ名 --remote 新環境名</span><br><span class="line">$ git push 新環境名 master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Heroku は salesforce が運営する PaaS 。&lt;br&gt;
Free プランではクレカ登録無しで月に 550 dyno hours （約 23 日分、 1 ヶ月分無い）、クレカ登録すると月に 1000 dyno hours を無料で利用できる。&lt;br&gt;
Free プランの落とし穴は、 30 分アクセスが無いとインスタンス（ dyno ）が Sleep してしまうところ。　　 以下、 Free プランでアカウントを取得している前提で記載する。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Heroku" scheme="https://pepese.github.io/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>Virtualenv入門</title>
    <link href="https://pepese.github.io/blog/virtualenv-basics/"/>
    <id>https://pepese.github.io/blog/virtualenv-basics/</id>
    <published>2017-12-07T09:42:57.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="noopener">Virtualenv</a> についてかるくまとめる。<br>以下の記事を読んで pyenv を導入済みである前提で記載する。</p><ul><li><a href="https://pepese.github.io/blog/anyenv/">すべての**envを管理するanyenv</a></li></ul><a id="more"></a><h1 id="はじめに">はじめに</h1><p>ややこしい他ツールがあるので少しまとめる。</p><ul><li>pyenv-virtualenv<ul><li>pyenv で導入した各 Python の site-packages を管理するツール</li><li>Virtualenv とは全く別物</li></ul></li><li>Virtualenv<ul><li>Python で作成する各プロジェクト毎のモジュール・ライブラリのバージョンを管理するツール<ul><li>厳密に言うと、プロジェクト毎というか、環境のみをそれぞれ作成・管理できる感じ</li></ul></li><li>今回のターゲット</li></ul></li><li>venv<ul><li>Virtualenv とほぼ同じ機能</li><li>Virtualenv の方がデファクトの模様</li><li>Virtualenv が Python 2 系 3 系両方に対応しているのにたいして venv は 3 系対象</li></ul></li><li>virtualenvwapper<ul><li>Virtualenv のラッパー</li><li>今回は使わない</li></ul></li></ul><h1 id="環境設定">環境設定</h1><h2 id="pip-の更新と確認">pip の更新と確認</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br><span class="line">$ pip list --format=columns</span><br></pre></td></tr></table></figure><h2 id="virtualenv-のインストールと使い方">Virtualenv のインストールと使い方</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenv</span><br><span class="line">$ <span class="built_in">cd</span> /path/to/project</span><br><span class="line">$ virtualenv .virtualenv <span class="comment"># .virtualenv という名前でディレクトリができる</span></span><br><span class="line">$ <span class="built_in">source</span> .virtualenv/bin/activate <span class="comment"># これで .virtualenv の環境になる</span></span><br><span class="line">(.virtualenv) $ <span class="comment"># いつも通り pip で欲しいモジュールを導入・削除・更新する</span></span><br><span class="line">(.virtualenv) $ deactivate <span class="comment"># 環境をぬける</span></span><br></pre></td></tr></table></figure><p>Windows の場合は <code>.virtualenv\Scripts\activate</code> が環境実行用のスクリプト。<br><code>.virtualenv</code> ディレクトリを削除するば、環境が削除される。<br>gemfile とか package.json みたいなファイルベースではなく、環境を切り替える使い方。</p><h1 id="virtualenv-を使わない環境共有方法">Virtualenv を使わない環境共有方法</h1><p>Virtualenv など Python エコシステムを利用するとバージョン管理システムなどでプロジェクトを共有する際、モジュール・ライブラリのバージョンを共有しにくい印象。</p><h2 id="requirements.txt">requirements.txt</h2><p><code>requirements.txt</code> というファイル（名前は任意）に現在の <code>pip</code> でのインストール状況を出力する方法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br><span class="line">$ cat requirements.txt</span><br><span class="line">aniso8601==1.3.0</span><br><span class="line">appnope==0.1.0</span><br><span class="line">bleach==1.5.0</span><br><span class="line">certifi==2017.7.27.1</span><br><span class="line"><span class="comment"># (省略)</span></span><br></pre></td></tr></table></figure><p>残された <code>requirements.txt</code> を使って以下のようにインストールする。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  pip install -r requieremnts.txt</span><br></pre></td></tr></table></figure><p>その他実践的な方法は以下を参照。<br><a href="https://qiita.com/zakuro9715/items/68c8d8c6b1b05f91fa2e" target="_blank" rel="noopener">Python アプリ依存パッケージ管理 ベストプラクティス集</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://virtualenv.pypa.io/en/stable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Virtualenv&lt;/a&gt; についてかるくまとめる。&lt;br&gt;
以下の記事を読んで pyenv を導入済みである前提で記載する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/anyenv/&quot;&gt;すべての**envを管理するanyenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Virtualenv" scheme="https://pepese.github.io/tags/Virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>Pythonで機械学習 レコメンド編</title>
    <link href="https://pepese.github.io/blog/python-ml-recommendation/"/>
    <id>https://pepese.github.io/blog/python-ml-recommendation/</id>
    <published>2017-11-26T08:19:16.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>代表的なレコメンドアルゴリズムと Python での実装をまとめる。<br>スクラッチではなく、できるだけライブラリ（ <a href="http://surpriselib.com/" target="_blank" rel="noopener">scikit-surprise</a> ）を利用する。</p><a id="more"></a><h1 id="レコメンドアルゴリズム">レコメンドアルゴリズム</h1><ul><li>ポピュラリティ<ul><li>所謂人気ランキング</li></ul></li><li>コンテンツベース（内容ベース）フィルタリング<ul><li>アイテム間の類似度に基づいたレコメンド<ul><li>アイテムの特徴ベクトルで類似度（ Cos 類似度など）ソートしてレコメンドする方法</li><li>例：野球のバットを買った人には野球のボールをおすすめしよう</li></ul></li><li><a href="http://ohke.hateblo.jp/entry/2017/10/13/230000" target="_blank" rel="noopener">参考</a></li></ul></li><li>協調フィルタリング<ul><li>ユーザの利用履歴を扱う</li><li>トランザクションデータ、ユーザ・アイテム行列</li></ul></li><li>上記のハイブリッド</li></ul><p>ここでは <strong>協調フィルタリング</strong> を扱う。</p><p><a href="http://www.kamishima.net/archive/recsysdoc.pdf" target="_blank" rel="noopener">参考：推薦システムのアルゴリズム</a></p><p>レコメンドアルゴリズムでよく発生するネガティブが出来事は以下。</p><ul><li>同じようなアイテムばかりレコメンドされる</li><li>人気のアイテム、長期間掲載しているアイテムばかりレコメンドされる</li><li>数年に一度しか購入しない物に対するレコメンド結果がずっと表示される</li><li>ユーザー行動履歴が十分に蓄積されていないと精度がでない</li><li>データの管理コストがでかい</li><li>レコメンドの計算コストがでかい</li></ul><h2 id="協調フィルタリング">協調フィルタリング</h2><p>協調フィルタリングには主に以下の種類がある。</p><ul><li>メモリベース（近傍ベース）<ul><li>ユーザ・アイテム行列をそのまま利用、モデルを作成しない</li><li>類似度の高いユーザ、アイテムを集め、実際の値と類似度の <strong>加重平均</strong> で評価値を算出する</li><li>以下の手法がある<ul><li>ユーザベース</li><li>アイテムベース</li></ul></li><li>スパース性（データサイズに対して意味のある情報が少ない、 0 が多い行列）の高いデータには適用し辛い</li></ul></li><li>モデルベース<ul><li>事前に調べておいたデータの規則性を使って予測</li><li>ユーザ・アイテム行列をモデル構築に利用</li><li>モデルの種類には以下がある。<ul><li>行列因子分解（Matrix Factorization）モデル<ul><li>ユーザ・アイテム行列をユーザ行列（user × k）とアイテム行列（item × k）に分解する際、既に値があるセルの値の誤差が最小になるようにする<ul><li>分解した後の行列の積をとって元に戻した際、値の入っていなかったセルに値が入っており、その値を評価値とする</li></ul></li><li>特異値分解（SVD：Singular Value Decomposition）</li><li>非負値行列因子分解（NMF：Non-negative Matrix Factorization）<ul><li>SVDと異なり、分解した行列の要素が全て正の数</li><li>交互最小二乗法（ALS：Alternative Least Squares）や確率的勾配降下法（SGD：Stochastic Gradient Descent）を用いて実施</li></ul></li></ul></li><li>クラスタモデル<ul><li>嗜好が類似した利用者のグループごとに推薦をする</li></ul></li><li>関数モデル<ul><li>利用者の嗜好パターンから，アイテムの評価値を予測する関数</li></ul></li><li>確率モデル<ul><li>行動分布型：どの利用者が，どのアイテムを，どう評価したかの分布をモデル化</li><li>評価分布型：全アイテムに対する評価値の同時分布をモデル化</li><li>ナイーブベイズ、ベイジアンネットワークなど</li></ul></li><li>時系列モデル<ul><li>マルコフ過程：アイテムを評価した時間的順序も考慮</li><li>マルコフ決定過程(MDP：Markov Decision Process)：加えて，利用者の行動もモデル化</li></ul></li></ul></li></ul></li><li>上記のハイブリッド</li></ul><p>狭義の協調フィルタリングは、近傍ベースを指す。</p><h3 id="メモリベース協調フィルタリング">メモリベース協調フィルタリング</h3><p>メモリベース協調フィルタリングのコンセプトは、「類似度」。<br>過去の利用履歴から似たもの同士を明らかにし、この類似度を使ってオススメ商品を推定する。<br>類似度といった場合、ユーザ同士の類似度と商品同士の類似度の 2 つが考えられ、前者を使う場合をユーザベース、後者をアイテムベースと言って区別する。</p><ul><li>ユーザベース<ul><li>ユーザーの行動履歴からユーザー間の類似度を計算し、おすすめするアイテムを決める手法</li><li>例<ul><li>Aさんに何かおすすめしたい、Aさんは商品a、商品b、商品cを買っている。</li><li>同じような行動履歴のBさんは商品a、商品b、商品c、商品dを買っている、ということはAさんには商品dをおすすめできる</li></ul></li></ul></li><li>アイテムベース<ul><li>ユーザーの行動履歴からアイテム間の類似度を計算し、類似するアイテムをおすすめする手法</li><li>例<ul><li>商品Aは商品Bと一緒に購入されることが多いから、商品Aの購入者に商品Bをおすすめしよう</li></ul></li></ul></li></ul><h4 id="ユーザベース">ユーザベース</h4><p>ユーザベース協調フィルタリングのロジックは、いわゆるkNN回帰という機械学習手法を利用する。<br>kNN（k-Nearest-Neighbor、<strong>k近傍法</strong> ）を簡単に説明すると、推定する対象に最も特徴が似ているk個の観測値を参考にし、値を推定しようというもの。<br>アルゴリズムの概要は以下の通り。</p><ol type="1"><li>あるユーザと他のユーザの <strong>類似度</strong> を計算</li><li>レコメンドしたい対象ユーザ（ユーザ A ）と類似度の高い k 名のユーザを選ぶ</li><li>他のユーザ利用したアイテムのうち、ユーザAがまだ利用していないアイテムの集合を抽出</li><li>それらのアイテム群のうち、おすすめ度が高いアイテムのリストを返却<ul><li>この選定の際に、類似度が高いユーザが利用したアイテムほど重みが高くなるようにする</li></ul></li></ol><h4 id="アイテムベース">アイテムベース</h4><p>ユーザベースはユーザ同士の類似度を考えたのに対して、アイテムベースはアイテム同士の類似度を考える。<br>それ以外の考え方はユーザベースに同じ。</p><h4 id="用いられる類似度">用いられる類似度</h4><p>類似度には以下のようなものがある。</p><ul><li>ユークリッド距離（ Euclidean distance ）<ul><li>平方ユークリッド距離（ Squared Euclidean distance ）</li><li>2 点間の普通の距離</li></ul></li><li>コサイン類似度（ Cosine Similarity ）</li><li>ピアソンの積率相関係数（ Pearson correlation coefficient ）<ul><li>ユーザの評価をそのユーザの評価全体の平均を用いて正規化する</li><li>データが正規化されていないような状況でユークリッド距離よりも良い結果を得られることが多いとされる</li></ul></li></ul><p>ユーザベースでは、 <strong>ピアソンの積率相関係数</strong> を用いる。<br>そうすることによって以下のように評価の傾向が似ている 2 ユーザ間で高い相関を得られる。</p><ul><li>ユーザ A ：「ラーメンはまずまずで 3 点だがカレーとチャーハンはイマイチだから 1.5 点だな……。」</li><li>ユーザ B ：「ラーメンはうまくて 5 点だがカレーとチャーハンはふつうで 3.5 点だな……。」</li></ul><p>また、アイテムベースでは <strong>コサイン類似度</strong> がよく用いられる。</p><h1 id="実装">実装</h1><p>scikit-surprise ベースで実装する。</p><h2 id="環境設定">環境設定</h2><p>環境設定は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 3.6.1</span><br><span class="line">$ pip -V</span><br><span class="line">pip 9.0.1</span><br><span class="line">$ pip install jupyter scikit-learn matplotlib scipy numpy scikit-surprise</span><br><span class="line">$ pip freeze | grep scikit-surprise</span><br><span class="line">scikit-surprise==1.0.5</span><br></pre></td></tr></table></figure><h2 id="データセット">データセット</h2><p>データセットには <a href="http://www.kamishima.net/sushi/" target="_blank" rel="noopener">SUSHI Preference Data Sets</a> を使用する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www.kamishima.net/asset/sushi3-2016.zip</span><br><span class="line">$ unzip sushi3-2016.zip</span><br><span class="line">$ rm sushi3-2016.zip</span><br><span class="line">$ ls ./sushi3-2016/</span><br><span class="line">README-en.txt</span><br><span class="line">sushi3.idata</span><br><span class="line">sushi3b.5000.10.order</span><br><span class="line">README-ja.txt</span><br><span class="line">sushi3.udata</span><br><span class="line">sushi3b.5000.10.score</span><br><span class="line">README-stat-ja.txt</span><br><span class="line">sushi3a.5000.10.order</span><br></pre></td></tr></table></figure><p><code>sushi3b.5000.10.score</code> は 5000 行 100 列( 5000 人 × 寿司ネタ 100 種類)の構成となっており、各要素には評価値 0 〜 4 (値が大きいほど、好き)と、欠測値 -1 がセットされている。</p><h2 id="データのロード">データのロード</h2><p>scikit-surprise でデータをロードするには、 <code>Dataset</code> クラスに対応した形式にする必要がある。<br>形式は <strong>1行1評価値</strong> で、以下のようにする。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ユーザID アイテムID 評価値</span><br></pre></td></tr></table></figure><p><code>sushi3b.5000.10.score</code> を上記の形式に変換・Dataset形式でロードするコードは以下。<br>なお、ユーザ ID は 0000 〜 4999 、アイテム ID は 00 〜 99 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(input_file_name)</span>:</span></span><br><span class="line">    <span class="comment"># 返還後のファイル名</span></span><br><span class="line">    output_file_name = input_file_name + <span class="string">'_converted'</span></span><br><span class="line">    output = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(input_file_name, mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        user_id = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            words = line.strip().split(<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">for</span> item_id, word <span class="keyword">in</span> enumerate(words):</span><br><span class="line">                score = int(word)</span><br><span class="line">                <span class="keyword">if</span> score != <span class="number">-1</span>:</span><br><span class="line">                    output += <span class="string">'&#123;0:04d&#125; &#123;1:02d&#125; &#123;2:01d&#125;\n'</span>.format(user_id, item_id, score)</span><br><span class="line">            user_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(output_file_name, mode=<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output_file_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 「ユーザID アイテムID 評価値」形式にデータファイルを変換</span></span><br><span class="line">output_file_name = convert(<span class="string">'sushi3-2016/sushi3b.5000.10.score'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(output_file_name, mode='r') as f:</span></span><br><span class="line"><span class="comment">#     print(f.read())</span></span><br></pre></td></tr></table></figure><p>データフォーマットを変換した後、以下のように <code>Dataset</code> 形式でデータをロードし、 <code>trainset</code> を作成する。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> Reader, Dataset</span><br><span class="line"></span><br><span class="line"><span class="comment"># ファイルからデータをロードし、Dataset形式に</span></span><br><span class="line"><span class="comment"># dataset.raw_ratings にデータが格納される</span></span><br><span class="line">dataset = Dataset.load_from_file(output_file_name, reader=reader)</span><br><span class="line"><span class="comment"># dataset を計算し、trainset 形式に</span></span><br><span class="line">trainset = dataset.build_full_trainset()</span><br></pre></td></tr></table></figure><p><code>dataset</code> から <code>trainset</code> へ変換される際、元の <code>user_id</code> <code>item_id</code> から読み込んだ順に 0 からインクリメントされた内部 ID へ変換される。</p><p><code>dataset</code> には以下のようなフィールドがある。（面倒なので説明は一部のみ）</p><ul><li>build_full_trainset</li><li>construct_testset</li><li>construct_trainset</li><li>folds</li><li>load_builtin : scikit-surprise が準備しているデータセットの読み込み</li><li>load_from_df : DataFrame 形式のデータを Dataset 形式へ変換するメソッド</li><li>load_from_file : ファイルからデータをロードし、 Dataset 形式へ変換するメソッド</li><li>load_from_folds : ファイルからデータをロードし、 Dataset 形式へ変換するメソッド（クロスバリデーションなどで利用）</li><li>n_folds</li><li>ratings_file</li><li>raw_folds</li><li>raw_ratings : <code>ユーザID アイテムID 評価値 None</code> 形式のデータ</li><li>read_ratings</li><li>reader</li><li>shuffle</li><li>split</li></ul><p><code>trainset</code> には以下のようなフィールドがある。（面倒なので説明は一部のみ）</p><ul><li>all_items : n_items の range を返却するメソッド</li><li>all_ratings</li><li>all_users</li><li>build_anti_testset</li><li>build_testset</li><li>global_mean : 評価値の平均（ <code>_global_mean</code> ）を計算するメソッド</li><li>ir : ユーザ ID をインデクスとした各アイテムの評価値のタプル</li><li>knows_item</li><li>knows_user</li><li>n_items : アイテム数</li><li>n_ratings : 評価数（ユーザ数 x アイテム数、欠損は考えられていない）</li><li>n_users : ユーザ数</li><li>offset</li><li>rating_scale</li><li>to_inner_iid : 元の <code>item_id</code> を入力すると <code>trainset</code> 内部管理の ID を返却する</li><li>to_inner_uid：元の <code>user_id</code> を入力すると <code>trainset</code> 内部管理の ID を返却する</li><li>to_raw_iid： <code>trainset</code> 内部管理の ID を入力すると元の <code>item_id</code> を返却する</li><li>to_raw_uid： <code>trainset</code> 内部管理の ID を入力すると元の <code>user_id</code> を返却する</li><li>ur : アイテム ID をインデクスとした各ユーザの評価値のタプル</li></ul><h2 id="協調フィルタリング-1">協調フィルタリング</h2><p>scikit-surprise で実装できるアルゴリズムの一覧は <a href="http://surprise.readthedocs.io/en/stable/prediction_algorithms_package.html" target="_blank" rel="noopener">ここ</a> 。</p><p>scikit-surprise の各アルゴリズムのクラスは <code>AlgoBase</code> クラスを継承して作成されている。<br>このクラスには、 <code>compute_similarities</code> や <code>algo.train(trainset)</code> など全てのアルゴリズムで共通して利用される実装されている。<br><code>sim_options</code> オプションを利用することで、類似度の計算方法（ cosine 、 msd 、 pearson 、 pearson_baseline ）やユーザベースかアイテムベース（ user_based ）などを指定することができる。</p><h3 id="メモリベース協調フィルタリング-1">メモリベース協調フィルタリング</h3><p>以下のような形で各アルゴリズムの学習を実行する。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> KNNBasic</span><br><span class="line"></span><br><span class="line">sim_options = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'pearson'</span>, <span class="comment"># 類似度を計算する方法を指定（ cosine,msd,pearson,pearson_baseline ）</span></span><br><span class="line">    <span class="string">'user_based'</span>: <span class="keyword">True</span> <span class="comment"># False にするとアイテムベースに</span></span><br><span class="line">&#125;</span><br><span class="line">algo = KNNBasic(k=<span class="number">5</span>, min_k=<span class="number">1</span>,sim_options=sim_options)</span><br><span class="line">algo.fit(trainset)</span><br></pre></td></tr></table></figure><p>上記で、 <strong>k近傍法</strong> の学習が完了する。<br><code>algo.compute_similarities()</code> を実行するとユーザ間の類似度を計算してくれ、「ユーザ数 x ユーザ数」の 2 次元配列を返却する。<br>なお、 <code>algo.train</code> を実行すると内部で <code>algo.compute_similarities()</code> が実行されており、その後 <code>algo.sim</code> で「ユーザ数 x ユーザ数」の 2 次元配列でユーザ間の類似度を取得できる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(train.sim)</span><br></pre></td></tr></table></figure><p>また、以下のように学習後のモデルを使用して評価の予測値を取得できる。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_id = <span class="string">'&#123;:04d&#125;'</span>.format(<span class="number">0</span>)</span><br><span class="line">item_id = <span class="string">'&#123;:02d&#125;'</span>.format(<span class="number">92</span>)</span><br><span class="line"></span><br><span class="line">pred = algo.predict(uid=user_id, iid=item_id)</span><br><span class="line">print(<span class="string">'Predicted rating(User: &#123;0&#125;, Item: &#123;1&#125;): &#123;2:.2f&#125;'</span>.format(pred.uid, pred.iid, pred.est))</span><br></pre></td></tr></table></figure><p>スクラッチでの実装例は以下。</p><ul><li>ユーザベース<ul><li>http://ohke.hateblo.jp/entry/2017/09/22/230000</li><li>https://qiita.com/hik0107/items/96c483afd6fb2f077985</li></ul></li><li>アイテムベース<ul><li>http://ohke.hateblo.jp/entry/2017/09/29/230000</li><li>https://qiita.com/kotaroito/items/6acb58bb16b68a460af9</li></ul></li></ul><h3 id="モデルベース協調フィルタリング">モデルベース協調フィルタリング</h3><h4 id="特異値分解-svd">特異値分解（ SVD ）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> surprise <span class="keyword">import</span> SVD</span><br><span class="line"></span><br><span class="line">algo = SVD()</span><br><span class="line">algo.fit(trainset)</span><br></pre></td></tr></table></figure><h2 id="精度評価">精度評価</h2><p>精度の評価には以下のものがある。</p><ul><li>MAE（Mean Abusolute Error）<ul><li>予測値と実測値の差の絶対値を算出し、平均したもの</li></ul></li><li>MSE (Mean Squared Error)<ul><li>予測値と実測値の差を二乗した値の平均値</li></ul></li><li>RMSE（Root Mean Squared Error）<ul><li>MSEの平方根</li></ul></li></ul><h1 id="参考">参考</h1><ul><li><a href="http://ohke.hateblo.jp/entry/2017/10/06/230000" target="_blank" rel="noopener">scikit-surpriseを使ってレコメンドする</a></li><li><a href="http://www.kamishima.net/archive/recsys.pdf" target="_blank" rel="noopener">推薦システム</a><ul><li>P.134：協調フィルタリング、メモリベースのチューニングのヒント</li><li>p.137：モデルベースの種類</li><li>P.215：ショートヘッド、ロングテールについて</li></ul></li><li>精度評価<ul><li><a href="http://blog.brainpad.co.jp/entry/2017/08/25/140000" target="_blank" rel="noopener">レコメンドつれづれ ～第3回 レコメンド精度の評価方法を学ぶ～</a></li><li><a href="https://www.slideshare.net/MasahiroSato2/ss-65646039" target="_blank" rel="noopener">レコメンド研究のあれこれ</a></li><li><a href="https://www.slideshare.net/takemikami/ss-76817490" target="_blank" rel="noopener">レコメンドアルゴリズムの基本と周辺知識と実装方法</a></li><li><a href="https://datahotel.io/archives/4778" target="_blank" rel="noopener">推薦システムの基本的な評価指標について整理してみた</a></li><li><a href="https://ameblo.jp/principia-ca/entry-10980281840.html" target="_blank" rel="noopener">MatrixFacorization を使った評価予測</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代表的なレコメンドアルゴリズムと Python での実装をまとめる。&lt;br&gt;
スクラッチではなく、できるだけライブラリ（ &lt;a href=&quot;http://surpriselib.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;scikit-surprise&lt;/a&gt; ）を利用する。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://pepese.github.io/tags/Python/"/>
    
      <category term="Machine Learning" scheme="https://pepese.github.io/tags/Machine-Learning/"/>
    
      <category term="scikit-surprise" scheme="https://pepese.github.io/tags/scikit-surprise/"/>
    
      <category term="Collaborative filtering" scheme="https://pepese.github.io/tags/Collaborative-filtering/"/>
    
      <category term="協調フィルタリング" scheme="https://pepese.github.io/tags/%E5%8D%94%E8%AA%BF%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>Node.js/Express/Multerでファイルアップロード・ダウンロード</title>
    <link href="https://pepese.github.io/blog/express-multer-fileupload/"/>
    <id>https://pepese.github.io/blog/express-multer-fileupload/</id>
    <published>2017-09-20T23:17:44.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js/Expressアプリケーションへファイルアップロードしてみる。<br>使用するツール・ライブラリは以下。</p><ul><li><a href="https://github.com/expressjs/multer" target="_blank" rel="noopener">Multer</a></li></ul><p>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/express-basics/">Express入門</a></li></ul><a id="more"></a><h1 id="環境設定">環境設定</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add multer</span><br></pre></td></tr></table></figure><h1 id="実装">実装</h1><p>controller 層へ以下のような実装を行う。</p><h2 id="ファイルアップロード">ファイルアップロード</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multer  = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// アップロードされたファイルをストレージへ保存する場合</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</span><br><span class="line">  <span class="comment">// ファイルの保存先を指定</span></span><br><span class="line">  destination: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">'/tmp'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ファイル名を指定(オリジナルのファイル名を指定)</span></span><br><span class="line">  filename: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, file.originalname);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// アップロードされたファイルを一時的にメモリへ保存する場合</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.memoryStorage();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 つのファイルをアップロードする場合</span></span><br><span class="line"><span class="keyword">const</span> upload_ = multer(&#123; <span class="attr">storage</span>: storage &#125;).single(<span class="string">'qafile'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  upload_(req, res, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> csvData = req.file.buffer;</span><br><span class="line">    <span class="keyword">const</span> mimetype = req.file.mimetype;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> qaData = [];</span><br><span class="line">    <span class="keyword">let</span> errorData = [];</span><br><span class="line">    <span class="keyword">if</span>(mimetype == <span class="string">'text/csv'</span> || mimetype == <span class="string">'application/vnd.ms-excel'</span>) &#123;</span><br><span class="line">      <span class="comment">// 何らかのファイルの処理ロジック</span></span><br><span class="line">      <span class="comment">// テキストファイルであれば `csvData.toString()` してから処理する</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ファイルダウンロード">ファイルダウンロード</h2><p>ダウンロード処理には特別ライブラリは必要ない。<br>CSVなどのテキストデータの場合は以下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">'hoge, hoge, hoge'</span>;</span><br><span class="line">  res.setHeader(<span class="string">'Content-disposition'</span>, <span class="string">'attachment; filename='</span> + <span class="string">'hoge.csv'</span>);</span><br><span class="line">  res.setHeader(<span class="string">'Content-type'</span>, <span class="string">'text/csv; charset=UTF-8'</span>);</span><br><span class="line">  res.write(str);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js/Expressアプリケーションへファイルアップロードしてみる。&lt;br&gt;
使用するツール・ライブラリは以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/expressjs/multer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Multer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事を読んだ前提で書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/express-basics/&quot;&gt;Express入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="yarn" scheme="https://pepese.github.io/tags/yarn/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="Multer" scheme="https://pepese.github.io/tags/Multer/"/>
    
  </entry>
  
  <entry>
    <title>Node.js/ExpressでブラウザからPUT/DELETEリクエストを発行する</title>
    <link href="https://pepese.github.io/blog/express-browser-put-delete-request/"/>
    <id>https://pepese.github.io/blog/express-browser-put-delete-request/</id>
    <published>2017-09-20T12:19:13.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js/Expressアプリケーションに対してブラウザからPUT/DELETEリクエストを発行する方法について記載する。<br>通常、ブラウザからPUT/DELETEリクエストは発行できない。<br>ここで紹介する方法も実際にブラウザからPUT/DELETEリクエストを発行しているのではなく、 <em>Node.js/Express側でPUT/DELETEリクエストとして解釈</em> しているだけ。</p><p>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/express-basics/">Express入門</a></li></ul><a id="more"></a><h1 id="環境設定">環境設定</h1><p>先の記事で紹介したプロジェクトにて以下を実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add method-override</span><br></pre></td></tr></table></figure><h1 id="実装">実装</h1><p>先の記事で紹介したプロジェクトを基準に記載する。</p><p><code>app.js</code> へ以下を加筆する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">app.use(methodOverride(<span class="string">'_method'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br></pre></td></tr></table></figure><p>上記を記載すれば、ブラウザからリクエストを発行する際、 <strong>クエリパラメータ</strong> に <code>_method=PUT</code> や <code>_method=DELETE</code> を記載することによって Node.js/Express 側で PUT/DELETE リクエストとして解釈される。<br>つまり、 <code>express.Router().put()</code> や <code>express.Router().delete()</code> へルーティングされるようになる。<br>ブラウザからのリクエストの発行の例は以下のようになる。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">form(action="/clients?_method=PUT")</span><br><span class="line">  input(type="submit" value="submit")</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a(href="/clients?_method=DELETE")</span><br></pre></td></tr></table></figure><p><code>router.put('/clients', ...</code> や <code>router.delete('/clients', ...</code> を実装すれば、上記のブラウザからのリクエストを処理することができるようになる。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js/Expressアプリケーションに対してブラウザからPUT/DELETEリクエストを発行する方法について記載する。&lt;br&gt;
通常、ブラウザからPUT/DELETEリクエストは発行できない。&lt;br&gt;
ここで紹介する方法も実際にブラウザからPUT/DELETEリクエストを発行しているのではなく、 &lt;em&gt;Node.js/Express側でPUT/DELETEリクエストとして解釈&lt;/em&gt; しているだけ。&lt;/p&gt;
&lt;p&gt;以下の記事を読んだ前提で書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/express-basics/&quot;&gt;Express入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="npm" scheme="https://pepese.github.io/tags/npm/"/>
    
      <category term="Yarn" scheme="https://pepese.github.io/tags/Yarn/"/>
    
  </entry>
  
  <entry>
    <title>JavaでDynamoDBへアクセスする</title>
    <link href="https://pepese.github.io/blog/java-dynamodb/"/>
    <id>https://pepese.github.io/blog/java-dynamodb/</id>
    <published>2017-08-30T08:44:50.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>ここでは、Java から DynamoDB にアクセスしてみる。<br>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/mac-dev-environment/">Macで開発環境を作る</a></li><li><a href="https://pepese.github.io/blog/dynamodb-basics/">DynamoDB入門</a></li></ul><a id="more"></a><h1 id="apiインターフェースの種類">API・インターフェースの種類</h1><p>AWS SDK for Java には以下のインターフェースがある。</p><ul><li>Low-Level Interface<ul><li>com.amazonaws.services.dynamodbv2.AmazonDynamoDB</li><li>テーブルの CRUD 、 Item の CRUD が可能</li><li><a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Programming.LowLevelAPI.html#Programming.LowLevelAPI.DataTypeDescriptors" target="_blank" rel="noopener">データ型識別子</a>を指定する必要がある</li></ul></li><li>Document Interface<ul><li>com.amazonaws.services.dynamodbv2.document.DynamoDB</li><li>テーブルの CR 、 Item の CRUD が可能</li><li><a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Programming.LowLevelAPI.html#Programming.LowLevelAPI.DataTypeDescriptors" target="_blank" rel="noopener">データ型識別子</a>を指定する必要がない</li></ul></li><li>High-Level Interface<ul><li>com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper</li><li>テーブル操作はできないが、 Item の CRUD が可能</li><li>Java オブジェクトを DynamoDB テーブルと属性にマッピング可能</li></ul></li></ul><p>ここでは、 Low-Level Interface を使用する。</p><h1 id="環境構築">環境構築</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mvn archetype:generate \</span><br><span class="line">  -DgroupId=com.pepese.sample \</span><br><span class="line">  -DartifactId=dynamodb-sample \</span><br><span class="line">  -DarchetypeArtifactId=maven-archetype-quickstart \</span><br><span class="line">  -DinteractiveMode=<span class="literal">false</span></span><br><span class="line">$ <span class="built_in">cd</span> dynamodb-sample</span><br><span class="line">$ mvn eclipse:eclipse</span><br></pre></td></tr></table></figure><h1 id="実装">実装</h1><ul><li>pom.xml</li><li>com.pepese.sample.App.java</li></ul><h2 id="pom.xml">pom.xml</h2><script src="https://gist-it.appspot.com/github/pepese/java-sample/blob/master/master/dynamodb-sample/pom.xml?footer=0"></script><h2 id="com.pepese.sample.app.java">com.pepese.sample.App.java</h2><script src="https://gist-it.appspot.com/github/pepese/java-sample/blob/master/dynamodb-sample/src/main/java/com/pepese/sample/dynamodb/DynamoDBClient.java?footer=0"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ここでは、Java から DynamoDB にアクセスしてみる。&lt;br&gt;
以下の記事を読んだ前提で書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/mac-dev-environment/&quot;&gt;Macで開発環境を作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/dynamodb-basics/&quot;&gt;DynamoDB入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://pepese.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://pepese.github.io/tags/Maven/"/>
    
      <category term="AWS" scheme="https://pepese.github.io/tags/AWS/"/>
    
      <category term="DynamoDB" scheme="https://pepese.github.io/tags/DynamoDB/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsでDynamoDBへアクセスする</title>
    <link href="https://pepese.github.io/blog/nodejs-dynamodb/"/>
    <id>https://pepese.github.io/blog/nodejs-dynamodb/</id>
    <published>2017-08-29T13:12:15.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>ここでは、Node.js から DynamoDB にアクセスしてみる。<br>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/nodejs-basics/">Node.js/npm入門</a></li><li><a href="https://pepese.github.io/blog/dynamodb-basics/">DynamoDB入門</a></li></ul><a id="more"></a><h1 id="環境構築">環境構築</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir dynamodb-js</span><br><span class="line">$ <span class="built_in">cd</span> dynamodb-js</span><br><span class="line">$ yarn init</span><br><span class="line">$ yarn add aws-sdk</span><br><span class="line">$ touch .gitignore</span><br><span class="line">$ aws dynamodb create-table \</span><br><span class="line">  --attribute-definitions <span class="string">'[&#123;"AttributeName":"test_hash","AttributeType":"S"&#125;,&#123;"AttributeName":"test_range","AttributeType":"S"&#125;]'</span> \</span><br><span class="line">  --table-name <span class="string">'test_table'</span> \</span><br><span class="line">  --key-schema <span class="string">'[&#123;"AttributeName":"test_hash","KeyType":"HASH"&#125;,&#123;"AttributeName":"test_range","KeyType":"RANGE"&#125;]'</span> \</span><br><span class="line">  --provisioned-throughput <span class="string">'&#123;"ReadCapacityUnits":5,"WriteCapacityUnits":5&#125;'</span></span><br></pre></td></tr></table></figure><p><code>.gitignore</code> を下記のように編集しておく。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">.DS_Store</span><br><span class="line">./**/.DS_Store</span><br></pre></td></tr></table></figure><h1 id="実装">実装</h1><p><a href="http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html" target="_blank" rel="noopener">API Document</a>を参考のこと。<br>以下を作成する。</p><ul><li>app/dynamodb.js</li><li>app/putItem.js</li><li>app/getItem.js</li><li>app/deleteItem.js</li></ul><p><a href="https://pepese.github.io/blog/dynamodb-basics/">DynamoDB入門</a> で作成したテーブルにアクセスする前提。</p><h2 id="appdynamodb.js">app/dynamodb.js</h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/dynamodb-js/app/dynamodb.js?footer=0"></script><h2 id="appputitem.js">app/putItem.js</h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/dynamodb-js/app/putItem.js?footer=0"></script><h2 id="appgetitem.js">app/getItem.js</h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/dynamodb-js/app/getItem.js?footer=0"></script><h2 id="appdeleteitem.js">app/deleteItem.js</h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/dynamodb-js/app/deleteItem.js?footer=0"></script><h1 id="実行">実行</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node app/putItem.js</span><br><span class="line">$ node app/getItem.js</span><br><span class="line">$ node app/deleteItem.js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ここでは、Node.js から DynamoDB にアクセスしてみる。&lt;br&gt;
以下の記事を読んだ前提で書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/nodejs-basics/&quot;&gt;Node.js/npm入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/dynamodb-basics/&quot;&gt;DynamoDB入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="https://pepese.github.io/tags/AWS/"/>
    
      <category term="DynamoDB" scheme="https://pepese.github.io/tags/DynamoDB/"/>
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="yarn" scheme="https://pepese.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB入門</title>
    <link href="https://pepese.github.io/blog/dynamodb-basics/"/>
    <id>https://pepese.github.io/blog/dynamodb-basics/</id>
    <published>2017-08-29T10:53:28.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>ここでは、 DynamoDB の概要と AWS CLI でのアクセスまでまとめる。</p><ul><li>DynamoDB の概要</li><li>DynamoDB の API</li><li>AWS CLI で DynamoDB へアクセス</li></ul><a id="more"></a><h1 id="dynamodb-の概要">DynamoDB の概要</h1><p>DynamoDB は AWS が提供する Key-Value 型 NoSQL のマネージドサービス。<br>スキーマレスであるため、テーブル作成時に Key 以外の設定は必要ない。<br>以下の順で説明していく。</p><ul><li>Value</li><li>Key</li><li>テーブル</li><li>パーティション</li><li>セカンダリインデックス</li><li>キャパシティユニット</li></ul><h2 id="value">Value</h2><p>DynamoDB の Value は <strong>Item</strong> （ <strong>項目</strong> ）と呼ばれ、 1 つ以上の <strong>Attribute</strong> （ <strong>属性</strong> ）を持つ。<br>Item は RDB でいうレコードに該当する。<br>1つの Attribute につき、以下を指定する。</p><ul><li>Attribute Name<ul><li>属性名</li></ul></li><li>Attribute Type<ul><li>属性の型、以下の型がある<ul><li><strong>スカラー型</strong><ul><li><strong>1つ</strong> の値を持つことができ、 <strong>数値</strong> 、<strong>文字列</strong> 、 <strong>バイナリ</strong> 、 <strong>ブール</strong> 、 <strong>null</strong> を選択できる</li></ul></li><li><strong>ドキュメント型</strong><ul><li><strong>入れ子</strong> の値を持つことができ、 <strong>リスト</strong> 、 <strong>マップ</strong> を選択できる</li><li>リスト要素に保存できるデータ型に制限はなく、全て同じ型である必要はない</li><li>マップは JSON オブジェクトと同様</li></ul></li><li><strong>セット型</strong><ul><li><strong>複数</strong> の値を持つことができ、 <strong>数値</strong> 、<strong>文字列</strong> 、 <strong>バイナリ</strong> を選択できる</li><li><strong>セット内の全ての要素は同じ型</strong> である必要がある</li></ul></li></ul></li></ul></li><li>Attribute Value<ul><li>Attribute Type に沿った属性の値</li></ul></li></ul><p>DynamoDBの各種キーは、 Item の中の Attribute から選択することになる。</p><h3 id="ドキュメント型リストの例">ドキュメント型/リストの例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FavoriteThings: [&quot;Cookies&quot;, &quot;Coffee&quot;, 3.14159]</span><br></pre></td></tr></table></figure><h3 id="ドキュメント型アップの例">ドキュメント型/アップの例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Day: &quot;Monday&quot;,</span><br><span class="line">    UnreadEmails: 42,</span><br><span class="line">    ItemsOnMyDesk: [</span><br><span class="line">        &quot;Coffee Cup&quot;,</span><br><span class="line">        &quot;Telephone&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">            Pens: &#123; Quantity : 3&#125;,</span><br><span class="line">            Pencils: &#123; Quantity : 2&#125;,</span><br><span class="line">            Erasers: &#123; Quantity : 1&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="セット型の例">セット型の例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[&quot;Black&quot;, &quot;Green&quot; ,&quot;Red&quot;]</span><br><span class="line"></span><br><span class="line">[42.2, -19, 7.5, 3.14]</span><br><span class="line"></span><br><span class="line">[&quot;U3Vubnk=&quot;, &quot;UmFpbnk=&quot;, &quot;U25vd3k=&quot;]</span><br></pre></td></tr></table></figure><h2 id="key">Key</h2><p>DynamoDB では Key を <strong>プライマリーキー</strong> と呼び、以下の2種類の構成から選択できる。</p><ol type="1"><li><strong>パーティションキー</strong> のみの単純キー</li><li><strong>パーティションキー</strong> と <strong>ソートキー</strong> の複合キー</li></ol><p>パーティションキー、ソートキー共に Value で紹介した <strong>Attribute と同様</strong> の定義となる。<br>パーティションキーは <strong>Hash Key</strong> 、 ソートキーは <strong>Range Key</strong> とも呼ばれることもある。</p><h2 id="テーブル">テーブル</h2><p>テーブルは <strong>テーブル名</strong> と <strong>プライマリーキー</strong> （オプションで、ローカルセカンダリインデックス ）で定義することができる。</p><h2 id="パーティション">パーティション</h2><p>DynamoDB はテーブルが作成された際に自動でパーティションが作成され、また、自動で管理される。 1つのパーティションには、 <strong>スループット</strong> と <strong>データ容量が</strong> が決まっており、それぞれ上限を超えたら自動的に新規にパーティションが作成される。 パーティションは <strong>パーティションキー</strong> と <strong>ソートキー</strong> から決定される。</p><p>DynamoDB はパーティションキーをハッシュ関数への入力し、その出力値に応じてパーティションを特定する。 Item はソートキーの値でソートされ、データ量が 10GB を超える場合はソートキーによりパーティション分割される。</p><h2 id="セカンダリインデックス">セカンダリインデックス</h2><p>テーブルで 1 つ以上の<a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/SecondaryIndexes.html" target="_blank" rel="noopener">セカンダリインデックス</a>（単に、インデックスともいう）を作成できる。<br>セカンダリインデックスは必須ではないが、利用することにより query/scan の速度を向上することができる。</p><p>DynamoDB のインデックスには以下の 2 つある。</p><ul><li><a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/GSI.html" target="_blank" rel="noopener">グローバルセカンダリインデックス</a> （ <strong>Global Secondary Index</strong> / <strong>GSI</strong> ）<ul><li>テーブルと異なるパーティションキー（必須）とソートキー（オプション）を持つインデックス</li><li>テーブル作成後に変更 <strong>可能</strong></li><li>キャパシティーユニットの設定が <strong>必要</strong></li><li><a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/GuidelinesForGSI.html" target="_blank" rel="noopener">ベストプラクティス</a></li></ul></li><li><a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/LSI.html" target="_blank" rel="noopener">ローカルセカンダリインデックス</a> （ <strong>Local Secondary Index</strong> / <strong>LSI</strong> ）<ul><li>テーブルと同じパーティションキー（必須）と、異なるソートキー（必須）を持つインデックス</li><li>テーブル作成後に変更 <strong>不可能</strong></li><li>キャパシティーユニットは <strong>テーブルのキャパシティーユニットと同じ</strong></li><li><a href="http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/GuidelinesForLSI.html" target="_blank" rel="noopener">ベストプラクティス</a></li></ul></li></ul><p>テーブルあたり最大 5 個の GSI と 5 個の LSI を定義できる。<br>全てのセカンダリインデックスは <strong>完全に 1 つのテーブルに関連付け</strong> られ、そこからデータを取得します。<br>また、ソートキーの Attribute に条件を適用して <strong>Item をフィルタリング</strong> することができる。</p><h2 id="キャパシティユニット">キャパシティユニット</h2><p>DynamoDB では <strong>キャパシティーユニット</strong> という単位で、書き込みと読み込みのスループットキャパシティが決定される。<br>DyanamoDB のテーブル作成時には <strong>読み込みキャパシティーユニット</strong> と <strong>書き込みキャパシティーユニット</strong> を指定する必要がある。</p><ul><li><strong>強力な整合性のある</strong> 読み込みキャパシティーユニット<ul><li>『1 キャパシティーユニット』＝『「最大 <strong>4</strong> KB の Item 1 つ」を「 1 秒間」に「 1 回」の読み込む』<ul><li>4 KB より大きい項目を読み込む場合は、追加の読み込みキャパシティーユニットを消費する</li></ul></li></ul></li><li><strong>結果的に整合性のある</strong> 読み込みキャパシティーユニット<ul><li>『1 キャパシティーユニット』＝『「最大 <strong>4</strong> KB の Item 1 つ」を「 1 秒間」に「 <strong>2</strong> 回」の読み込む』<ul><li>4 KB より大きい項目を読み込む場合は、追加の読み込みキャパシティーユニットを消費する</li></ul></li></ul></li><li>書き込みキャパシティーユニット<ul><li>『1 キャパシティーユニット』＝『「最大 <strong>1</strong> KB の Item 1 つ」を「 1 秒間」に「 1 回」の書き込む』<ul><li>1 KB より大きい項目を書き込む場合は、追加の書き込みキャパシティーユニットを消費する</li></ul></li></ul></li></ul><p>例えば、 <strong>強力な整合性のある</strong> 読み込みキャパシティーユニットであれば「最大 <strong>4</strong> KB の Item 1 つ」なので、「 3.5 KB の Item 1 つ を 1 秒に 1 回読み込み」でも「 1 キャパシティーユニット」になる。<br>「 3.5 KB の Item 1 つ を 1 秒に 2 回読み込み」であれば「 2 キャパシティユニット」、「 0.5 KB の Item 1 つ を 1 秒に 10 回読み込み」であれば「 10 キャパシティユニット」、「 2.1 KB の Item 5 つ を 1 秒に 3 回読み込み」であれば「 15 キャパシティユニット」となる。</p><p><strong>結果的に整合性のある</strong> 読み込みキャパシティーユニットであれば、 <strong>強力な整合性のある</strong> 読み込みキャパシティーユニットの <strong>2倍</strong> のキャパシティー、つまりキャパシティユニットの数字は <strong>半分</strong> となるのみで考え方は同様。<br>書き込みキャパシティーユニットであれば「最大 <strong>1</strong> KB の Item」部分異なるのみで考え方は同様。</p><p>さらに例を挙げる。<br>「 20 KB の Item 1 つを 1 秒間に強力な整合性のある読み込み」を行う場合は「 5 キャパシティーユニット」（ 20 KB = 4 KB × <strong>5</strong> なので）。<br>「 20 KB の Item 1 つを 1 秒間に結果的に整合性のある読み込み」を行う場合は「 2.5 キャパシティーユニット」（ 20 KB = 4 KB × 5 の <strong>2倍</strong> のキャパシティなのでキャパシティーユニットの数字は <strong>半分</strong> ）。<br>「 40 KB の Item 1 つを 1 秒間に結果的に整合性のある読み込み」を行う場合は「 5 キャパシティーユニット」。<br>「 5 KB の Item 1 つを 1 秒間に書き込む」場合は「 5 キャパシティーユニット」。</p><h1 id="dynamodb-の-api">DynamoDB の API</h1><p>DynamoDB の API は大きく以下がある。</p><ul><li>コントロールプレーン<ul><li>DynamoDB テーブルを作成、管理</li></ul></li><li>データプレーン<ul><li>テーブルデータのCRUD</li></ul></li><li>DynamoDB ストリーム<ul><li>テーブルのストリームを有効または無効にし、ストリームに含まれるデータ変更レコードにアクセス</li></ul></li></ul><p>ここでは、コントロールプレーン、データプレーンについて触れる。</p><h2 id="コントロールプレーン">コントロールプレーン</h2><p>コントロールプレーンには以下の API がある。</p><ul><li><strong>CreateTable</strong><ul><li>テーブルを作成する</li><li>オプションで、1 つ以上のセカンダリインデックスを作成し、テーブルに対して DynamoDB ストリーム を有効にできる</li></ul></li><li><strong>DescribeTable</strong><ul><li>プライマリキーのスキーマ、スループット設定、インデックス情報など、テーブルに関する情報を取得する</li></ul></li><li><strong>ListTables</strong><ul><li>すべてのテーブル名のリストを取得する</li></ul></li><li><strong>UpdateTable</strong><ul><li>テーブルまたはそのインデックスの設定を変更、テーブルの新しいインデックスを作成または削除、またはテーブルの DynamoDB ストリーム 設定を変更する</li></ul></li><li><strong>DeleteTable</strong><ul><li>テーブルを削除する</li></ul></li></ul><h2 id="データプレーン">データプレーン</h2><p>データプレーンには以下の API がある。</p><ul><li>データの作成<ul><li><strong>PutItem</strong><ul><li>テーブルに Item を 1つ書き込む</li></ul></li><li><strong>BatchWriteItem</strong><ul><li>テーブルに Item を25個書き込みむ</li><li>PutItem を複数回呼び出すよりも効率的</li><li>1つ以上のテーブルを跨った書き込みも可能</li></ul></li></ul></li><li>データの読み取り<ul><li><strong>GetItem</strong><ul><li>テーブルから Item を 1つ取得する</li></ul></li><li><strong>BatchGetItem</strong><ul><li>テーブルから Item を 100 個取得する</li><li>GetItem を複数回呼び出すよりも効率的</li><li>1つ以上のテーブルを跨った読み込みも可能</li></ul></li><li><strong>Query</strong><ul><li>指定したパーティションキーを持つ全ての Item を取得する<ul><li>パーティションキーは、「テーブル（＝ローカルセカンダリインデックス）のパーティションキー」もしくは「グローバルセカンダリインデックスのパーティションキー」</li></ul></li><li>オプションで、ソートキーおよび比較演算子を指定して、検索結果を絞り込める<ul><li>ソートキーは、パーティションキーに対応するソートキーから選択する</li></ul></li><li>Item 内の属性全体、もしくは指定した属性のみを取得できる</li></ul></li><li><strong>Scan</strong><ul><li>指定したテーブルもしくは（グローバル／ローカル）セカンダリインデックスの全ての Item を取得する</li><li>オプションで、パーティションキー・ソートキーおよび比較演算子を指定して、検索結果を絞り込める</li><li>Item 内の属性全体、もしくは指定した属性のみを取得できる</li><li><strong>フィルタ式があるかどうかにかかわらず、同じ量の読み込みキャパシティーを消費する</strong></li></ul></li></ul></li><li>データの更新<ul><li><strong>UpdateItem</strong><ul><li>テーブルの Item を 1 つ以上更新する</li><li>条件付き更新が可能</li><li>オプションで、アトミックカウンタ（他の書き込みリクエストを妨害することなく、数値属性をインクリメントまたはデクリメント）も可能</li></ul></li></ul></li><li>データの削除<ul><li><strong>DeleteItem</strong><ul><li>テーブルから Item を 1 つ削除する</li></ul></li><li><strong>BatchWriteItem</strong><ul><li>テーブルから Item を最大 25 個削除する</li><li>DeleteItem を複数回呼び出すよりも効率的</li><li>1つ以上のテーブルを跨った削除も可能</li></ul></li></ul></li></ul><h1 id="aws-cli-で-dynamodb-へアクセス">AWS CLI で DynamoDB へアクセス</h1><p><a href="http://docs.aws.amazon.com/cli/latest/reference/dynamodb/index.html" target="_blank" rel="noopener">公式ドキュメント</a></p><h2 id="環境設定">環境設定</h2><p><strong>pip</strong> が導入されている前提で書く。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install awscli</span><br><span class="line">$ aws configure</span><br><span class="line"><span class="comment"># アクセスキー、シークレットキーなどを入力する</span></span><br></pre></td></tr></table></figure><h2 id="テーブル定義">テーブル定義</h2><p>以降の AWS CLI によるオペレーションは以下のテーブル定義の前提とする。<br>テーブル名は <code>test_table</code> 。</p><table><thead><tr class="header"><th style="text-align: left;">属性名</th><th style="text-align: left;">属性型</th><th style="text-align: left;">プライマリーキー</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">test_hash</td><td style="text-align: left;">スカラー型/文字列</td><td style="text-align: left;">HASH Key</td></tr><tr class="even"><td style="text-align: left;">test_range</td><td style="text-align: left;">スカラー型/文字列</td><td style="text-align: left;">RANGE Key</td></tr><tr class="odd"><td style="text-align: left;">test_value</td><td style="text-align: left;">スカラー型/文字列</td><td style="text-align: left;"></td></tr></tbody></table><h2 id="createtable">CreateTable</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb create-table \</span><br><span class="line">  --attribute-definitions <span class="string">'[&#123;"AttributeName":"test_hash","AttributeType":"S"&#125;,&#123;"AttributeName":"test_range","AttributeType":"S"&#125;]'</span> \</span><br><span class="line">  --table-name <span class="string">'test_table'</span> \</span><br><span class="line">  --key-schema <span class="string">'[&#123;"AttributeName":"test_hash","KeyType":"HASH"&#125;,&#123;"AttributeName":"test_range","KeyType":"RANGE"&#125;]'</span> \</span><br><span class="line">  --provisioned-throughput <span class="string">'&#123;"ReadCapacityUnits":5,"WriteCapacityUnits":5&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="deletetable">DeleteTable</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb delete-table \</span><br><span class="line">  --table-name <span class="string">'test_table'</span></span><br></pre></td></tr></table></figure><h2 id="listtables">ListTables</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb list-tables</span><br></pre></td></tr></table></figure><h2 id="putitem">PutItem</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb put-item \</span><br><span class="line">  --table-name <span class="string">'test_table'</span> \</span><br><span class="line">  --item <span class="string">'&#123;"test_hash":&#123;"S":"xxxxx"&#125;,"test_range":&#123;"S":"yyyyy"&#125;,"test_value":&#123;"S":"zzzzz"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="getitem">GetItem</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb get-item \</span><br><span class="line">  --table-name <span class="string">'test_table'</span> \</span><br><span class="line">  --key <span class="string">'&#123;"test_hash":&#123;"S":"xxxxx"&#125;,"test_range":&#123;"S":"yyyyy"&#125;&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ここでは、 DynamoDB の概要と AWS CLI でのアクセスまでまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DynamoDB の概要&lt;/li&gt;
&lt;li&gt;DynamoDB の API&lt;/li&gt;
&lt;li&gt;AWS CLI で DynamoDB へアクセス&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="https://pepese.github.io/tags/AWS/"/>
    
      <category term="DynamoDB" scheme="https://pepese.github.io/tags/DynamoDB/"/>
    
      <category term="AWS CLI" scheme="https://pepese.github.io/tags/AWS-CLI/"/>
    
  </entry>
  
  <entry>
    <title>Node.js/Express/requestでHTTP(S)リクエストを発行する</title>
    <link href="https://pepese.github.io/blog/express-http-client-request/"/>
    <id>https://pepese.github.io/blog/express-http-client-request/</id>
    <published>2017-08-28T02:37:25.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js/ExpressアプリケーションからHTTP(S)を発行してみる。<br>使用するツール・ライブラリは以下。</p><ul><li>HTTP(S)クライアント<ul><li><a href="https://github.com/request/request" target="_blank" rel="noopener">request</a></li></ul></li></ul><p>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/express-basics/">Express入門</a></li></ul><a id="more"></a><p>ちなみに HTTP(S)クライアントとしては <code>request</code> 以外にも以下のようなものがある。</p><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_http_methods" target="_blank" rel="noopener">http</a> / <a href="https://nodejs.org/dist/latest-v6.x/docs/api/https.html#https_https_get_options_callback" target="_blank" rel="noopener">https</a><ul><li>Node.js のネイティブライブラリ</li></ul></li><li><a href="http://unirest.io/nodejs.html" target="_blank" rel="noopener">Unirest</a></li><li><a href="https://github.com/mzabriskie/axios" target="_blank" rel="noopener">axios</a><ul><li><code>request</code> が嫌ならこれがいいかな？</li></ul></li></ul><h1 id="環境設定">環境設定</h1><p>先の記事で紹介したプロジェクトにて以下を実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add request</span><br></pre></td></tr></table></figure><h1 id="実装">実装</h1><ul><li><code>app/controllers/get_ip.js</code><ul><li>自分のグローバルIPを取得するAPIにリクエストを発行するサンプル</li><li><code>http://[FQDN]/ip</code> で動確</li></ul></li></ul><h2 id="appcontrollersget_ip.js"><code>app/controllers/get_ip.js</code></h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/controllers/get_ip.js?footer=0"></script><h1 id="request-の基本的な使い方">request の基本的な使い方</h1><ul><li><code>request(options, callback)</code><ul><li>コールバックで <code>options</code> に基づいたリクエストを発行する</li><li>サンプルはこれを使用</li><li><a href="https://github.com/request/request#requestoptions-callback" target="_blank" rel="noopener">ドキュメント</a></li><li><a href="https://github.com/request/request#requestoptions-callback" target="_blank" rel="noopener">optiong の設定</a></li></ul></li><li><code>request.defaults(options)</code><ul><li>HTTP(S)クライアントのデフォルトの設定を行う</li><li><a href="https://github.com/request/request#requestdefaultsoptions" target="_blank" rel="noopener">ドキュメント</a></li></ul></li><li><code>request.METHOD()</code><ul><li>HTTPメソッドを関数で表現する形式</li><li><a href="https://github.com/request/request#requestmethod" target="_blank" rel="noopener">ドキュメント</a></li></ul></li></ul><h1 id="promise">Promise</h1><p>コールバック地獄を避けたい人は <a href="https://github.com/request/request-promise" target="_blank" rel="noopener">request-promise</a> を使うと簡単に非同期 bluebird 版 Promise を実現できる。</p><h2 id="導入">導入</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add request-promise</span><br></pre></td></tr></table></figure><h2 id="実装-appcontrollersget_ip_promise.js">実装 <code>app/controllers/get_ip_promise.js</code></h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/controllers/get_ip_promise.js?footer=0"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js/ExpressアプリケーションからHTTP(S)を発行してみる。&lt;br&gt;
使用するツール・ライブラリは以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP(S)クライアント
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/request/request&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事を読んだ前提で書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/express-basics/&quot;&gt;Express入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="yarn" scheme="https://pepese.github.io/tags/yarn/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="request" scheme="https://pepese.github.io/tags/request/"/>
    
      <category term="promise" scheme="https://pepese.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>Node.js/Express/SequelizeでRDB接続</title>
    <link href="https://pepese.github.io/blog/express-rdb-sequelize/"/>
    <id>https://pepese.github.io/blog/express-rdb-sequelize/</id>
    <published>2017-08-20T06:30:40.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js/ExpressアプリケーションからRDBへ接続してみる。<br>使用するツール・ライブラリは以下。</p><ul><li>O/R Mapper<ul><li><a href="http://docs.sequelizejs.com/" target="_blank" rel="noopener">Sequelize</a></li></ul></li><li>RDB<ul><li><a href="https://sqlite.org/index.html" target="_blank" rel="noopener">SQLite3</a></li></ul></li></ul><p>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/express-basics/">Express入門</a></li></ul><a id="more"></a><h1 id="環境設定">環境設定</h1><p>先の記事で紹介したプロジェクトにて以下を実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add sequelize sqlite3 morgan</span><br><span class="line">$ mkdir app/db</span><br></pre></td></tr></table></figure><p><code>.gitignore</code> へ以下を追加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">app/db/*.sqlite</span><br><span class="line">.DS_Store</span><br><span class="line">./**/.DS_Store</span><br></pre></td></tr></table></figure><h1 id="実装">実装</h1><ul><li><code>app/repositories/sequelize.js</code><ul><li>Sequelizeを使ったRDB接続用モジュール</li></ul></li><li><code>app/repositories/models.js</code><ul><li>Clientモデルを作成</li><li>テーブルの作成とサンプルデータのインサート</li></ul></li><li><code>app/controllers/get_client</code><ul><li>上記の <code>models.js</code> 経由でClientの検索</li></ul></li></ul><h2 id="apprepositoriessequelize.js"><code>app/repositories/sequelize.js</code></h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/repositories/sequelize.js?footer=0"></script><h2 id="apprepositoriesmodels.js"><code>app/repositories/models.js</code></h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/repositories/models.js?footer=0"></script><h2 id="appcontrollersget_clients.js"><code>app/controllers/get_clients.js</code></h2><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/controllers/get_clients.js?footer=0"></script><h1 id="実行">実行</h1><p>以下で起動。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app/app.js</span><br></pre></td></tr></table></figure><p><code>http://localhost:3000</code> にブラウザでアクセスして Client 情報が見れたら成功。</p><h1 id="association">Association</h1><p>ちょっとハマったので、ここではモデル同士のリレーション・関連付けについて記載する。<br>リレーションには以下がある。</p><ul><li>hasOne<ul><li>1:1 のリレーション</li></ul></li><li>belongsTo<ul><li>1:N のリレーション</li><li><code>hasOne</code> や <code>hasMany</code> される側</li></ul></li><li>hasMany<ul><li>1:N のリレーション</li></ul></li><li>belongsToMany<ul><li>N:M のリレーション</li></ul></li></ul><p>ここでは <code>belongsToMany</code> の例のみ記載する。<br><a href="http://docs.sequelizejs.com/manual/tutorial/associations.html" target="_blank" rel="noopener">参考/チュートリアル</a>、<a href="http://docs.sequelizejs.com/class/lib/associations/base.js~Association.html" target="_blank" rel="noopener">参考/リファレンス</a></p><h2 id="実装-1">実装</h2><ul><li>app/models/user.js<ul><li>ユーザテーブルのモデル</li></ul></li><li>app/models/team.js<ul><li>チームテーブルのモデル</li></ul></li><li>app/models/team-user.js<ul><li>チームテーブルとユーザテーブルの N:M のリレーションを構築する中間テーブルのモデル</li></ul></li><li>app/repositories/sequelize.js<ul><li>Sequelize のロード・設定を行う</li><li>Sqlite3 を使用した例になっている</li></ul></li><li>app/repositories/db.js<ul><li>モデルのリレーション作成、DBとの同期を行う</li></ul></li><li>app/app.js<ul><li>適当な実行ファイル、全く参考にならない</li><li><code>node app/app.js</code> で実行</li></ul></li></ul><p>個人的な好みだが、モデルは <strong>単数形</strong> で作成する。<br>また、 <strong>モデルのリレーションを実装してから <code>sync()</code> する</strong> のがポイント。（ここでハマった）</p><h3 id="appmodelsuser.js">app/models/user.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/sequelize-sample/app/models/user.js?footer=0"></script><p><code>user_id</code> が主キー。</p><h3 id="appmodelsteam.js">app/models/team.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/sequelize-sample/app/models/team.js?footer=0"></script><p><code>team_id</code> が主キー。</p><h3 id="appmodelsteam-user.js">app/models/team-user.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/sequelize-sample/app/models/team-user.js?footer=0"></script><p><code>user_id</code> 、 <code>team_id</code> が複合キーで、それぞれ外部キーを参照しているのがポイント。</p><h3 id="apprepositoriessequelize.js-1">app/repositories/sequelize.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/sequelize-sample/app/repositories/sequelize.js?footer=0"></script><h3 id="apprepositoriesdb.js">app/repositories/db.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/sequelize-sample/app/repositories/db.js?footer=0"></script><p><code>belongsToMany</code> を使用して中間テーブルを介したモデルを構築する際は必ず <code>through</code> を記載する。<br><code>belongsToMany</code> でリレーションを構築するとユーザモデルから以下の関数を実行できるようになる。（チームモデルも同様）</p><ul><li>user.addTeam<ul><li>既存のteamテーブルのteamモデル（配列も可）をuserと関連付け。</li></ul></li><li>user.addTeams<ul><li>既存のteamテーブルのteamモデル（配列）をuserと関連付け。</li></ul></li><li>user.countTeams<ul><li>userに関連付けされたteamを数え上げる。</li></ul></li><li>user.createTeam<ul><li>teamオブジェクトを渡して、新規にteamテーブルにteamレコードを作成して且つ関連付け。</li></ul></li><li>user.getTeams<ul><li>userと関連付けされたteamモデルを取得する。</li></ul></li><li>user.hasTeam<ul><li>userに引数で与えたteamモデルが関連付けされているか確認する。（true/false）</li></ul></li><li>user.hasTeams<ul><li>userに引数で与えたteamモデルが関連付けされているか確認する。（true/false）</li></ul></li><li>user.removeTeam<ul><li>userと引数で与えたteamモデル（配列も可）の関連付けを削除する。</li><li>ただし、teamモデルは削除されない。</li></ul></li><li>user.removeTeams<ul><li>userと引数で与えたteamモデル（配列）の関連付けを削除する。</li><li>ただし、teamモデルは削除されない。</li></ul></li><li>user.setTeams<ul><li><strong>add との違いがわかってない。。。</strong></li></ul></li></ul><p><a href="http://docs.sequelizejs.com/class/lib/associations/belongs-to-many.js~BelongsToMany.html" target="_blank" rel="noopener">参考</a></p><h3 id="appapp.js">app/app.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/sequelize-sample/app/app.js?footer=0"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js/ExpressアプリケーションからRDBへ接続してみる。&lt;br&gt;
使用するツール・ライブラリは以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O/R Mapper
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.sequelizejs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sequelize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RDB
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sqlite.org/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SQLite3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事を読んだ前提で書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/express-basics/&quot;&gt;Express入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="yarn" scheme="https://pepese.github.io/tags/yarn/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="Sequelize" scheme="https://pepese.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Node.js/Expressでユニットテスト</title>
    <link href="https://pepese.github.io/blog/express-test/"/>
    <id>https://pepese.github.io/blog/express-test/</id>
    <published>2017-08-16T06:50:27.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js/Expressアプリケーションのテストをしてみる。<br>使用するツール・ライブラリは以下。</p><ul><li>テスティングフレームワーク<ul><li><a href="https://mochajs.org/" target="_blank" rel="noopener">mocha</a><ul><li>デフォルトでは <code>./test/*.js</code> 、 <code>./test/*.coffee</code> をテストスクリプトとして認識</li><li><code>mocha.opts</code> というファイルにオプションを設定できる模様（<a href="https://mochajs.org/#mochaopts" target="_blank" rel="noopener">参考</a>）</li></ul></li></ul></li><li>アサート<ul><li><a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a></li></ul></li><li>モック<ul><li><a href="http://sinonjs.org/" target="_blank" rel="noopener">sinon.js</a></li></ul></li><li>カバレッジ<ul><li><a href="https://istanbul.js.org/" target="_blank" rel="noopener">Istanbul</a><ul><li>公式の案内にもある通り、以下の <code>nyc</code> 経由で <code>istanbul</code> を利用する</li></ul></li><li><a href="https://github.com/istanbuljs/nyc" target="_blank" rel="noopener">nyc</a><ul><li>tap、mocha、AVA といったJSテスティングフレームワークと Istanbul をうまく連携させるコマンドラインツール</li><li><a href="https://istanbul.js.org/docs/tutorials/mocha/" target="_blank" rel="noopener">mocha用のチュートリアル</a></li></ul></li></ul></li></ul><p>なお、タスクランナーは使用せず、npmスクリプトを使用する。</p><a id="more"></a><p>以下の記事を読んだ前提で書く。</p><ul><li><a href="https://pepese.github.io/blog/express-basics/">Express入門</a></li></ul><h1 id="環境設定">環境設定</h1><h2 id="グローバルインストール">グローバルインストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add nyc</span><br><span class="line">$ ndenv <span class="built_in">rehash</span></span><br></pre></td></tr></table></figure><h2 id="ローカルインストール">ローカルインストール</h2><p><a href="https://pepese.github.io/blog/express-basics/">Express入門</a>で作成したプロジェクトにて以下を導入する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add mocha chai sinon nyc rimraf --dev</span><br></pre></td></tr></table></figure><h2 id="ディレクトリ作成">ディレクトリ作成</h2><p>先に紹介した記事の通り、Expressアプリケーションのソースディレクトリは <code>app/</code> だけで完結するようにする。<br>以下のようにテストスクリプト用のディレクトリを作成する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir app/spec</span><br><span class="line">$ mkdir app/spec/controllers</span><br></pre></td></tr></table></figure><h1 id="ユニットテストの実装">ユニットテストの実装</h1><p>先に紹介した記事のスクリプトをテストする。</p><h2 id="packege.json">packege.json</h2><p>以下を加筆する。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 上記省略</span><br><span class="line">  &quot;nyc&quot;: &#123;</span><br><span class="line">    &quot;check-coverage&quot;: true,</span><br><span class="line">    &quot;per-file&quot;: true,</span><br><span class="line">    &quot;lines&quot;: 90,</span><br><span class="line">    &quot;statements&quot;: 90,</span><br><span class="line">    &quot;functions&quot;: 90,</span><br><span class="line">    &quot;branches&quot;: 90,</span><br><span class="line">    &quot;include&quot;: [</span><br><span class="line">      &quot;app/&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;exclude&quot;: [</span><br><span class="line">      &quot;app/spec/**/*.spec.js&quot;,</span><br><span class="line">      &quot;app/app.js&quot;,</span><br><span class="line">      &quot;app/controllers/router.js&quot;,</span><br><span class="line">      &quot;app/config&quot;,</span><br><span class="line">      &quot;app/coverage&quot;,</span><br><span class="line">      &quot;app/log&quot;,</span><br><span class="line">      &quot;app/public&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;reporter&quot;: [</span><br><span class="line">      &quot;html&quot;,</span><br><span class="line">      &quot;text&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: [],</span><br><span class="line">    &quot;extension&quot;: [</span><br><span class="line">      &quot;.js&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;cache&quot;: true,</span><br><span class="line">    &quot;all&quot;: true,</span><br><span class="line">    &quot;report-dir&quot;: &quot;app/coverage&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;clean&quot;: &quot;rimraf .nyc_output ./app/coverage&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;mocha app/spec/*.spec.js app/spec/**/*.spec.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 下記省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="テストスクリプト-appspeccontrollersget_index.spec.js">テストスクリプト <code>app/spec/controllers/get_index.spec.js</code></h2><p><code>app/controllers/get_index.js</code> を対象としたテストスクリプトを以下のように作成する。</p><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/spec/controllers/get_index.spec.js?footer=0"></script><h2 id="テストスクリプト-appspeccontrollersget_users.spec.js">テストスクリプト <code>app/spec/controllers/get_users.spec.js</code></h2><p><code>app/controllers/get_users.js</code> を対象としたテストスクリプトを以下のように作成する。</p><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/spec/controllers/get_users.spec.js?footer=0"></script><h2 id="テストの実行">テストの実行</h2><p>npmスクリプトで以下のようにテストを実行する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">  /</span><br><span class="line">    ✓ Index画面が1回レンダリングされること</span><br><span class="line"></span><br><span class="line">  /users</span><br><span class="line">    ✓ Users画面が1回レンダリングされること</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  2 passing (8ms)</span><br></pre></td></tr></table></figure><p>カバレッジレポートは <code>nyc</code> を用いて以下のように出力する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ nyc npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">  /</span><br><span class="line">    ✓ Index画面が1回レンダリングされること</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /users</span><br><span class="line">    ✓ Users画面が1回レンダリングされること</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  2 passing (10ms)</span><br><span class="line"></span><br><span class="line">--------------|----------|----------|----------|----------|----------------|</span><br><span class="line">File          |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |</span><br><span class="line">--------------|----------|----------|----------|----------|----------------|</span><br><span class="line">All files     |      100 |      100 |      100 |      100 |                |</span><br><span class="line"> get_index.js |      100 |      100 |      100 |      100 |                |</span><br><span class="line"> get_users.js |      100 |      100 |      100 |      100 |                |</span><br><span class="line">--------------|----------|----------|----------|----------|----------------|</span><br></pre></td></tr></table></figure><p><code>package.json</code> の <code>nyc</code> の設定の通りだが、HTML形式のレポートが <code>app/coverage</code> 配下に出力される。<br>なお、 <code>$ npm run-script clean</code> で <code>nyc</code> が出力する <code>.nyc_output</code> 、 <code>app/coverage</code> を削除する。</p><h1 id="ライブラリツールの概念を解説">ライブラリ・ツールの概念を解説</h1><p>個々のライブラリを軽く解説する。<br>なお、各ライブラリを連携するプラグインライブラリに以下のようなものがある。</p><ul><li>mocha-sinon<ul><li><a href="https://github.com/elliotf/mocha-sinon" target="_blank" rel="noopener">Github</a></li></ul></li><li><a href="http://chaijs.com/plugins/sinon-chai/" target="_blank" rel="noopener">sinon-chai</a><ul><li><a href="https://github.com/domenic/sinon-chai" target="_blank" rel="noopener">Github</a></li><li>chai-sinon というのもあるが、違いがわからん。。。</li></ul></li></ul><h2 id="mocha">mocha</h2><p>mocha では以下のような関数を使用してテストを記述していく。</p><table><thead><tr class="header"><th style="text-align: left;">関数</th><th style="text-align: left;">概要</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">describe</td><td style="text-align: left;">ネスト管理可能な階層。テスト対象を宣言する。</td></tr><tr class="even"><td style="text-align: left;">before</td><td style="text-align: left;">describeの前に実行される。前提条件を記述する。</td></tr><tr class="odd"><td style="text-align: left;">after</td><td style="text-align: left;">describeの後に実行される。後処理を記述する。</td></tr><tr class="even"><td style="text-align: left;">beforeEach</td><td style="text-align: left;">各describeの前に実行される。前提条件を記述する。</td></tr><tr class="odd"><td style="text-align: left;">afterEach</td><td style="text-align: left;">各describeの後に実行される。後処理を記述する。</td></tr><tr class="even"><td style="text-align: left;">it</td><td style="text-align: left;">検証内容を記述する。</td></tr></tbody></table><h2 id="chai">Chai</h2><p>Chai の代表的な機能には以下がある。</p><ul><li>Should</li><li>Expect</li><li>Assert</li></ul><p>Should と Expect は基本同じインターフェースだが、Sholudはオブジェクト自身を拡張してsholudメソッドを追加して実装されているのに対して、expectは関数で引数に評価する値を渡すことでオブジェクトの検査を行う。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// hogeオブジェクトとfuge文字列が等しいかどうか検査</span><br><span class="line"></span><br><span class="line">// Should</span><br><span class="line">hoge.should.equal(&apos;fuge&apos;);</span><br><span class="line"></span><br><span class="line">// Expcet</span><br><span class="line">expect(hoge).to.equal(&apos;fuge&apos;);</span><br></pre></td></tr></table></figure><h2 id="sinon.js">sinon.js</h2><p>sinon.js の代表的な機能には以下がある。</p><ul><li>スパイ<ul><li>関数がどのように呼び出されたかを記録する</li></ul></li><li>スタブ<ul><li>関数の戻り値をあらかじめ設定し、その結果でテストを行う</li></ul></li><li>モック<ul><li>実行前に関数の実行回数など期待する結果を指定しておく</li></ul></li><li>フェイク<ul><li>問い合わせるDBやサーバ処理などを単純な実装に置き換える</li></ul></li></ul><p><a href="http://sinonjs.org/releases/v3.2.0/" target="_blank" rel="noopener">API documentation - Sinon.JS - v3.2.0</a></p><h3 id="スパイ">スパイ</h3><p>スパイオブジェクトの作成方法は以下。</p><table><thead><tr class="header"><th style="text-align: left;">呼び出し方法</th><th style="text-align: left;">概要</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">let spy = sinon.spy();</td><td style="text-align: left;">空のスパイオブジェクトを生成。主にコールバックで渡す無名関数などに対して使用する。</td></tr><tr class="even"><td style="text-align: left;">let spy = sinon.spy(myFunc);</td><td style="text-align: left;">特定の関数に対してスパイオブジェクトを作成する。</td></tr><tr class="odd"><td style="text-align: left;">let spy = sinon.spy(object, “method”);</td><td style="text-align: left;">オブジェクト内のメソッドに対してスパイオブジェクトを生成する。</td></tr></tbody></table><p>スパイオブジェクトの主な関数は以下。</p><table><thead><tr class="header"><th style="text-align: left;">呼び出し方法</th><th style="text-align: left;">概要</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">spy.calledWith(arg1, arg2, …);</td><td style="text-align: left;">指定した引数で関数が呼び出されたかを確認する。</td></tr><tr class="even"><td style="text-align: left;">spy.callCount</td><td style="text-align: left;">呼び出された回数を返す。</td></tr><tr class="odd"><td style="text-align: left;">spy.called</td><td style="text-align: left;">呼び出された場合にtrueを返す。</td></tr><tr class="even"><td style="text-align: left;">spy.calledOn(obj);</td><td style="text-align: left;">指定したオブジェクトで関数が実行された場合trueを返す。</td></tr><tr class="odd"><td style="text-align: left;">spy.calledOnce</td><td style="text-align: left;">1回呼び出された場合trueを返す。</td></tr><tr class="even"><td style="text-align: left;">spy.calledTwice</td><td style="text-align: left;">2回呼び出された場合trueを返す。</td></tr><tr class="odd"><td style="text-align: left;">spy.exceptions</td><td style="text-align: left;">発生したexceptionを返す。</td></tr><tr class="even"><td style="text-align: left;">spy.returnValues</td><td style="text-align: left;">実行後の戻り値を返す。</td></tr><tr class="odd"><td style="text-align: left;">spy.withArgs(arg1, arg2, …);</td><td style="text-align: left;">指定した引数で関数が呼び出された場合にのみ、スパイオブジェクトを返す。</td></tr></tbody></table><h3 id="スタブ">スタブ</h3><p>スタブオブジェクトの作成方法は以下。</p><table><thead><tr class="header"><th align="left">呼び出し方法</th><th align="left">概要</th></tr></thead><tbody><tr class="odd"><td align="left">let stub = sinon.stub();</td><td align="left">空のスタブオブジェクトを生成。主にコールバックで渡す無名関数などに対して使用する。</td></tr><tr class="even"><td align="left">let stub = sinon.stub(object, “method”);</td><td align="left">特定の関数に対してスタブオブジェクトを作成する。</td></tr><tr class="odd"><td align="left">let stub = sinon.stub(object, “method”, func);</td><td align="left">特定の関数に対してスタブオブジェクトを作成し、指定した関数で処理を上書きします。</td></tr><tr class="even"><td align="left">let stub = sinon.stub(object);</td><td align="left">対象オブジェクトのメソッドをすべてスタブにする。</td></tr></tbody></table><p>スタブオブジェクトの主な関数は以下。</p><table><thead><tr class="header"><th style="text-align: left;">呼び出し方法</th><th style="text-align: left;">概要</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">stub.returns(obj);</td><td style="text-align: left;">呼び出し時のリターン値を指定する。</td></tr><tr class="even"><td style="text-align: left;">stub.throws(obj);</td><td style="text-align: left;">呼び出し時に指定したExceptionを発生させる。</td></tr><tr class="odd"><td style="text-align: left;">stub.onCall(n);</td><td style="text-align: left;">n回目のスタブオブジェクトを返す。</td></tr><tr class="even"><td style="text-align: left;">stub.onFirstCall();</td><td style="text-align: left;">1回目のスタブオブジェクトを返す。</td></tr><tr class="odd"><td style="text-align: left;">stub.onSecondCall();</td><td style="text-align: left;">2回目のスタブオブジェクトを返す。</td></tr></tbody></table><h3 id="モック">モック</h3><p>モックオブジェクトの作成方法は以下。</p><table><thead><tr class="header"><th align="left">呼び出し方法</th><th align="left">概要</th></tr></thead><tbody><tr class="odd"><td align="left">let mock = sinon.mock(object);</td><td align="left">オブジェクトのモックを作成する。</td></tr><tr class="even"><td align="left">let expectation = mock.expects(“method”);</td><td align="left"><code>object.method</code> をオーバーライドしてモック関数を作成する。</td></tr><tr class="odd"><td align="left">let expectation = sinon.expectation.create(“method”);</td><td align="left">モックオブジェクト無しでモック関数を作成する。</td></tr></tbody></table><p>スタブオブジェクトの主な関数は以下。</p><table><thead><tr class="header"><th style="text-align: left;">呼び出し方法</th><th style="text-align: left;">概要</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">mock.restore();</td><td style="text-align: left;">全てのモック関数をリストアする。</td></tr><tr class="even"><td style="text-align: left;">mock.verify();</td><td style="text-align: left;">全てのモック関数の expectation をベリファイする。</td></tr><tr class="odd"><td style="text-align: left;">expectation.atLeast(number);</td><td style="text-align: left;">モック関数が少なくとも呼び出される回数を指定する。</td></tr><tr class="even"><td style="text-align: left;">expectation.atLeast(number);</td><td style="text-align: left;">モック関数が多くとも呼び出される回数を指定する。</td></tr><tr class="odd"><td style="text-align: left;">expectation.never();</td><td style="text-align: left;">モック関数が決して呼び出されないことを指定する。</td></tr><tr class="even"><td style="text-align: left;">expectation.once();</td><td style="text-align: left;">モック関数が1回呼び出されることを指定する。</td></tr><tr class="odd"><td style="text-align: left;">expectation.twice();</td><td style="text-align: left;">モック関数が2回呼び出されることを指定する。</td></tr><tr class="even"><td style="text-align: left;">expectation.exactly(number);</td><td style="text-align: left;">モック関数が呼び出される回数を指定する。</td></tr><tr class="odd"><td style="text-align: left;">expectation.withArgs(arg1, arg2, …);</td><td style="text-align: left;">モック関数呼び出し時に含まれる引数を指定する。</td></tr><tr class="even"><td style="text-align: left;">expectation.withExactArgs(arg1, arg2, …);</td><td style="text-align: left;">モック関数呼び出し時の引数を指定する。</td></tr><tr class="odd"><td style="text-align: left;">expectation.on(object);</td><td style="text-align: left;">モック関数が object から呼び出されることを指定する。</td></tr><tr class="even"><td style="text-align: left;">expectation.verify();</td><td style="text-align: left;">モック関数が上記の指定にマッチしていたか確認する。</td></tr></tbody></table><h2 id="フェイク">フェイク</h2><p>フェイクには、時間・XMLHttpRequest・サーバーオブジェクトの置き換えができる。<br>ここでは省略する。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js/Expressアプリケーションのテストをしてみる。&lt;br&gt;
使用するツール・ライブラリは以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テスティングフレームワーク
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mocha&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトでは &lt;code&gt;./test/*.js&lt;/code&gt; 、 &lt;code&gt;./test/*.coffee&lt;/code&gt; をテストスクリプトとして認識&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mocha.opts&lt;/code&gt; というファイルにオプションを設定できる模様（&lt;a href=&quot;https://mochajs.org/#mochaopts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アサート
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://chaijs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;モック
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sinonjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sinon.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;カバレッジ
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://istanbul.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Istanbul&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;公式の案内にもある通り、以下の &lt;code&gt;nyc&lt;/code&gt; 経由で &lt;code&gt;istanbul&lt;/code&gt; を利用する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/istanbuljs/nyc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nyc&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;tap、mocha、AVA といったJSテスティングフレームワークと Istanbul をうまく連携させるコマンドラインツール&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://istanbul.js.org/docs/tutorials/mocha/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mocha用のチュートリアル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお、タスクランナーは使用せず、npmスクリプトを使用する。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="npm" scheme="https://pepese.github.io/tags/npm/"/>
    
      <category term="mocha" scheme="https://pepese.github.io/tags/mocha/"/>
    
      <category term="Chai" scheme="https://pepese.github.io/tags/Chai/"/>
    
      <category term="sinon.js" scheme="https://pepese.github.io/tags/sinon-js/"/>
    
      <category term="Istanbul" scheme="https://pepese.github.io/tags/Istanbul/"/>
    
      <category term="nyc" scheme="https://pepese.github.io/tags/nyc/"/>
    
  </entry>
  
  <entry>
    <title>所謂MEANスタックを作る</title>
    <link href="https://pepese.github.io/blog/mean-stack-basics/"/>
    <id>https://pepese.github.io/blog/mean-stack-basics/</id>
    <published>2017-08-14T07:08:12.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Angular（所謂Angular4）でMEANスタックのアプリを作成してみる。<br>と言いつつMongoDBについてはほぼ言及しない。</p><a id="more"></a><h1 id="環境構築">環境構築</h1><h2 id="angular-cli">Angular CLI</h2><p>Angular CLI のインストール。<br>パッケージ管理ツールを <code>npm</code> から <code>yarn</code> へ変更。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g @angular/cli</span><br><span class="line">$ ndenv <span class="built_in">rehash</span></span><br><span class="line">$ ng <span class="built_in">set</span> --global packageManager=yarn</span><br><span class="line">$ ng version</span><br><span class="line">_                      _                 ____ _     ___</span><br><span class="line">/ \   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|</span><br><span class="line">/ △ \ | <span class="string">'_ \ / _` | | | | |/ _` | '</span>__|   | |   | |    | |</span><br><span class="line">/ ___ \| | | | (_| | |_| | | (_| | |      | |___| |___ | |</span><br><span class="line">/_/   \_\_| |_|\__, |\__,_|_|\__,_|_|       \____|_____|___|</span><br><span class="line">           |___/</span><br><span class="line">@angular/cli: 1.3.0</span><br><span class="line">node: 7.6.0</span><br><span class="line">os: darwin x64</span><br></pre></td></tr></table></figure><h1 id="プロジェクト作成手順">プロジェクト作成手順</h1><p>以下のアプリケーションを1つのプロジェクト内に同梱して作成する。</p><ul><li>フロントエンド<ul><li>Angularベースのブラウザアプリケーション</li><li>サーバサイドのREST APIで通信する</li><li><strong>Angular CLI</strong> を使用する</li><li>ソースコードディレクトリは <code>src/</code></li></ul></li><li>サーバサイド<ul><li>NodeJS、ExpressベースのWebアプリケーション</li><li>ソースコードディレクトリは <code>app/</code></li></ul></li></ul><p><strong>フロントエンド、サーバサイドの順</strong> で作成すること。</p><h2 id="フロントエンド">フロントエンド</h2><h3 id="angular-cliでプロジェクト作成">Angular CLIでプロジェクト作成</h3><p>SCSSベースで <code>mean-sample</code> というプロジェクト名で作成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ ng new mean-sample --style=scss</span><br><span class="line">installing ng</span><br><span class="line">  create .editorconfig</span><br><span class="line">  create README.md</span><br><span class="line">  create src/app/app.component.scss</span><br><span class="line">  create src/app/app.component.html</span><br><span class="line">  create src/app/app.component.spec.ts</span><br><span class="line">  create src/app/app.component.ts</span><br><span class="line">  create src/app/app.module.ts</span><br><span class="line">  create src/assets/.gitkeep</span><br><span class="line">  create src/environments/environment.prod.ts</span><br><span class="line">  create src/environments/environment.ts</span><br><span class="line">  create src/favicon.ico</span><br><span class="line">  create src/index.html</span><br><span class="line">  create src/main.ts</span><br><span class="line">  create src/polyfills.ts</span><br><span class="line">  create src/styles.scss</span><br><span class="line">  create src/test.ts</span><br><span class="line">  create src/tsconfig.app.json</span><br><span class="line">  create src/tsconfig.spec.json</span><br><span class="line">  create src/typings.d.ts</span><br><span class="line">  create .angular-cli.json</span><br><span class="line">  create e2e/app.e2e-spec.ts</span><br><span class="line">  create e2e/app.po.ts</span><br><span class="line">  create e2e/tsconfig.e2e.json</span><br><span class="line">  create .gitignore</span><br><span class="line">  create karma.conf.js</span><br><span class="line">  create package.json</span><br><span class="line">  create protractor.conf.js</span><br><span class="line">  create tsconfig.json</span><br><span class="line">  create tslint.json</span><br><span class="line">Installing packages <span class="keyword">for</span> tooling via yarn.</span><br><span class="line">Installed packages <span class="keyword">for</span> tooling via yarn.</span><br><span class="line">Directory is already under version control. Skipping initialization of git.</span><br><span class="line">Project <span class="string">'mean-sample'</span> successfully created.</span><br></pre></td></tr></table></figure><p><code>yarn</code> で作成されていることを確認する。<br>また、下記の通りプロジェクトディレクトリに移動して、導入されている Angular のバージョンを確認する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> mean-sample</span><br><span class="line">$ ng version</span><br><span class="line">_                      _                 ____ _     ___</span><br><span class="line">/ \   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|</span><br><span class="line">/ △ \ | <span class="string">'_ \ / _` | | | | |/ _` | '</span>__|   | |   | |    | |</span><br><span class="line">/ ___ \| | | | (_| | |_| | | (_| | |      | |___| |___ | |</span><br><span class="line">/_/   \_\_| |_|\__, |\__,_|_|\__,_|_|       \____|_____|___|</span><br><span class="line">           |___/</span><br><span class="line"></span><br><span class="line">@angular/cli: 1.3.0</span><br><span class="line">node: 7.6.0</span><br><span class="line">os: darwin x64</span><br><span class="line">@angular/animations: 4.3.4</span><br><span class="line">@angular/common: 4.3.4</span><br><span class="line">@angular/compiler: 4.3.4</span><br><span class="line">@angular/core: 4.3.4</span><br><span class="line">@angular/forms: 4.3.4</span><br><span class="line">@angular/http: 4.3.4</span><br><span class="line">@angular/platform-browser: 4.3.4</span><br><span class="line">@angular/platform-browser-dynamic: 4.3.4</span><br><span class="line">@angular/router: 4.3.4</span><br><span class="line">@angular/cli: 1.3.0</span><br><span class="line">@angular/compiler-cli: 4.3.4</span><br><span class="line">@angular/language-service: 4.3.4</span><br></pre></td></tr></table></figure><p>以下で Bootstrap を導入する。<br>なお、 Bootstrap4-beta は jquery と popper.js に依存する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add ngx-bootstrap bootstrap@4.0.0-beta jquery@3.2.1 popper.js@1.11.1 --save</span><br></pre></td></tr></table></figure><h3 id="angular-cli.json-修正">angular-cli.json 修正</h3><p>bootstrapのcss/js、jquery/popper.jsのjsを追加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略</span></span><br><span class="line"><span class="string">"styles"</span>: [</span><br><span class="line">  <span class="string">"../node_modules/bootstrap/dist/css/bootstrap.min.css"</span>, <span class="comment">// 追加行</span></span><br><span class="line">  <span class="string">"styles.scss"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"scripts"</span>: [</span><br><span class="line">  <span class="string">"../node_modules/jquery/dist/jquery.slim.min.js"</span>,       <span class="comment">// 追加行</span></span><br><span class="line">  <span class="string">"../node_modules/popper.js/dist/popper.min.js"</span>,         <span class="comment">// 追加行</span></span><br><span class="line">  <span class="string">"../node_modules/bootstrap/dist/js/bootstrap.min.js"</span>    <span class="comment">// 追加行</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 省略</span></span><br></pre></td></tr></table></figure><h3 id="srcappapp.module.ts-修正">src/app/app.module.ts 修正</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>; <span class="comment">// 追加行</span></span><br><span class="line"><span class="keyword">import</span> &#123; HttpModule &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;   <span class="comment">// 追加行</span></span><br><span class="line"><span class="keyword">import</span> &#123; BsRootModule &#125; <span class="keyword">from</span> <span class="string">'ngx-bootstrap'</span>; <span class="comment">// 追加行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule, <span class="comment">// 追加行</span></span><br><span class="line">    HttpModule,  <span class="comment">// 追加行</span></span><br><span class="line">    BsRootModule <span class="comment">// 追加行</span></span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>その他Angularの詳細については以下参照。</p><ul><li><a href="https://pepese.github.io/blog/angular-basics/">Angular入門</a></li></ul><h2 id="サーバサイド">サーバサイド</h2><p>Angular CLIで作成したプロジェクトにサーバサイド、つまりExpressを追加する。<br>サーバサイドアプリケーションのソースディレクトリは <code>app/</code> だけで完結するようにする。<br>フロントエンドとは異なりトランスパイル不要。<br>フロントエンドトランスパイル後の <code>dist</code> をExpress側で公開ディレクトリに設定する。</p><p>サーバサイドアプリケーションを作成する方法は以下を参照。<br>「フロントエンドアプリケーションをプロジェクトに同梱する場合、REST APIアプリを作成する場合」のほうの構成。</p><ul><li><a href="https://pepese.github.io/blog/express-basics/">Express入門</a></li></ul><h2 id="起動">起動</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ng build                                      // フロントエンドのビルド</span><br><span class="line">$ NODE_ENV=production forever start app/app.js  // サーバサイドアプリ起動</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular（所謂Angular4）でMEANスタックのアプリを作成してみる。&lt;br&gt;
と言いつつMongoDBについてはほぼ言及しない。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="npm" scheme="https://pepese.github.io/tags/npm/"/>
    
      <category term="Angular" scheme="https://pepese.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular入門</title>
    <link href="https://pepese.github.io/blog/angular-basics/"/>
    <id>https://pepese.github.io/blog/angular-basics/</id>
    <published>2017-08-14T07:02:02.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>フロントエンドMVCフレームワーク <strong>Angular</strong> （所謂Angular4）を触ってみた。<br>ここでは <a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">Angular CLI</a> を使う。<br>なお、 <strong>ndenv</strong> が入ってるテイで書く。導入は下記記事参照。</p><ul><li><a href="https://pepese.github.io/blog/anyenv/">すべての**envを管理するanyenv</a></li></ul><a id="more"></a><h1 id="環境構築">環境構築</h1><h2 id="yarnインストール">Yarnインストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g yarn</span><br><span class="line">$ ndenv <span class="built_in">rehash</span></span><br><span class="line">$ yarn --version</span><br></pre></td></tr></table></figure><h2 id="angular-cliインストール">Angular CLIインストール</h2><p>Angular CLI のインストール。<br>パッケージ管理ツールを <code>npm</code> から <code>yarn</code> へ変更。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add @angular/cli</span><br><span class="line">$ ndenv <span class="built_in">rehash</span></span><br><span class="line">$ ng <span class="built_in">set</span> --global packageManager=yarn</span><br><span class="line">$ ng version</span><br><span class="line">_                      _                 ____ _     ___</span><br><span class="line">/ \   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|</span><br><span class="line">/ △ \ | <span class="string">'_ \ / _` | | | | |/ _` | '</span>__|   | |   | |    | |</span><br><span class="line">/ ___ \| | | | (_| | |_| | | (_| | |      | |___| |___ | |</span><br><span class="line">/_/   \_\_| |_|\__, |\__,_|_|\__,_|_|       \____|_____|___|</span><br><span class="line">           |___/</span><br><span class="line">@angular/cli: 1.3.0</span><br><span class="line">node: 8.3.0</span><br><span class="line">os: darwin x64</span><br></pre></td></tr></table></figure><p>以降、 <code>ng</code> コマンドでいろいろできるようになる。</p><h2 id="プロジェクト作成と起動">プロジェクト作成と起動</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ ng new angular-sample</span><br><span class="line">installing ng</span><br><span class="line">  create .editorconfig</span><br><span class="line">  create README.md</span><br><span class="line">  create src/app/app.component.css</span><br><span class="line">  create src/app/app.component.html</span><br><span class="line">  create src/app/app.component.spec.ts</span><br><span class="line">  create src/app/app.component.ts</span><br><span class="line">  create src/app/app.module.ts</span><br><span class="line">  create src/assets/.gitkeep</span><br><span class="line">  create src/environments/environment.prod.ts</span><br><span class="line">  create src/environments/environment.ts</span><br><span class="line">  create src/favicon.ico</span><br><span class="line">  create src/index.html</span><br><span class="line">  create src/main.ts</span><br><span class="line">  create src/polyfills.ts</span><br><span class="line">  create src/styles.css</span><br><span class="line">  create src/test.ts</span><br><span class="line">  create src/tsconfig.app.json</span><br><span class="line">  create src/tsconfig.spec.json</span><br><span class="line">  create src/typings.d.ts</span><br><span class="line">  create .angular-cli.json</span><br><span class="line">  create e2e/app.e2e-spec.ts</span><br><span class="line">  create e2e/app.po.ts</span><br><span class="line">  create e2e/tsconfig.e2e.json</span><br><span class="line">  create .gitignore</span><br><span class="line">  create karma.conf.js</span><br><span class="line">  create package.json</span><br><span class="line">  create protractor.conf.js</span><br><span class="line">  create tsconfig.json</span><br><span class="line">  create tslint.json</span><br><span class="line">Installing packages <span class="keyword">for</span> tooling via yarn.</span><br><span class="line">Installed packages <span class="keyword">for</span> tooling via yarn.</span><br><span class="line">Successfully initialized git.</span><br><span class="line">Project <span class="string">'angular-sample'</span> successfully created.</span><br></pre></td></tr></table></figure><p><code>yarn</code> で作成されていることを確認する。<br>また、下記の通りプロジェクトディレクトリに移動して、導入されている Angular のバージョンを確認する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> angular-sample</span><br><span class="line">$ ng version</span><br><span class="line">_                      _                 ____ _     ___</span><br><span class="line">/ \   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|</span><br><span class="line">/ △ \ | <span class="string">'_ \ / _` | | | | |/ _` | '</span>__|   | |   | |    | |</span><br><span class="line">/ ___ \| | | | (_| | |_| | | (_| | |      | |___| |___ | |</span><br><span class="line">/_/   \_\_| |_|\__, |\__,_|_|\__,_|_|       \____|_____|___|</span><br><span class="line">           |___/</span><br><span class="line">@angular/cli: 1.3.0</span><br><span class="line">node: 8.3.0</span><br><span class="line">os: darwin x64</span><br><span class="line">@angular/animations: 4.3.4</span><br><span class="line">@angular/common: 4.3.4</span><br><span class="line">@angular/compiler: 4.3.4</span><br><span class="line">@angular/core: 4.3.4</span><br><span class="line">@angular/forms: 4.3.4</span><br><span class="line">@angular/http: 4.3.4</span><br><span class="line">@angular/platform-browser: 4.3.4</span><br><span class="line">@angular/platform-browser-dynamic: 4.3.4</span><br><span class="line">@angular/router: 4.3.4</span><br><span class="line">@angular/cli: 1.3.0</span><br><span class="line">@angular/compiler-cli: 4.3.4</span><br><span class="line">@angular/language-service: 4.3.4</span><br></pre></td></tr></table></figure><p>以下で起動。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng serve</span><br></pre></td></tr></table></figure><h2 id="プロジェクト構成">プロジェクト構成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── .angular-cli.json                * Angular CLI 設定ファイル</span><br><span class="line">├── .editorconfig                    * エディタの設定ファイル</span><br><span class="line">├── .gitignore</span><br><span class="line">├── e2e                              * エンドツーエンドテストディレクトリ</span><br><span class="line">│   ├── app.e2e-spec.ts</span><br><span class="line">│   ├── app.po.ts</span><br><span class="line">│   └── tsconfig.e2e.json</span><br><span class="line">├── karma.conf.js                    * karma（テストランナー）の設定ファイル</span><br><span class="line">├── package.json                     * npmの設定ファイル</span><br><span class="line">├── protractor.conf.js               * e2eテストの設定ファイル</span><br><span class="line">├── tsconfig.json                    * TypeScriptの設定ファイル</span><br><span class="line">├── tslint.json                      * TypeScriptのLinter設定ファイル</span><br><span class="line">└── src                              * ソースファイルディレクトリ</span><br><span class="line">    ├── app                          * アプリケーションコードディレクトリ</span><br><span class="line">    │   ├── app.component.css</span><br><span class="line">    │   ├── app.component.html</span><br><span class="line">    │   ├── app.component.spec.ts</span><br><span class="line">    │   ├── app.component.ts</span><br><span class="line">    │   └── app.module.ts</span><br><span class="line">    ├── assets</span><br><span class="line">    ├── environments</span><br><span class="line">    │   ├── environment.prod.ts</span><br><span class="line">    │   └── environment.ts</span><br><span class="line">    ├── favicon.ico</span><br><span class="line">    ├── index.html                    * トップ画面、ルートコンポーネントを記載</span><br><span class="line">    ├── main.ts                       * ルートモジュールのロード（メイン）</span><br><span class="line">    ├── polyfills.ts</span><br><span class="line">    ├── styles.css</span><br><span class="line">    ├── test.ts</span><br><span class="line">    ├── tsconfig.app.json             * TypeScriptの設定ファイル</span><br><span class="line">    ├── tsconfig.spec.json            * TypeScriptのテスト設定ファイル</span><br><span class="line">    └── typings.d.ts                  * TypeScriptの型定義ファイル</span><br></pre></td></tr></table></figure><p><code>.ditorconfig</code> は<a href="http://editorconfig.org" target="_blank" rel="noopener">EditorConfig</a>というプロジェクトの設定ファイルで、エディタへプラグインなどを入れることにより様々なエディタの設定をプロジェクト単位で可能にする。<br>テストは <strong>Jasmine</strong> （テスティングフレームワーク）と <strong>Karma</strong> （テストランナー）の組み合わせで実行される。<br>e2e（エンドツーエンド）テストは <strong>protractor</strong> 。</p><h2 id="主要なコマンド">主要なコマンド</h2><ul><li><code>ng new</code><ul><li>新規にAngularプロジェクトを作成する</li></ul></li><li><code>ng build</code><ul><li><code>src</code> 配下をビルドして <code>dist</code> へ出力する</li></ul></li><li><code>ng serve</code><ul><li>Webサーバを起動してアプリケーションを実行する</li></ul></li><li><code>ng generate</code><ul><li>blueprints から選択して新たにコードを生成する</li></ul></li><li><code>ng eject</code><ul><li><code>ng generate</code> などで作成したコードを取り除き、webpackの設定やスクリプトを変更する</li></ul></li><li><code>ng get</code><ul><li>設定（key-value）から値（value）を取得する</li></ul></li><li><code>ng set</code><ul><li>設定（key-value）に値（value）を追加する</li></ul></li><li><code>ng lint</code><ul><li>Linterを実行する</li></ul></li><li><code>ng test</code><ul><li>テストを実行する</li></ul></li><li><code>ng e2e</code><ul><li>e2eテストを実行する</li></ul></li><li><code>ng xi18n</code><ul><li>コードからi18nメッセージを抜く</li></ul></li></ul><p>上記以外や詳細なオプションは <code>ng help</code> を参照。</p><h3 id="blueprints-の種類">blueprints の種類</h3><ul><li>module<ul><li><code>ng generate module sample</code></li><li>モジュール（ <code>sample/sample.module.ts</code> ）が作成される。</li><li>自動で指定したモジュール名でディレクトリが切られることに注意</li></ul></li><li>component<ul><li><code>ng generate component sample</code></li><li>コンポーネント（以下）を作成し、 <code>app.module.ts</code> に自動登録（importおよびメタデータ <code>declarations</code> への追加）される。<ul><li><code>sample.component.ts</code> 、 <code>sample.component.spec.ts</code> 、 <code>sample.component.html</code> 、 <code>sample.component.scss</code></li></ul></li><li>なお、既に存在するモジュール名で作成すると、そのモジュール名のディレクトリ内に作成される。</li></ul></li><li>directive<ul><li><code>ng generate directive sample</code></li><li>ディレクティブ（以下）を作成し、 <code>app.module.ts</code> に自動登録（importおよびメタデータ <code>declarations</code> への追加）される。<ul><li><code>sample.directive.ts</code> 、 <code>sample.directive.spec.ts</code></li></ul></li></ul></li><li>pipe<ul><li><code>ng generate pipe sample</code></li><li>パイプ（以下）を作成し、 <code>app.module.ts</code> に自動登録（importおよびメタデータ <code>declarations</code> への追加）される。<ul><li><code>sample.pipe.ts</code> 、 <code>sample.pipe.spec.ts</code></li></ul></li></ul></li><li>service<ul><li><code>ng generate service sample</code></li><li>サービス（以下）を作成する。<ul><li><code>sample.service.ts</code> 、 <code>sample.service.spec.ts</code></li></ul></li></ul></li><li>class<ul><li><code>ng generate class sample</code></li><li>普通のクラス（ <code>sample.ts</code> ）が作成される。</li></ul></li><li>interface<ul><li><code>ng generate interface sample</code></li><li>普通のインターフェース（ <code>sample.ts</code> ）が作成される。</li></ul></li><li>enum<ul><li><code>ng generate enum sample</code></li><li>普通の列挙型（ <code>sample.enum.ts</code> ）が作成される。</li></ul></li></ul><p>ディレクトリを切りたい場合は <code>/</code> を加えて、 <code>ng generate service sample/sample-service</code> のようにする。</p><h2 id="angular-cli-のバージョンアップ方法">Angular CLI のバージョンアップ方法</h2><p>グローバルでは以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global remove @angular/cli</span><br><span class="line">$ yarn cache clean</span><br><span class="line">$ yarn global add @angular/cli@latest</span><br><span class="line">$ ndenv <span class="built_in">rehash</span></span><br></pre></td></tr></table></figure><p>ローカルプロジェクトでは以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf node_modules dist <span class="comment"># use rmdir on Windows</span></span><br><span class="line">$ yarn add @angular/cli@latest --dev</span><br><span class="line">$ yarn install</span><br></pre></td></tr></table></figure><h1 id="angularの基本">Angularの基本</h1><p>Angularのアーキテクチャは以下の要素から構成される。</p><ul><li>モジュール（<span class="citation" data-cites="NgModule">@NgModule</span>）</li><li>コンポーネント（<span class="citation" data-cites="Components">@Components</span>）</li><li>テンプレート（Templates）</li><li>メタデータ（Metadata）</li><li>データバインディング（Data Binding）</li><li>ディレクテイブ（<span class="citation" data-cites="Directive">@Directive</span>）</li><li>パイプ（<span class="citation" data-cites="Pipe">@Pipe</span>）</li><li>サービス（Services）・DI（Dependency injection / <span class="citation" data-cites="Injectable">@Injectable</span>）</li><li>フォームとバリデータ</li><li>Angularライブラリ</li></ul><p>上記の各々について後述する。</p><h2 id="モジュールngmodule">モジュール（<span class="citation" data-cites="NgModule">@NgModule</span>）</h2><p>Angularのアプリケーションはモジュール単位で機能を管理する。<br>モジュールは後述の <strong>コンポーネント</strong> や <strong>テンプレート</strong> を包含する。</p><p>Angularアプリケーションは少なくとも１つ <strong>ルートモジュール</strong> を持ち、<code>AppModule</code> と命名する。<br>ルートモジュールは、 <code>src/main.ts</code> からロードされる。<br>通常のアプリケーションの場合、ルートモジュールは１つだが、巨大なアプリケーションの場合、複数のルートモジュールを持つこともある。</p><p>モジュールは以下のように作成する。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;      <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports:      [ BrowserModule ],</span><br><span class="line">  providers:    [ Logger ],</span><br><span class="line">  declarations: [ AppComponent ],</span><br><span class="line">  exports:      [ AppComponent ],</span><br><span class="line">  bootstrap:    [ AppComponent ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><p><code>AppModule</code> クラスに <code>@NgModule</code> <strong>デコレータ</strong> （Javaでいうアノテーション）を付与した形になっている。<br>デコレータにAngularに則した設定を行い、クラスには何も書かない（たぶん）。<br><code>@NgModule</code> の代表的なプロパティは以下の通り。ちなみにデコレータに設定するプロパティを <strong>メタデータ</strong> という。</p><ul><li><code>imports</code><ul><li>このモジュールに他のモジュールを取り込み、このモジュール内で定義されているコンポーネントやテンプレートが他のモジュールのクラスを使用できるようになる。</li><li>他のモジュールの <code>providers</code> ・ <code>exports</code> に定義されたものを使用できるようになる。</li></ul></li><li><code>providers</code><ul><li>このモジュールおよび関係するコンポーネント・サービスへインジェクトするためのサービスクラスを定義・インスタンス化する。</li></ul></li><li><code>declarations</code><ul><li>このモジュールに所属させるビュークラスを指定する。Angularのビュークラスには、 <strong>コンポーネント</strong> 、 <strong>ディレクティブ</strong> 、 <strong>パイプ</strong> がある。</li></ul></li><li><code>exports</code><ul><li>このモジュール内のクラスを他のモジュールのコンポーネント・テンプレートで使用可能にする。</li><li><code>imports</code> の逆。</li></ul></li><li><code>bootstrap</code><ul><li><strong>ルートコンポーネント</strong> を定義する。ルートコンポーネントはアプリケーションのメインビュー。</li><li><strong>ルートモジュールにだけ</strong> に <code>bootstarp</code> プロパティを設定する。</li></ul></li></ul><p>以下が <strong>ルートモジュール</strong> を指定する方法（ <code>src/main.ts</code> ）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; platformBrowserDynamic &#125; from &apos;@angular/platform-browser-dynamic&apos;;</span><br><span class="line">import &#123; AppModule &#125; from &apos;./app/app.module&apos;;</span><br><span class="line"></span><br><span class="line">platformBrowserDynamic().bootstrapModule(AppModule);</span><br></pre></td></tr></table></figure><p>また、モジュール内では以下のようにライブラリから他のモジュールをロードすることもできる。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br></pre></td></tr></table></figure><p>ロードしたライブラリモジュールは、 <code>@NgModule</code> の <code>imports</code> プロパティに指定することにより使用できるようになる。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imports:      [ BrowserModule ],</span><br></pre></td></tr></table></figure><h2 id="コンポーネントcomponent">コンポーネント（<span class="citation" data-cites="Component">@Component</span>）</h2><p>コンポーネントはビューの役割を担う。<br>コンポーネントクラス内で定義したフィールド変数やメソッドは、テンプレートから直接使用できる。<br>ロジックは基本的にコンポーネント内に記載し、サービスクラスをDIしたりする。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  moduleId: <span class="built_in">module</span>.id,</span><br><span class="line">  selector:    <span class="string">'hero-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./hero-list.component.html'</span>,</span><br><span class="line">  providers:  [ HeroService ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroListComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"><span class="comment">/* . . . */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Component</code> の代表的なメタデータプロパティは以下。</p><ul><li>moduleId<ul><li>このモジュールが定義されるファイルのES/CommonJSモジュールID</li></ul></li><li>selector<ul><li>このコンポーネントのHTMLタグ名を定義する。</li></ul></li><li>template<ul><li>テンプレートを直接記載する。</li></ul></li><li>templateUrl<ul><li>テンプレートファイルのパスを指定する。</li></ul></li><li>styles<ul><li>スタイルシート（CSSやSass）を直接記載する。このコンポーネント外には影響が無い。</li></ul></li><li>styleUrls<ul><li>スタイルシートファイルのパスを指定する。このコンポーネント外には影響が無い。</li></ul></li><li>providers<ul><li>このコンポーネントがDI経由で使用するサービスクラスを指定する。</li><li>コンポーネントクラスの <code>constructor</code> の引数でも指定する必要がある。</li></ul></li></ul><p>その他の <code>@Component</code> のメタデータは<a href="https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html" target="_blank" rel="noopener">ここ</a>で確認できる。</p><h2 id="テンプレートtemplates">テンプレート（Templates）</h2><p>テンプレートはコンポーネントのDOMとして使われるHTML。<br>コンポーネントクラスの <code>@Component</code> デコレータのメタデータに直接記載（ <code>template</code> ）することも、別ファイルとして作成して読み込む（ <code>templateUrl</code> ）ことも可能。<br>テンプレート内では、HTMLの属性として <strong>ディレクティブ</strong> （ <code>*ngFor</code> など）、コンポーネントとのデータ・機能のやりとりに <strong>データバインディング</strong> を使用することができる。</p><ul><li>コンポーネントフィールドへのアクセス<ul><li><code>*ngFor</code> ： コレクションフィールドの値にアクセス</li><li><code>*ngFor="let hero of heroes"</code> ： コレクションheroesの各要素をheroへ代入</li></ul></li><li>コンポーネントのメソッド呼び出し<ul><li><code>(click)="onClickMe()"</code> ： クリック時に <code>onClickMe()</code> メソッドを呼び出す</li><li><code>(keyup)="onKey($event)"</code> ： キーアップ時にイベントを引数に <code>onKey()</code> メソッドを呼び出す</li></ul></li></ul><p>また、テンプレートにはスタイルシート（CSS、Sassなど）を指定することができ、<code>@Component</code> デコレータのメタデータ（ <code>styles</code> 、 <code>styleUrls</code> ）で指定することができる。</p><h2 id="メタデータmetadata">メタデータ（Metadata）</h2><p>メタデータは <strong>デコレータ</strong> （ <code>@</code> から始まるJavaでいうアノテーション）に設定するプロパティ。<br>Angularにクラスがどのように挙動するか知らせる役割。<br><code>@Injectable</code> 、 <code>@Input</code> 、 <code>@Output</code> など様々なデコレータにメタデータを設定できる。<br>もう十分前述しているのでこの程度で。</p><h2 id="データバインディングdata-binding">データバインディング（Data Binding）</h2><p>テンプレートとコンポーネント間のデータ・機能のやりとりを行う機能。<br>以下のように４種類ある。</p><ul><li>単方向バインド（interpolation）<ul><li><code>&lt;li&gt;&lt;/li&gt;</code></li><li>コンポーネントの <code>hero.name</code> プロパティの値を <code>&lt;li&gt;</code> 表示する</li></ul></li><li>プロパティバインド（property binding）<ul><li><code>&lt;hero-detail [hero]="selectedHero"&gt;&lt;/hero-detail&gt;</code></li><li>親コンポーネントの <code>selectedHero</code> の値を、子コンポーネントの <code>hero</code> へ渡している</li></ul></li><li>イベントバインド（event binding）<ul><li><code>&lt;li (click)="selectHero(hero)"&gt;&lt;/li&gt;</code></li><li>ユーザのクリックにより <code>selectHero()</code> メソッドが呼び出される。</li></ul></li><li>双方向バインド（Two-way data binding）<ul><li><code>&lt;input [(ngModel)]="hero.name"&gt;</code></li><li><code>ngModel</code> を用いて <strong>参照と更新</strong> を両方同時に実現する。</li></ul></li></ul><p><code>ngModel</code> のようにテンプレートのHTMLタグの属性として記述できるAngularの機能を <strong>ディレクティブ</strong> という。</p><h3 id="イベント">イベント</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onClickButton()"</span>&gt;</span>ボタン1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onClickButtonWithEvent($event)"</span>&gt;</span>ボタン2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>(click)</code> のように、イベント名をカッコで囲んだ属性に、イベントを処理するメソッドを記述する。<br>引数なしの記述と、イベントオブジェクト <code>$event</code> を指定する記述ができる。<br>コンポーネントクラス内では以下のようにメソッド定義する。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onClickButtonWithEvent(event:<span class="built_in">any</span>) &#123;</span><br><span class="line">   <span class="comment">// targetプロパティでイベントを発生させたオブジェクトを取得</span></span><br><span class="line">   <span class="keyword">var</span> button = event.target;</span><br><span class="line">   <span class="comment">// ボタンのラベルをtextContentプロパティから取得して表示</span></span><br><span class="line">   alert(<span class="string">"ボタン「"</span> + button.textContent + <span class="string">"」が押下されました"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="ディレクテイブdirective">ディレクテイブ（<span class="citation" data-cites="Directive">@Directive</span>）</h2><p>ディレクティブは前述の通り、テンプレートのHTMLタグの属性として指定できるAngularの機能。<br>モジュール・コンポーネント間のデータの授受や、ループ・条件分岐といった動的なDOMの機能を提供する。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hero-detail</span> *<span class="attr">ngIf</span>=<span class="string">"selectedHero"</span>&gt;</span><span class="tag">&lt;/<span class="name">hero-detail</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@Directive</code> デコレータでディレクティブを自作できる。<br>ここでは割愛。<a href="https://angular.io/docs/ts/latest/guide/attribute-directives.html" target="_blank" rel="noopener">参考</a></p><h2 id="パイプpipe">パイプ（<span class="citation" data-cites="Pipe">@Pipe</span>）</h2><p>Pipeはテンプレート内で文字列操作の機能を提供する。<br>例えば、Dateオブジェクトをあるフォーマットに整形して表示できる。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コンポーネントクラスのフィールド</span></span><br><span class="line"><span class="keyword">let</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1985</span>,<span class="number">3</span>,<span class="number">1</span>); <span class="comment">// これで1985年4月1日 なことに注意</span></span><br></pre></td></tr></table></figure><p>上記をテンプレードで以下のように指定することにより <strong>yy/MM/dd</strong> 形式で表示できる。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; birthday | date:"yy/MM/dd" &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 1985/04/01 と表示される --&gt;</span></span><br></pre></td></tr></table></figure><p>他にも下記のようなパイプがある。</p><ul><li>DatePipe<ul><li>上記例。日付を整形する。</li><li><code>date_expression | date[:format]</code></li></ul></li><li>UpperCasePipe<ul><li>文字列を大文字にする。</li><li><code>expression | uppercase</code></li></ul></li><li>JsonPipe<ul><li>入力値にJSON.stringfyを実行して返す。</li><li><code>expression | json</code></li></ul></li></ul><p>また、パイプは以下のような感じでチェーンできる。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; birthday | date | uppercase&#125;&#125;</span><br></pre></td></tr></table></figure><p>さらに、<code>@Pipe</code> デコレータでパイプを自作できる。<br>ここでは割愛。<a href="https://angular.io/docs/ts/latest/guide/pipes.html" target="_blank" rel="noopener">参考</a></p><h2 id="サービスservicesdidependency-injection-injectable">サービス（Services）・DI（Dependency injection / <span class="citation" data-cites="Injectable">@Injectable</span>）</h2><p>サービスは <code>export</code> された通常のtypescriptクラス。<br>DIを使用してコンポーネントや他サービスクラスにサービスクラスをインジェクトできる。</p><h3 id="作成例">作成例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ng generate service sample/sample</span><br><span class="line">installing service</span><br><span class="line">  create src/app/sample/sample.service.spec.ts</span><br><span class="line">  create src/app/sample/sample.service.ts</span><br><span class="line">  WARNING Service is generated but not provided, it must be provided to be used</span><br></pre></td></tr></table></figure><p>上記で作成した <code>src/app/sample/sample.service.ts</code> をDIするには、使用するモジュール・コンポーネントにimport、メタデータ <code>providers</code> およびコンストラクタへの指定を行う。<br>以下コンポーネントへの導入例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; SampleService &#125; <span class="keyword">from</span> <span class="string">'./sample/sample.service'</span> <span class="comment">// インポート</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  providers: [SampleService], <span class="comment">// providers に追加</span></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> sampleService: SampleService <span class="comment">// コンストラクタに設定</span></span></span><br><span class="line"><span class="params">  </span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = sampleService.getTitle();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="diインジェクタ">DI・インジェクタ</h3><p>サービスをモジュールやコンポーネントで使用できるようにインジェクトする機能。<br>前述の通り、モジュール・コンポーネントにimport、メタデータ <code>providers</code> およびコンストラクタへの指定を行う。</p><p><code>@Injectable</code> デコレータがついたサービスクラスは多段Inject（DIのDI）することが可能になる。<br>一段Injectはデコレータが無しでもOKだがつけておいても問題ない。</p><h2 id="フォームとバリデータ">フォームとバリデータ</h2><p>http://codezine.jp/article/detail/9596?p=4</p><h2 id="angularライブラリ">Angularライブラリ</h2><p>Angularのライブラリには様々用意されており、APIリファレンスは<a href="https://angular.io/docs/ts/latest/api/" target="_blank" rel="noopener">ここ</a>。<br>リファレンスではクラスの前に記号がついており、それぞれ以下の意味。</p><table><thead><tr class="header"><th style="text-align: left;">記号</th><th style="text-align: left;">意味</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">D</td><td style="text-align: left;">Directive。ディレクティブ。</td></tr><tr class="even"><td style="text-align: left;">P</td><td style="text-align: left;">Pipe。パイプ。</td></tr><tr class="odd"><td style="text-align: left;">@</td><td style="text-align: left;">Decorator。デコレータ。Javaでいう所謂アノテーション。</td></tr><tr class="even"><td style="text-align: left;">C</td><td style="text-align: left;">Class。普通のTypeScriptのクラス。</td></tr><tr class="odd"><td style="text-align: left;">I</td><td style="text-align: left;">Interface。普通のTypeScriptのインターフェース。</td></tr><tr class="even"><td style="text-align: left;">F</td><td style="text-align: left;">Function。関数。</td></tr><tr class="odd"><td style="text-align: left;">E</td><td style="text-align: left;">Enum。普通の列挙型。</td></tr><tr class="even"><td style="text-align: left;">T</td><td style="text-align: left;">Type Alias。なんかわからん。</td></tr><tr class="odd"><td style="text-align: left;">K</td><td style="text-align: left;">Const。定数クラス。</td></tr></tbody></table><h1 id="その他話題メモ">その他話題、メモ</h1><h2 id="typescriptの型解決について">TypeScriptの型解決について</h2><p>解決方法には以下がある。</p><ul><li>tsd</li><li>typings</li><li><span class="citation" data-cites="types">@types</span></li></ul><p>Angularは型定義が含まれているため、上記３つは不要。ただし、他のライブラリを用いる場合 <code>@types</code> を使用する。（typingsに変わったかも。。。）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;フロントエンドMVCフレームワーク &lt;strong&gt;Angular&lt;/strong&gt; （所謂Angular4）を触ってみた。&lt;br&gt;
ここでは &lt;a href=&quot;https://github.com/angular/angular-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Angular CLI&lt;/a&gt; を使う。&lt;br&gt;
なお、 &lt;strong&gt;ndenv&lt;/strong&gt; が入ってるテイで書く。導入は下記記事参照。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/anyenv/&quot;&gt;すべての**envを管理するanyenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="npm" scheme="https://pepese.github.io/tags/npm/"/>
    
      <category term="Yarn" scheme="https://pepese.github.io/tags/Yarn/"/>
    
      <category term="TypeScript" scheme="https://pepese.github.io/tags/TypeScript/"/>
    
      <category term="Angular" scheme="https://pepese.github.io/tags/Angular/"/>
    
      <category term="Sass" scheme="https://pepese.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>Express入門</title>
    <link href="https://pepese.github.io/blog/express-basics/"/>
    <id>https://pepese.github.io/blog/express-basics/</id>
    <published>2017-08-14T06:08:37.000Z</published>
    <updated>2018-10-24T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.jsのWebフレームワーク <code>Express</code> 触ってみた。<br>下記の記事を読んだテイで書く。</p><ul><li><a href="https://pepese.github.io/blog/nodejs-basics/">Node.js/npm入門</a></li></ul><p>ついでに <strong>Yarn</strong> も使ってみる。<br>なお、ここでは express-generator は使用しない。</p><a id="more"></a><h1 id="環境構築">環境構築</h1><h2 id="yarnのインストール">Yarnのインストール</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g yarn</span><br><span class="line">$ ndenv <span class="built_in">rehash</span></span><br><span class="line">$ yarn --version</span><br></pre></td></tr></table></figure><h1 id="expressアプリケーションの構築">Expressアプリケーションの構築</h1><h2 id="expressプロジェクトの作成">Expressプロジェクトの作成</h2><p>プロジェクト作成は以下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir express-sample          // プロジェクトディレクトリの作成</span><br><span class="line">$ <span class="built_in">cd</span> express-sample</span><br><span class="line">$ yarn init</span><br></pre></td></tr></table></figure><p>Angular CLI 等で既にプロジェクトを作成している場合は、上記は行わず以下から実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add express@5.0.0-alpha.6 body-parser cookie-parser debug morgan pug serve-favicon request fs file-stream-rotator node-sass-middleware</span><br><span class="line">$ touch .gitignore</span><br><span class="line">$ mkdir app                     // サーバサイドExpressアプリ用のソースディレクトリ作成</span><br><span class="line">$ touch app/app.js              // Expressアプリケーション起動ポイントの作成</span><br><span class="line">$ mkdir app/models              // Mongoose（MongoDB）用のモデルディレクトリ作成</span><br><span class="line">$ touch app/models/.gitkeep</span><br><span class="line">$ mkdir app/repositories        // DAO/Repository用のディレクトリ作成</span><br><span class="line">$ touch app/repositories/.gitkeep</span><br><span class="line">$ mkdir app/config              // 設定ファイル用ディレクトリ作成</span><br><span class="line">$ touch app/config/config.json  // 環境差分ファイル作成</span><br><span class="line">$ mkdir app/<span class="built_in">log</span>                 // ログ出力用ディレクトリ作成</span><br><span class="line">$ touch app/<span class="built_in">log</span>/.gitkeep</span><br><span class="line">$ mkdir app/spec                // テストスクリプト用のディレクトリ作成</span><br><span class="line">$ touch app/spec/.gitkeep</span><br></pre></td></tr></table></figure><p>Expressアプリケーションのソースディレクトリは <code>app/</code> だけで完結するようにする。<br>また、 forever を導入しておく。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add forever // npm install -g コマンド互換</span><br><span class="line">$ ndenv <span class="built_in">rehash</span></span><br></pre></td></tr></table></figure><p>さらに <code>.gitignore</code> に以下を追加しておく。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Logs</span><br><span class="line">/app/log</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># dependencies</span><br><span class="line">/node_modules</span><br><span class="line"></span><br><span class="line"># System Files</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br></pre></td></tr></table></figure><h3 id="フロントエンドアプリケーションをプロジェクトに同梱する場合rest-apiアプリを作成する場合">フロントエンドアプリケーションをプロジェクトに同梱する場合、REST APIアプリを作成する場合</h3><p>この場合、以下のようにディレクトリを作成する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir app/api           // REST API用のコントローラディレクトリ作成</span><br><span class="line">$ touch app/api/.gitkeep</span><br></pre></td></tr></table></figure><p>フロントエンドアプリケーションのトランスパイル結果は <code>express-sample/dist</code> に出力されるものとし、サーバサイドアプリケーション（ <code>express-sample/app</code> ）は <code>express-sample/dist</code> をExpressの公開ディレクトリとする。<br>フロントエンドアプリケーションは <code>app/api</code> に実装したAPIにアクセスする。</p><h3 id="フロントエンドアプリケーションをプロジェクトに同梱せずexpressからテンプレートエンジンviewを使用する場合">フロントエンドアプリケーションをプロジェクトに同梱せず、ExpressからテンプレートエンジンVIEWを使用する場合</h3><p>この場合、以下のようにディレクトリを作成する。<br>なお、 SCSS を使用する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir app/controllers                  // VIEW用のコントローラディレクトリ作成</span><br><span class="line">$ touch app/controllers/.gitkeep</span><br><span class="line">$ mkdir app/views                        // 画面・テンプレート（Pugなど）用のディレクトリ作成</span><br><span class="line">$ touch app/views/.gitkeep</span><br><span class="line">$ mkdir app/public                       // 静的コンテンツ用のディレクトリ作成</span><br><span class="line">$ mkdir app/public/javascripts           // JS用のディレクトリ作成</span><br><span class="line">$ touch app/public/javascripts/.gitkeep</span><br><span class="line">$ mkdir app/public/stylesheets           // SCSS用のディレクトリ作成</span><br><span class="line">$ touch app/public/stylesheets/style.scss</span><br><span class="line">$ mkdir app/public/images                // 画像用のディレクトリ作成</span><br><span class="line">$ touch app/public/images/.gitkeep</span><br></pre></td></tr></table></figure><h2 id="ソースコードの作成">ソースコードの作成</h2><p>「フロントエンドアプリケーションをプロジェクトに同梱する場合」は以下を参照。</p><ul><li><a href="https://pepese.github.io/blog/mean-stack-basics/">所謂MEANスタックを作る</a></li></ul><p>ここでは、「フロントエンドアプリケーションをプロジェクトに同梱せず、Expressからテンプレートエンジンを使用する場合」で、最低限動くViewアプリを構築するために以下のスクリプトを実装する。</p><ul><li><code>app/app.js</code><ul><li>Expressアプリケーションのミドルウェアの設定と起動処理</li></ul></li><li><code>app/controllers/router.js</code><ul><li>Viewを処理するモジュールへのルーティングを行う</li></ul></li><li><code>app/controllers/get_index.js</code><ul><li>Index画面を表示する</li></ul></li><li><code>app/controllers/get_users.js</code><ul><li>Users画面を表示する</li></ul></li><li><code>app/public/stylesheets/style.scss</code></li><li><code>app/views/layout.pug</code></li><li><code>app/views/index.pug</code></li><li><code>app/views/error.pug</code></li><li><code>app/config/config.json</code><ul><li>環境差分設定ファイル</li></ul></li></ul><h3 id="appapp.js">app/app.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/app.js?footer=0"></script><h3 id="appcontrollersindex.js">app/controllers/index.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/controllers/router.js?footer=0"></script><h3 id="appcontrollersget_index.js">app/controllers/get_index.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/controllers/get_index.js?footer=0"></script><h3 id="appcontrollersget_users.js">app/controllers/get_users.js</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/controllers/get_users.js?footer=0"></script><h3 id="apppublicstylesheetsstyle.scss">app/public/stylesheets/style.scss</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/public/stylesheets/style.scss?footer=0"></script><h3 id="appviewslayout.pug">app/views/layout.pug</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/views/layout.pug?footer=0"></script><h3 id="appviewsindex.pug">app/views/index.pug</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/views/index.pug?footer=0"></script><h3 id="appviewserror.pug">app/views/error.pug</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/views/error.pug?footer=0"></script><h3 id="appconfigconfig.json">app/config/config.json</h3><script src="https://gist-it.appspot.com/github/pepese/js-sample/blob/master/express-sample/app/config/config.json?footer=0"></script><h3 id="起動">起動</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=production forever start app/app.js</span><br></pre></td></tr></table></figure><p><code>NODE_ENV</code> で環境を指定することができる。デフォルトは <code>development</code> 。</p><h1 id="ちょっとexpressの機能解説">ちょっとExpressの機能解説</h1><h2 id="expressアプリケーション">Expressアプリケーション</h2><p>Expressアプリケーションの最小単位は以下のように作成する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure><h2 id="ミドルウェア関数">ミドルウェア関数</h2><p>Expressは、単独では最小限の機能を備えたルーティングとミドルウェアのWebフレームワーク。<br>Expressアプリケーションは様々な <strong>ミドルウェア関数</strong> 呼び出しを行うことで様々な機能を実現する。<br>ミドルウェア関数はコールバック関数で以下の種類がある。</p><ul><li>アプリケーション・レベルのミドルウェア</li><li>ルーター・レベルのミドルウェア</li><li>エラー処理ミドルウェア</li><li>標準装備のミドルウェア</li><li>サード・パーティー・ミドルウェア</li></ul><h3 id="アプリケーションレベルのミドルウェア">アプリケーション・レベルのミドルウェア</h3><p>以下のように記述する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use([path,] callback [, callback...])</span><br></pre></td></tr></table></figure><p><code>path</code> を記載しない場合は <strong>全てのリクエスト</strong> に対してミドルウェア関数（ <code>callback</code> :コールバック関数）が実行される。<br>コールバック関数には <code>(req, res, next)</code> の3つを渡すことができる。 <code>next()</code> を実行すると次のミドルウェア関数に処理が移る。（ <strong><code>next()</code> を実行しないと処理は終わる</strong> ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use( <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Time:'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>path</code> を記載すると <strong>指定したパスへのリクエスト</strong> に対してミドルウェア関数が実行される。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/user/:id'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Request Type:'</span>, req.method);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/user/:id'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'USER'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><code>app.use</code> は <code>app.[all|get|post|put|delete|etc]</code> よりも全て前に記述する必要がある</strong> 。</p><h3 id="ルーターレベルのミドルウェア">ルーター・レベルのミドルウェア</h3><p>ルーター・レベルのミドルウェアは、express.Router() のインスタンスにバインドされる点を除き、アプリケーション・レベルのミドルウェアと同じ。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br></pre></td></tr></table></figure><p>正直、 <strong>アプリケーション・レベルとルーター・レベルの違いはよくわからない</strong> 。<br>以下の方針で使い分けることにする。</p><ul><li>アプリケーション・レベル<ul><li><strong>アプリ全体</strong> 、 <strong>全てのHTTPメソッド</strong> へ影響する処理</li><li><code>app.use()</code> を使用する</li></ul></li><li>ルーター・レベル<ul><li><strong>特定のパス</strong> 、 <strong>特定のHTTPメソッド</strong> へのルーティング</li><li><code>router.[all|get|post|put|delete](path, callback [, callback...])</code> を使用する</li></ul></li></ul><h3 id="エラー処理ミドルウェア">エラー処理ミドルウェア</h3><p>引数は <code>(err、req、res、next)</code> となり <code>err</code> が追加される。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use( <span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="標準装備のミドルウェア">標準装備のミドルウェア</h3><p>Expressの標準装備のミドルウェア関数は <code>express.static</code> のみ。<br>過去はもったあったらしいが、個別モジュール化されたらしい。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express.static(root, [options])</span><br></pre></td></tr></table></figure><p>静的コンテツを提供する機能。<br><code>root</code> 引数は、静的コンテンツを提供するルートディレクトリを指定する。<br><code>options</code> オブジェクトにはプロパティを指定することができる。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  dotfiles: <span class="string">'ignore'</span>,</span><br><span class="line">  etag: <span class="literal">false</span>,</span><br><span class="line">  extensions: [<span class="string">'htm'</span>, <span class="string">'html'</span>],</span><br><span class="line">  index: <span class="literal">false</span>,</span><br><span class="line">  maxAge: <span class="string">'1d'</span>,</span><br><span class="line">  redirect: <span class="literal">false</span>,</span><br><span class="line">  setHeaders: <span class="function"><span class="keyword">function</span> (<span class="params">res, path, stat</span>) </span>&#123;</span><br><span class="line">    res.set(<span class="string">'x-timestamp'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>, options));</span><br></pre></td></tr></table></figure><h3 id="サードパーティーミドルウェア">サード・パーティー・ミドルウェア</h3><p><code>npm</code> でモジュールをインストールして、アプリケーション・レベルまたはルーター・レベルでロードして使用する。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>); <span class="comment">// サード・パーティー・ミドルウェア</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parsers for POST data</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br></pre></td></tr></table></figure><h2 id="モジュール呼び出し">モジュール呼び出し</h2><p><code>module.exports</code> と <code>require</code> を使用すると、モジュールの外部参照が可能になる。<br>以下のような <code>index.js</code> があったとすると</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = router; <span class="comment">// 外部モジュールからrequireできるようになる</span></span><br></pre></td></tr></table></figure><p><code>app.js</code> から以下のように <code>index.js</code> の機能を呼び出すことができる。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">'./index'</span>);</span><br></pre></td></tr></table></figure><h2 id="expressアプリケーションの設定">Expressアプリケーションの設定</h2><p>Expressでは、以下の記載で「key-value」形式でアプリケーションに対して様々な設定ができる。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.set(name, value);</span><br><span class="line">app.get(name);</span><br></pre></td></tr></table></figure><p>代表的な設定項目としては以下（<a href="http://expressjs.com/ja/api.html#app.settings.table" target="_blank" rel="noopener">詳細</a>）があるが、単にインメモリキーバリューストア（好きな「key-value」を設定できる）としても使用できる。</p><table><colgroup><col style="width: 26%"><col style="width: 26%"><col style="width: 21%"><col style="width: 26%"></colgroup><thead><tr class="header"><th style="text-align: center;">Property</th><th style="text-align: center;">Type</th><th style="text-align: left;">Description</th><th style="text-align: center;">Default</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">case sensitive routing</td><td style="text-align: center;">Boolean</td><td style="text-align: left;">ルーティング時、URLの大文字・小文字を区別する。</td><td style="text-align: center;">N/A (undefined)</td></tr><tr class="even"><td style="text-align: center;">env</td><td style="text-align: center;">String</td><td style="text-align: left;">環境名。productionとかdevelopmentとか。</td><td style="text-align: center;">process.env.NODE_ENV or “development”</td></tr><tr class="odd"><td style="text-align: center;">etag</td><td style="text-align: center;">Varied</td><td style="text-align: left;"><code>Etag</code> レスポンスヘッダの設定を行う。</td><td style="text-align: center;">weak</td></tr><tr class="even"><td style="text-align: center;">jsonp callback name</td><td style="text-align: center;">String</td><td style="text-align: left;">JSONP callback名を設定する。</td><td style="text-align: center;">“callback”</td></tr><tr class="odd"><td style="text-align: center;">json replacer</td><td style="text-align: center;">Varied</td><td style="text-align: left;"><code>JSON.stringify</code> で利用される引数 <code>replacer</code> の設定。JSONの各メンバの値の変換の設定ができる。</td><td style="text-align: center;">N/A (undefined)</td></tr><tr class="even"><td style="text-align: center;">json spaces</td><td style="text-align: center;">Varied</td><td style="text-align: left;"><code>JSON.stringify</code> で利用される引数 <code>space</code> の設定。JSONパース時に見やすいようにインデントのスペースを設定できる。</td><td style="text-align: center;">N/A (undefined)</td></tr><tr class="odd"><td style="text-align: center;">query parser</td><td style="text-align: center;">Varied</td><td style="text-align: left;">URLクエリパラメータのパースの設定ができる。 <code>simple</code> 、 <code>extended</code> 、カスタマイズから選択できる。 <code>simple</code> はNodeJSが内包するNativeのクエリパーサ。 <code>extended</code> は サードパーティモジュール <code>qs</code> 。カスタマイズは関数を設定し、その関数はクエリパラメータの文字列を受け取り、キー・バリューのオブジェクトを返却するよう実装する。</td><td style="text-align: center;">“extended”</td></tr><tr class="even"><td style="text-align: center;">strict routing</td><td style="text-align: center;">Boolean</td><td style="text-align: left;">ルーティングにおいてURLの <code>/foo</code> と <code>/foo/</code> を区別するかどうか設定する。</td><td style="text-align: center;">N/A (undefined)</td></tr><tr class="odd"><td style="text-align: center;">subdomain offset</td><td style="text-align: center;">Number</td><td style="text-align: left;">サブドメインにアクセスするために削除するホストのドット区切り部分の数。</td><td style="text-align: center;">2</td></tr><tr class="even"><td style="text-align: center;">trust proxy</td><td style="text-align: center;">Varied</td><td style="text-align: left;">信頼するWebプロキシの設定を行う。詳細は、<a href="http://expressjs.com/ja/guide/behind-proxies.html" target="_blank" rel="noopener">ここ</a>を参照。</td><td style="text-align: center;">false (disabled)</td></tr><tr class="odd"><td style="text-align: center;">views</td><td style="text-align: center;">String or Array</td><td style="text-align: left;">Viewを配置するディレクトリを文字列もしくは配列で設定する。</td><td style="text-align: center;">process.cwd() + ‘/views’</td></tr><tr class="even"><td style="text-align: center;">view cache</td><td style="text-align: center;">Boolean</td><td style="text-align: left;">Viewテンプレートコンパイルキャッシュを有効にする。</td><td style="text-align: center;">true in production, otherwise undefined.</td></tr><tr class="odd"><td style="text-align: center;">view engine</td><td style="text-align: center;">String</td><td style="text-align: left;">Viewエンジンの設定を行う。</td><td style="text-align: center;">N/A (undefined)</td></tr><tr class="even"><td style="text-align: center;">x-powered-by</td><td style="text-align: center;">Boolean</td><td style="text-align: left;">“X-Powered-By: Express” HTTPヘッダを有効にする。</td><td style="text-align: center;">true</td></tr></tbody></table><h2 id="モジュール間で変数をやりとりする方法">モジュール間で変数をやりとりする方法</h2><ul><li>global変数を使う<ul><li><code>const global.hoge = 'hogehoge';</code> みたいに、頭にglobalを付けるとglobalスコープで扱われる。</li><li>ただし、 <code>require('./global.js');</code> のようにグローバル変数を定義したモジュールを使用するモジュールでロードする必要がある。</li><li>グローバル領域を汚染するので注意が必要</li></ul></li><li>共有変数用のモジュールを作成する<ul><li><code>module.exports = {};</code> とだけ書いた <code>common.js</code> を作成する</li><li>他モジュールからは <code>require('./common').hoge = hoge;</code> で変数を代入でき、 <code>const hoge = require('./common').hoge</code> で変数を参照できる</li><li>どんな変数を作ったからわからなくなるので、 <code>common.js</code> にはコメントくらい残しておく必要がある</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.jsのWebフレームワーク &lt;code&gt;Express&lt;/code&gt; 触ってみた。&lt;br&gt;
下記の記事を読んだテイで書く。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pepese.github.io/blog/nodejs-basics/&quot;&gt;Node.js/npm入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ついでに &lt;strong&gt;Yarn&lt;/strong&gt; も使ってみる。&lt;br&gt;
なお、ここでは express-generator は使用しない。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://pepese.github.io/tags/Node-js/"/>
    
      <category term="Express.js" scheme="https://pepese.github.io/tags/Express-js/"/>
    
      <category term="JavaScript" scheme="https://pepese.github.io/tags/JavaScript/"/>
    
      <category term="npm" scheme="https://pepese.github.io/tags/npm/"/>
    
      <category term="Yarn" scheme="https://pepese.github.io/tags/Yarn/"/>
    
  </entry>
  
</feed>
